
Emvedded_OS_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d4  080082d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080082dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e78  20000078  08008354  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ef0  08008354  00022ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bac9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f82  00000000  00000000  0003bb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00040ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ca  00000000  00000000  00042140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016185  00000000  00000000  00066b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5312  00000000  00000000  0007cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151fa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  00151ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076c0 	.word	0x080076c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080076c0 	.word	0x080076c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <__io_putchar>:
  * @param  None
  * @retval None
  */
UART_HandleTypeDef huart4;
PUTCHAR_PROTOTYPE
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000938:	1d39      	adds	r1, r7, #4
 800093a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093e:	2201      	movs	r2, #1
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <__io_putchar+0x20>)
 8000942:	f001 fe56 	bl	80025f2 <HAL_UART_Transmit>
	return ch;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20012e10 	.word	0x20012e10

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fc15 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f817 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f89d 	bl	8000aa0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000966:	f000 f871 	bl	8000a4c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
//  xTaskCreate( printf_test, " printf_test", 500, NULL, 1, NULL);

//  xTaskCreate( darray_test, " darray_test", 500, NULL, 1, NULL);
//  xTaskCreate( gc_test, " gc_test", 500, NULL, 1, NULL);
  xTaskCreate( vector_test, " vector_test", 500, NULL, 1, NULL);
 800096a:	2300      	movs	r3, #0
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2301      	movs	r3, #1
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000978:	4903      	ldr	r1, [pc, #12]	; (8000988 <main+0x34>)
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <main+0x38>)
 800097c:	f003 fec0 	bl	8004700 <xTaskCreate>
//  xTaskCreate( hashmap_test, " hashmap_test", 500, NULL, 1, NULL);
  vTaskStartScheduler();
 8000980:	f004 f804 	bl	800498c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000984:	e7fe      	b.n	8000984 <main+0x30>
 8000986:	bf00      	nop
 8000988:	080077cc 	.word	0x080077cc
 800098c:	08000b91 	.word	0x08000b91

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b094      	sub	sp, #80	; 0x50
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 fcf8 	bl	8006394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SystemClock_Config+0xb4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SystemClock_Config+0xb4>)
 80009be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <SystemClock_Config+0xb4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <SystemClock_Config+0xb8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <SystemClock_Config+0xb8>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <SystemClock_Config+0xb8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fe81 	bl	8001708 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a0c:	f000 f9d4 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f8e4 	bl	8001bf8 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a36:	f000 f9bf 	bl	8000db8 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_UART4_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_UART4_Init+0x4c>)
 8000a84:	f001 fd68 	bl	8002558 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f993 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20012e10 	.word	0x20012e10
 8000a9c:	40004c00 	.word	0x40004c00

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_GPIO_Init+0x30>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x30>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_GPIO_Init+0x30>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <test_size>:
		// destroy test
		Tm_DArray_destroy(array);
	}
}

void test_size (TmHeap* heap, double* heap_size, double* white_size, double* ecru_size, double* grey_size, double* black_size) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]

	*heap_size = TmHeap_size(heap);
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f002 fbe9 	bl	80032ba <TmHeap_size>
 8000ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8000aec:	eef0 7a60 	vmov.f32	s15, s1
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	ed83 7b00 	vstr	d7, [r3]
	*white_size = TmHeap_white_size(heap);
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f002 fbfa 	bl	80032f0 <TmHeap_white_size>
 8000afc:	eeb0 7a40 	vmov.f32	s14, s0
 8000b00:	eef0 7a60 	vmov.f32	s15, s1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	ed83 7b00 	vstr	d7, [r3]
	*ecru_size = TmHeap_ecru_size(heap);
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f002 fc23 	bl	8003356 <TmHeap_ecru_size>
 8000b10:	eeb0 7a40 	vmov.f32	s14, s0
 8000b14:	eef0 7a60 	vmov.f32	s15, s1
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	ed83 7b00 	vstr	d7, [r3]
	*grey_size = TmHeap_grey_size(heap);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f002 fc3f 	bl	80033a2 <TmHeap_grey_size>
 8000b24:	eeb0 7a40 	vmov.f32	s14, s0
 8000b28:	eef0 7a60 	vmov.f32	s15, s1
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	ed83 7b00 	vstr	d7, [r3]
	*black_size = TmHeap_black_size(heap);
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f002 fc5b 	bl	80033ee <TmHeap_black_size>
 8000b38:	eeb0 7a40 	vmov.f32	s14, s0
 8000b3c:	eef0 7a60 	vmov.f32	s15, s1
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	ed83 7b00 	vstr	d7, [r3]
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <count_iter>:
		State_destroy(state);
	}
}

int count = 0;
void count_iter(Object* obj) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	count = count + OBJ2NUM(obj);
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <count_iter+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fcd9 	bl	8000514 <__aeabi_i2d>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b68:	f7ff fb88 	bl	800027c <__adddf3>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4610      	mov	r0, r2
 8000b72:	4619      	mov	r1, r3
 8000b74:	f7ff fd38 	bl	80005e8 <__aeabi_d2iz>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <count_iter+0x38>)
 8000b7c:	6013      	str	r3, [r2, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000094 	.word	0x20000094
 8000b8c:	00000000 	.word	0x00000000

08000b90 <vector_test>:
//void relate_iter
void  vector_test(void *pvParameters) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b092      	sub	sp, #72	; 0x48
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	6078      	str	r0, [r7, #4]

	double heap_size, white_size, ecru_size, grey_size, black_size;

	while (1) {
		State *state = State_new();
 8000b98:	f002 feb6 	bl	8003908 <State_new>
 8000b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
		TmHeap *heap = new_heap(state, 3, 3);
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ba4:	f002 feca 	bl	800393c <new_heap>
 8000ba8:	63b8      	str	r0, [r7, #56]	; 0x38

		Object* vector = Vector_new(heap, 10);
 8000baa:	210a      	movs	r1, #10
 8000bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bae:	f003 f80c 	bl	8003bca <Vector_new>
 8000bb2:	6378      	str	r0, [r7, #52]	; 0x34
		Object_make_root(vector, state);
 8000bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000bb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bb8:	f003 f831 	bl	8003c1e <Object_make_root>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000bbc:	f107 0018 	add.w	r0, r7, #24
 8000bc0:	f107 0220 	add.w	r2, r7, #32
 8000bc4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bd8:	f7ff ff7c 	bl	8000ad4 <test_size>

		gc_vector_push(heap, vector, 1);
 8000bdc:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8000d68 <vector_test+0x1d8>
 8000be0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000be2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000be4:	f002 fec6 	bl	8003974 <gc_vector_push>
		gc_vector_push(heap, vector, 2);
 8000be8:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8000d70 <vector_test+0x1e0>
 8000bec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000bee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bf0:	f002 fec0 	bl	8003974 <gc_vector_push>
		gc_vector_push(heap, vector, 3);
 8000bf4:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8000d78 <vector_test+0x1e8>
 8000bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000bfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bfc:	f002 feba 	bl	8003974 <gc_vector_push>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000c00:	f107 0018 	add.w	r0, r7, #24
 8000c04:	f107 0220 	add.w	r2, r7, #32
 8000c08:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	4603      	mov	r3, r0
 8000c1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c1c:	f7ff ff5a 	bl	8000ad4 <test_size>

		count = 0;
 8000c20:	4b59      	ldr	r3, [pc, #356]	; (8000d88 <vector_test+0x1f8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
		Vector_each(vector, count_iter);
 8000c26:	4959      	ldr	r1, [pc, #356]	; (8000d8c <vector_test+0x1fc>)
 8000c28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c2a:	f004 fecb 	bl	80059c4 <Vector_each>
		printf("count = %d\r\n", count);
 8000c2e:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <vector_test+0x1f8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4856      	ldr	r0, [pc, #344]	; (8000d90 <vector_test+0x200>)
 8000c36:	f005 ff5d 	bl	8006af4 <iprintf>

		Number_new(heap, 7);
 8000c3a:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8000d80 <vector_test+0x1f0>
 8000c3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c40:	f002 ffae 	bl	8003ba0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000c44:	f107 0018 	add.w	r0, r7, #24
 8000c48:	f107 0220 	add.w	r2, r7, #32
 8000c4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c60:	f7ff ff38 	bl	8000ad4 <test_size>
		Number_new(heap, 7);
 8000c64:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8000d80 <vector_test+0x1f0>
 8000c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c6a:	f002 ff99 	bl	8003ba0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000c6e:	f107 0018 	add.w	r0, r7, #24
 8000c72:	f107 0220 	add.w	r2, r7, #32
 8000c76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	4603      	mov	r3, r0
 8000c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c8a:	f7ff ff23 	bl	8000ad4 <test_size>
		Number_new(heap, 7);
 8000c8e:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8000d80 <vector_test+0x1f0>
 8000c92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c94:	f002 ff84 	bl	8003ba0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000c98:	f107 0018 	add.w	r0, r7, #24
 8000c9c:	f107 0220 	add.w	r2, r7, #32
 8000ca0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000cb4:	f7ff ff0e 	bl	8000ad4 <test_size>

		gc_vector_clear(vector);
 8000cb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cba:	f002 fe88 	bl	80039ce <gc_vector_clear>

		count = 0;
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <vector_test+0x1f8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
		Vector_each(vector, count_iter);
 8000cc4:	4931      	ldr	r1, [pc, #196]	; (8000d8c <vector_test+0x1fc>)
 8000cc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cc8:	f004 fe7c 	bl	80059c4 <Vector_each>
		printf("count = %d\r\n", count);
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <vector_test+0x1f8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482f      	ldr	r0, [pc, #188]	; (8000d90 <vector_test+0x200>)
 8000cd4:	f005 ff0e 	bl	8006af4 <iprintf>

		Number_new(heap, 7);
 8000cd8:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8000d80 <vector_test+0x1f0>
 8000cdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000cde:	f002 ff5f 	bl	8003ba0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000ce2:	f107 0018 	add.w	r0, r7, #24
 8000ce6:	f107 0220 	add.w	r2, r7, #32
 8000cea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000cfe:	f7ff fee9 	bl	8000ad4 <test_size>
		Number_new(heap, 7);
 8000d02:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8000d80 <vector_test+0x1f0>
 8000d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d08:	f002 ff4a 	bl	8003ba0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000d0c:	f107 0018 	add.w	r0, r7, #24
 8000d10:	f107 0220 	add.w	r2, r7, #32
 8000d14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4603      	mov	r3, r0
 8000d26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d28:	f7ff fed4 	bl	8000ad4 <test_size>
		Number_new(heap, 7);
 8000d2c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000d80 <vector_test+0x1f0>
 8000d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d32:	f002 ff35 	bl	8003ba0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000d36:	f107 0018 	add.w	r0, r7, #24
 8000d3a:	f107 0220 	add.w	r2, r7, #32
 8000d3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d52:	f7ff febf 	bl	8000ad4 <test_size>

		TmHeap_destroy(heap);
 8000d56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d58:	f002 fb7c 	bl	8003454 <TmHeap_destroy>
		State_destroy(state);
 8000d5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d5e:	f003 fcbf 	bl	80046e0 <State_destroy>
	while (1) {
 8000d62:	e719      	b.n	8000b98 <vector_test+0x8>
 8000d64:	f3af 8000 	nop.w
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	3ff00000 	.word	0x3ff00000
 8000d70:	00000000 	.word	0x00000000
 8000d74:	40000000 	.word	0x40000000
 8000d78:	00000000 	.word	0x00000000
 8000d7c:	40080000 	.word	0x40080000
 8000d80:	00000000 	.word	0x00000000
 8000d84:	401c0000 	.word	0x401c0000
 8000d88:	20000094 	.word	0x20000094
 8000d8c:	08000b51 	.word	0x08000b51
 8000d90:	08007804 	.word	0x08007804

08000d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da6:	f000 fa11 	bl	80011cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40001400 	.word	0x40001400

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e8a:	f000 faa1 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004c00 	.word	0x40004c00
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	2037      	movs	r0, #55	; 0x37
 8000eba:	f000 fa5f 	bl	800137c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ebe:	2037      	movs	r0, #55	; 0x37
 8000ec0:	f000 fa78 	bl	80013b4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_InitTick+0xa0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <HAL_InitTick+0xa0>)
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_InitTick+0xa0>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f003 0320 	and.w	r3, r3, #32
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee0:	f107 0210 	add.w	r2, r7, #16
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f854 	bl	8001f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ef0:	f001 f82a 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8000ef4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_InitTick+0xa4>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0c9b      	lsrs	r3, r3, #18
 8000f00:	3b01      	subs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_InitTick+0xac>)
 8000f08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f10:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f16:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f26:	f001 f869 	bl	8001ffc <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d104      	bne.n	8000f3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <HAL_InitTick+0xa8>)
 8000f32:	f001 f8bd 	bl	80020b0 <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3730      	adds	r7, #48	; 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	20012e54 	.word	0x20012e54
 8000f50:	40001400 	.word	0x40001400

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <TIM7_IRQHandler+0x10>)
 8000f86:	f001 f903 	bl	8002190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20012e54 	.word	0x20012e54

08000f94 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f9e:	f005 f98b 	bl	80062b8 <__errno>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2216      	movs	r2, #22
 8000fa6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_exit>:

void _exit (int status)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffe7 	bl	8000f94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fc6:	e7fe      	b.n	8000fc6 <_exit+0x12>

08000fc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e00a      	b.n	8000ff0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4601      	mov	r1, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf0      	blt.n	8000fda <_read+0x12>
	}

return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e009      	b.n	8001028 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fc87 	bl	8000930 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf1      	blt.n	8001014 <_write+0x12>
	}
	return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_close>:

int _close(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001062:	605a      	str	r2, [r3, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_isatty>:

int _isatty(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f005 f8f0 	bl	80062b8 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20020000 	.word	0x20020000
 8001104:	00000400 	.word	0x00000400
 8001108:	20000098 	.word	0x20000098
 800110c:	20012ef0 	.word	0x20012ef0

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800115e:	f7ff ffd7 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f005 f8d5 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fbf5 	bl	8000954 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001178:	080082dc 	.word	0x080082dc
  ldr r2, =_sbss
 800117c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001180:	20012ef0 	.word	0x20012ef0

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f8d8 	bl	8001366 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fe74 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fe02 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20012e9c 	.word	0x20012e9c

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20012e9c 	.word	0x20012e9c

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
         );
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff4c 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138e:	f7ff ff61 	bl	8001254 <__NVIC_GetPriorityGrouping>
 8001392:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	6978      	ldr	r0, [r7, #20]
 800139a:	f7ff ffb1 	bl	8001300 <NVIC_EncodePriority>
 800139e:	4602      	mov	r2, r0
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff80 	bl	80012ac <__NVIC_SetPriority>
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff54 	bl	8001270 <__NVIC_EnableIRQ>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e16b      	b.n	80016c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 815a 	bne.w	80016be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	2b02      	cmp	r3, #2
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b03      	cmp	r3, #3
 800148e:	d017      	beq.n	80014c0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d123      	bne.n	8001514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0203 	and.w	r2, r3, #3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80b4 	beq.w	80016be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b60      	ldr	r3, [pc, #384]	; (80016dc <HAL_GPIO_Init+0x30c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_GPIO_Init+0x30c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <HAL_GPIO_Init+0x30c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a5b      	ldr	r2, [pc, #364]	; (80016e0 <HAL_GPIO_Init+0x310>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_GPIO_Init+0x314>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d02b      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a51      	ldr	r2, [pc, #324]	; (80016e8 <HAL_GPIO_Init+0x318>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_GPIO_Init+0x222>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a50      	ldr	r2, [pc, #320]	; (80016ec <HAL_GPIO_Init+0x31c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01f      	beq.n	80015ee <HAL_GPIO_Init+0x21e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4f      	ldr	r2, [pc, #316]	; (80016f0 <HAL_GPIO_Init+0x320>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x21a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4e      	ldr	r2, [pc, #312]	; (80016f4 <HAL_GPIO_Init+0x324>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x216>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4d      	ldr	r2, [pc, #308]	; (80016f8 <HAL_GPIO_Init+0x328>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x212>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_GPIO_Init+0x32c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x20e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <HAL_GPIO_Init+0x330>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x20a>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e00e      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015da:	2308      	movs	r3, #8
 80015dc:	e00c      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015de:	2306      	movs	r3, #6
 80015e0:	e00a      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e008      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x228>
 80015f6:	2300      	movs	r3, #0
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x310>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <HAL_GPIO_Init+0x334>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800163a:	4a32      	ldr	r2, [pc, #200]	; (8001704 <HAL_GPIO_Init+0x334>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_GPIO_Init+0x334>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001664:	4a27      	ldr	r2, [pc, #156]	; (8001704 <HAL_GPIO_Init+0x334>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_GPIO_Init+0x334>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_GPIO_Init+0x334>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_GPIO_Init+0x334>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <HAL_GPIO_Init+0x334>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	f67f ae90 	bls.w	80013ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40021400 	.word	0x40021400
 80016fc:	40021800 	.word	0x40021800
 8001700:	40021c00 	.word	0x40021c00
 8001704:	40013c00 	.word	0x40013c00

08001708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e264      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001726:	4ba3      	ldr	r3, [pc, #652]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4ba0      	ldr	r3, [pc, #640]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	2b08      	cmp	r3, #8
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b99      	ldr	r3, [pc, #612]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x108>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e23f      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x74>
 800176e:	4b91      	ldr	r3, [pc, #580]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a90      	ldr	r2, [pc, #576]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a8a      	ldr	r2, [pc, #552]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a87      	ldr	r2, [pc, #540]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xb0>
 80017a0:	4b84      	ldr	r3, [pc, #528]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a83      	ldr	r2, [pc, #524]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a80      	ldr	r2, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fd18 	bl	80011f4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fd14 	bl	80011f4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e204      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xc0>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fd04 	bl	80011f4 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fd00 	bl	80011f4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1f0      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0xe8>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181e:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001832:	2b08      	cmp	r3, #8
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x152>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1c4      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4952      	ldr	r1, [pc, #328]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_RCC_OscConfig+0x2b0>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fcb9 	bl	80011f4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fcb5 	bl	80011f4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1a5      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4940      	ldr	r1, [pc, #256]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <HAL_RCC_OscConfig+0x2b0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc98 	bl	80011f4 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fc94 	bl	80011f4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e184      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d030      	beq.n	8001954 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x2b4>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fc78 	bl	80011f4 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc74 	bl	80011f4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e164      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x200>
 8001926:	e015      	b.n	8001954 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_OscConfig+0x2b4>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff fc61 	bl	80011f4 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fc5d 	bl	80011f4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e14d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a0 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_OscConfig+0x2b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d121      	bne.n	80019e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_RCC_OscConfig+0x2b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_RCC_OscConfig+0x2b8>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fc23 	bl	80011f4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e011      	b.n	80019d6 <HAL_RCC_OscConfig+0x2ce>
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	42470000 	.word	0x42470000
 80019bc:	42470e80 	.word	0x42470e80
 80019c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c4:	f7ff fc16 	bl	80011f4 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e106      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_OscConfig+0x4e4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	4a80      	ldr	r2, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
 80019f6:	e01c      	b.n	8001a32 <HAL_RCC_OscConfig+0x32a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_OscConfig+0x32a>
 8001a1a:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a74      	ldr	r2, [pc, #464]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d015      	beq.n	8001a66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fbdb 	bl	80011f4 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff fbd7 	bl	80011f4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0c5      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ee      	beq.n	8001a42 <HAL_RCC_OscConfig+0x33a>
 8001a64:	e014      	b.n	8001a90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7ff fbc5 	bl	80011f4 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fbc1 	bl	80011f4 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0af      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	4b5a      	ldr	r3, [pc, #360]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ee      	bne.n	8001a6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d105      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 809b 	beq.w	8001be2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aac:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d05c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d141      	bne.n	8001b44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x4ec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fb95 	bl	80011f4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff fb91 	bl	80011f4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e081      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	019b      	lsls	r3, r3, #6
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x4ec>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb6a 	bl	80011f4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fb66 	bl	80011f4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e056      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x41c>
 8001b42:	e04e      	b.n	8001be2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x4ec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fb53 	bl	80011f4 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fb4f 	bl	80011f4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e03f      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x44a>
 8001b70:	e037      	b.n	8001be2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e032      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_RCC_OscConfig+0x4e8>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d028      	beq.n	8001bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d121      	bne.n	8001bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d11a      	bne.n	8001bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bae:	4013      	ands	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d111      	bne.n	8001bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470060 	.word	0x42470060

08001bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cc      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90c      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d044      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e067      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4934      	ldr	r1, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa84 	bl	80011f4 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff fa80 	bl	80011f4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d20c      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f880 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08007b84 	.word	0x08007b84
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dca:	2100      	movs	r1, #0
 8001dcc:	6079      	str	r1, [r7, #4]
 8001dce:	2100      	movs	r1, #0
 8001dd0:	60f9      	str	r1, [r7, #12]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dda:	4952      	ldr	r1, [pc, #328]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ddc:	6889      	ldr	r1, [r1, #8]
 8001dde:	f001 010c 	and.w	r1, r1, #12
 8001de2:	2908      	cmp	r1, #8
 8001de4:	d00d      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3e>
 8001de6:	2908      	cmp	r1, #8
 8001de8:	f200 8094 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x150>
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x32>
 8001df0:	2904      	cmp	r1, #4
 8001df2:	d003      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x38>
 8001df4:	e08e      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df6:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8001df8:	60bb      	str	r3, [r7, #8]
       break;
 8001dfa:	e08e      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001dfe:	60bb      	str	r3, [r7, #8]
      break;
 8001e00:	e08b      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e02:	4948      	ldr	r1, [pc, #288]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e04:	6849      	ldr	r1, [r1, #4]
 8001e06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e0a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0c:	4945      	ldr	r1, [pc, #276]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e0e:	6849      	ldr	r1, [r1, #4]
 8001e10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d024      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	4942      	ldr	r1, [pc, #264]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e1a:	6849      	ldr	r1, [r1, #4]
 8001e1c:	0989      	lsrs	r1, r1, #6
 8001e1e:	4608      	mov	r0, r1
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001e28:	f04f 0500 	mov.w	r5, #0
 8001e2c:	ea00 0204 	and.w	r2, r0, r4
 8001e30:	ea01 0305 	and.w	r3, r1, r5
 8001e34:	493d      	ldr	r1, [pc, #244]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e36:	fb01 f003 	mul.w	r0, r1, r3
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	fb01 f102 	mul.w	r1, r1, r2
 8001e40:	1844      	adds	r4, r0, r1
 8001e42:	493a      	ldr	r1, [pc, #232]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8001e44:	fba2 0101 	umull	r0, r1, r2, r1
 8001e48:	1863      	adds	r3, r4, r1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f7fe fbf0 	bl	8000638 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e04a      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	ea02 0400 	and.w	r4, r2, r0
 8001e7a:	ea03 0501 	and.w	r5, r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	014b      	lsls	r3, r1, #5
 8001e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e90:	0142      	lsls	r2, r0, #5
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	1b00      	subs	r0, r0, r4
 8001e98:	eb61 0105 	sbc.w	r1, r1, r5
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	018b      	lsls	r3, r1, #6
 8001ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eaa:	0182      	lsls	r2, r0, #6
 8001eac:	1a12      	subs	r2, r2, r0
 8001eae:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb2:	f04f 0000 	mov.w	r0, #0
 8001eb6:	f04f 0100 	mov.w	r1, #0
 8001eba:	00d9      	lsls	r1, r3, #3
 8001ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ec0:	00d0      	lsls	r0, r2, #3
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	1912      	adds	r2, r2, r4
 8001ec8:	eb45 0303 	adc.w	r3, r5, r3
 8001ecc:	f04f 0000 	mov.w	r0, #0
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	0299      	lsls	r1, r3, #10
 8001ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eda:	0290      	lsls	r0, r2, #10
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f7fe fba4 	bl	8000638 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	60bb      	str	r3, [r7, #8]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f16:	60bb      	str	r3, [r7, #8]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bdb0      	pop	{r4, r5, r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	017d7840 	.word	0x017d7840

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08007b94 	.word	0x08007b94

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffdc 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08007b94 	.word	0x08007b94

08001f98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_RCC_GetClockConfig+0x60>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0207 	and.w	r2, r3, #7
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e041      	b.n	8002092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f839 	bl	800209a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f000 f9d8 	bl	80023f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e04e      	b.n	8002166 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_TIM_Base_Start_IT+0xc4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d022      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d01d      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_TIM_Base_Start_IT+0xc8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_TIM_Base_Start_IT+0xcc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_TIM_Base_Start_IT+0xd0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00e      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_TIM_Base_Start_IT+0xd4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_TIM_Base_Start_IT+0xd8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x80>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_TIM_Base_Start_IT+0xdc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d111      	bne.n	8002154 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b06      	cmp	r3, #6
 8002140:	d010      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002152:	e007      	b.n	8002164 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40010400 	.word	0x40010400
 8002188:	40014000 	.word	0x40014000
 800218c:	40001800 	.word	0x40001800

08002190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0202 	mvn.w	r2, #2
 80021bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8ee 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8e0 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8f1 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d122      	bne.n	8002240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b04      	cmp	r3, #4
 8002206:	d11b      	bne.n	8002240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0204 	mvn.w	r2, #4
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8c4 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8b6 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f8c7 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b08      	cmp	r3, #8
 800224c:	d122      	bne.n	8002294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b08      	cmp	r3, #8
 800225a:	d11b      	bne.n	8002294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0208 	mvn.w	r2, #8
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2204      	movs	r2, #4
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f89a 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f88c 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f89d 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d122      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d11b      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0210 	mvn.w	r2, #16
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2208      	movs	r2, #8
 80022be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f870 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f862 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f873 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10e      	bne.n	8002314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0201 	mvn.w	r2, #1
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fd40 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b80      	cmp	r3, #128	; 0x80
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d107      	bne.n	8002340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f902 	bl	8002544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d10e      	bne.n	800236c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d107      	bne.n	800236c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f838 	bl	80023dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b20      	cmp	r3, #32
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b20      	cmp	r3, #32
 8002386:	d107      	bne.n	8002398 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0220 	mvn.w	r2, #32
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8cc 	bl	8002530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a40      	ldr	r2, [pc, #256]	; (8002504 <TIM_Base_SetConfig+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d00f      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <TIM_Base_SetConfig+0x118>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00b      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3c      	ldr	r2, [pc, #240]	; (800250c <TIM_Base_SetConfig+0x11c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <TIM_Base_SetConfig+0x120>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <TIM_Base_SetConfig+0x124>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d108      	bne.n	8002442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <TIM_Base_SetConfig+0x114>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d027      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <TIM_Base_SetConfig+0x118>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d023      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2b      	ldr	r2, [pc, #172]	; (800250c <TIM_Base_SetConfig+0x11c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <TIM_Base_SetConfig+0x120>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a29      	ldr	r2, [pc, #164]	; (8002514 <TIM_Base_SetConfig+0x124>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d017      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a28      	ldr	r2, [pc, #160]	; (8002518 <TIM_Base_SetConfig+0x128>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <TIM_Base_SetConfig+0x12c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00f      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <TIM_Base_SetConfig+0x130>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a25      	ldr	r2, [pc, #148]	; (8002524 <TIM_Base_SetConfig+0x134>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a24      	ldr	r2, [pc, #144]	; (8002528 <TIM_Base_SetConfig+0x138>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a23      	ldr	r2, [pc, #140]	; (800252c <TIM_Base_SetConfig+0x13c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d108      	bne.n	80024b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <TIM_Base_SetConfig+0x114>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0xf8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <TIM_Base_SetConfig+0x124>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d103      	bne.n	80024f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	615a      	str	r2, [r3, #20]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800
 8002510:	40000c00 	.word	0x40000c00
 8002514:	40010400 	.word	0x40010400
 8002518:	40014000 	.word	0x40014000
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800
 8002524:	40001800 	.word	0x40001800
 8002528:	40001c00 	.word	0x40001c00
 800252c:	40002000 	.word	0x40002000

08002530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e03f      	b.n	80025ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe fc48 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	; 0x24
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800259a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f905 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b08a      	sub	sp, #40	; 0x28
 80025f6:	af02      	add	r7, sp, #8
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	d17c      	bne.n	800270c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_UART_Transmit+0x2c>
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e075      	b.n	800270e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_UART_Transmit+0x3e>
 800262c:	2302      	movs	r3, #2
 800262e:	e06e      	b.n	800270e <HAL_UART_Transmit+0x11c>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2221      	movs	r2, #33	; 0x21
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002646:	f7fe fdd5 	bl	80011f4 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d108      	bne.n	8002674 <HAL_UART_Transmit+0x82>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e003      	b.n	800267c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002684:	e02a      	b.n	80026dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f840 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e036      	b.n	800270e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	3302      	adds	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e007      	b.n	80026ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1cf      	bne.n	8002686 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f810 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e006      	b.n	800270e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002726:	e02c      	b.n	8002782 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d028      	beq.n	8002782 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <UART_WaitOnFlagUntilTimeout+0x30>
 8002736:	f7fe fd5d 	bl	80011f4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	429a      	cmp	r2, r3
 8002744:	d21d      	bcs.n	8002782 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002754:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e00f      	b.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4013      	ands	r3, r2
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	429a      	cmp	r2, r3
 800279e:	d0c3      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b0:	b09f      	sub	sp, #124	; 0x7c
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c2:	68d9      	ldr	r1, [r3, #12]
 80027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	ea40 0301 	orr.w	r3, r0, r1
 80027cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	431a      	orrs	r2, r3
 80027de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027f0:	f021 010c 	bic.w	r1, r1, #12
 80027f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fa:	430b      	orrs	r3, r1
 80027fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	6999      	ldr	r1, [r3, #24]
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	ea40 0301 	orr.w	r3, r0, r1
 8002814:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4bc5      	ldr	r3, [pc, #788]	; (8002b30 <UART_SetConfig+0x384>)
 800281c:	429a      	cmp	r2, r3
 800281e:	d004      	beq.n	800282a <UART_SetConfig+0x7e>
 8002820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4bc3      	ldr	r3, [pc, #780]	; (8002b34 <UART_SetConfig+0x388>)
 8002826:	429a      	cmp	r2, r3
 8002828:	d103      	bne.n	8002832 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800282a:	f7ff fba1 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 800282e:	6778      	str	r0, [r7, #116]	; 0x74
 8002830:	e002      	b.n	8002838 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002832:	f7ff fb89 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002836:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002840:	f040 80b6 	bne.w	80029b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002846:	461c      	mov	r4, r3
 8002848:	f04f 0500 	mov.w	r5, #0
 800284c:	4622      	mov	r2, r4
 800284e:	462b      	mov	r3, r5
 8002850:	1891      	adds	r1, r2, r2
 8002852:	6439      	str	r1, [r7, #64]	; 0x40
 8002854:	415b      	adcs	r3, r3
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800285c:	1912      	adds	r2, r2, r4
 800285e:	eb45 0303 	adc.w	r3, r5, r3
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	00d9      	lsls	r1, r3, #3
 800286c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002870:	00d0      	lsls	r0, r2, #3
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	1911      	adds	r1, r2, r4
 8002878:	6639      	str	r1, [r7, #96]	; 0x60
 800287a:	416b      	adcs	r3, r5
 800287c:	667b      	str	r3, [r7, #100]	; 0x64
 800287e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	1891      	adds	r1, r2, r2
 800288a:	63b9      	str	r1, [r7, #56]	; 0x38
 800288c:	415b      	adcs	r3, r3
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002894:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002898:	f7fd fece 	bl	8000638 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4ba5      	ldr	r3, [pc, #660]	; (8002b38 <UART_SetConfig+0x38c>)
 80028a2:	fba3 2302 	umull	r2, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	011e      	lsls	r6, r3, #4
 80028aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ac:	461c      	mov	r4, r3
 80028ae:	f04f 0500 	mov.w	r5, #0
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	1891      	adds	r1, r2, r2
 80028b8:	6339      	str	r1, [r7, #48]	; 0x30
 80028ba:	415b      	adcs	r3, r3
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
 80028be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028c2:	1912      	adds	r2, r2, r4
 80028c4:	eb45 0303 	adc.w	r3, r5, r3
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	00d9      	lsls	r1, r3, #3
 80028d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d6:	00d0      	lsls	r0, r2, #3
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	1911      	adds	r1, r2, r4
 80028de:	65b9      	str	r1, [r7, #88]	; 0x58
 80028e0:	416b      	adcs	r3, r5
 80028e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	1891      	adds	r1, r2, r2
 80028f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80028f2:	415b      	adcs	r3, r3
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028fe:	f7fd fe9b 	bl	8000638 <__aeabi_uldivmod>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <UART_SetConfig+0x38c>)
 8002908:	fba3 1302 	umull	r1, r3, r3, r2
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	2164      	movs	r1, #100	; 0x64
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	3332      	adds	r3, #50	; 0x32
 800291a:	4a87      	ldr	r2, [pc, #540]	; (8002b38 <UART_SetConfig+0x38c>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002928:	441e      	add	r6, r3
 800292a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800292c:	4618      	mov	r0, r3
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	1894      	adds	r4, r2, r2
 8002938:	623c      	str	r4, [r7, #32]
 800293a:	415b      	adcs	r3, r3
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002942:	1812      	adds	r2, r2, r0
 8002944:	eb41 0303 	adc.w	r3, r1, r3
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	f04f 0500 	mov.w	r5, #0
 8002950:	00dd      	lsls	r5, r3, #3
 8002952:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002956:	00d4      	lsls	r4, r2, #3
 8002958:	4622      	mov	r2, r4
 800295a:	462b      	mov	r3, r5
 800295c:	1814      	adds	r4, r2, r0
 800295e:	653c      	str	r4, [r7, #80]	; 0x50
 8002960:	414b      	adcs	r3, r1
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
 8002964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	461a      	mov	r2, r3
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	1891      	adds	r1, r2, r2
 8002970:	61b9      	str	r1, [r7, #24]
 8002972:	415b      	adcs	r3, r3
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800297e:	f7fd fe5b 	bl	8000638 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4b6c      	ldr	r3, [pc, #432]	; (8002b38 <UART_SetConfig+0x38c>)
 8002988:	fba3 1302 	umull	r1, r3, r3, r2
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	2164      	movs	r1, #100	; 0x64
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	3332      	adds	r3, #50	; 0x32
 800299a:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <UART_SetConfig+0x38c>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	f003 0207 	and.w	r2, r3, #7
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4432      	add	r2, r6
 80029ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029ae:	e0b9      	b.n	8002b24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	461c      	mov	r4, r3
 80029b4:	f04f 0500 	mov.w	r5, #0
 80029b8:	4622      	mov	r2, r4
 80029ba:	462b      	mov	r3, r5
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	6139      	str	r1, [r7, #16]
 80029c0:	415b      	adcs	r3, r3
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029c8:	1912      	adds	r2, r2, r4
 80029ca:	eb45 0303 	adc.w	r3, r5, r3
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	00d9      	lsls	r1, r3, #3
 80029d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029dc:	00d0      	lsls	r0, r2, #3
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	eb12 0804 	adds.w	r8, r2, r4
 80029e6:	eb43 0905 	adc.w	r9, r3, r5
 80029ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	008b      	lsls	r3, r1, #2
 80029fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a02:	0082      	lsls	r2, r0, #2
 8002a04:	4640      	mov	r0, r8
 8002a06:	4649      	mov	r1, r9
 8002a08:	f7fd fe16 	bl	8000638 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <UART_SetConfig+0x38c>)
 8002a12:	fba3 2302 	umull	r2, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	011e      	lsls	r6, r3, #4
 8002a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	1894      	adds	r4, r2, r2
 8002a28:	60bc      	str	r4, [r7, #8]
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a32:	1812      	adds	r2, r2, r0
 8002a34:	eb41 0303 	adc.w	r3, r1, r3
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	f04f 0500 	mov.w	r5, #0
 8002a40:	00dd      	lsls	r5, r3, #3
 8002a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a46:	00d4      	lsls	r4, r2, #3
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	1814      	adds	r4, r2, r0
 8002a4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a50:	414b      	adcs	r3, r1
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	008b      	lsls	r3, r1, #2
 8002a68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a6c:	0082      	lsls	r2, r0, #2
 8002a6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a72:	f7fd fde1 	bl	8000638 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <UART_SetConfig+0x38c>)
 8002a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	2164      	movs	r1, #100	; 0x64
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	3332      	adds	r3, #50	; 0x32
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <UART_SetConfig+0x38c>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a9a:	441e      	add	r6, r3
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	1894      	adds	r4, r2, r2
 8002aaa:	603c      	str	r4, [r7, #0]
 8002aac:	415b      	adcs	r3, r3
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab4:	1812      	adds	r2, r2, r0
 8002ab6:	eb41 0303 	adc.w	r3, r1, r3
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	f04f 0500 	mov.w	r5, #0
 8002ac2:	00dd      	lsls	r5, r3, #3
 8002ac4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ac8:	00d4      	lsls	r4, r2, #3
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	eb12 0a00 	adds.w	sl, r2, r0
 8002ad2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	008b      	lsls	r3, r1, #2
 8002aea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002aee:	0082      	lsls	r2, r0, #2
 8002af0:	4650      	mov	r0, sl
 8002af2:	4659      	mov	r1, fp
 8002af4:	f7fd fda0 	bl	8000638 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <UART_SetConfig+0x38c>)
 8002afe:	fba3 1302 	umull	r1, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2164      	movs	r1, #100	; 0x64
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	; 0x32
 8002b10:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <UART_SetConfig+0x38c>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4432      	add	r2, r6
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	377c      	adds	r7, #124	; 0x7c
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2e:	bf00      	nop
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	51eb851f 	.word	0x51eb851f

08002b3c <Tm_DArray_remove>:
error:
  return NULL;
}

static inline void *Tm_DArray_remove(Tm_DArray *array, int i)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  void *el = array->contents[i];
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  array->contents[i] = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

  return el;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <Tm_DArray_create>:
#include <treadmill/darray.h>
#include <assert.h>

Tm_DArray *Tm_DArray_create(size_t element_size, size_t initial_max)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  Tm_DArray *array = malloc(sizeof(Tm_DArray));
 8002b7a:	2014      	movs	r0, #20
 8002b7c:	f003 fbec 	bl	8006358 <malloc>
 8002b80:	4603      	mov	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
  check_mem(array);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11f      	bne.n	8002bca <Tm_DArray_create+0x5a>
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <Tm_DArray_create+0x130>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68dc      	ldr	r4, [r3, #12]
 8002b90:	f003 fb92 	bl	80062b8 <__errno>
 8002b94:	4603      	mov	r3, r0
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <Tm_DArray_create+0x3e>
 8002b9c:	f003 fb8c 	bl	80062b8 <__errno>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 f9bb 	bl	8006f20 <strerror>
 8002baa:	4603      	mov	r3, r0
 8002bac:	e000      	b.n	8002bb0 <Tm_DArray_create+0x40>
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <Tm_DArray_create+0x134>)
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	4a3c      	ldr	r2, [pc, #240]	; (8002ca8 <Tm_DArray_create+0x138>)
 8002bb6:	493d      	ldr	r1, [pc, #244]	; (8002cac <Tm_DArray_create+0x13c>)
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f003 fb97 	bl	80062ec <fiprintf>
 8002bbe:	f003 fb7b 	bl	80062b8 <__errno>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e05e      	b.n	8002c88 <Tm_DArray_create+0x118>
  array->max = initial_max;
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
  check(array->max > 0, "You must set an initial_max > 0.");
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	dc1f      	bgt.n	8002c18 <Tm_DArray_create+0xa8>
 8002bd8:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <Tm_DArray_create+0x130>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68dc      	ldr	r4, [r3, #12]
 8002bde:	f003 fb6b 	bl	80062b8 <__errno>
 8002be2:	4603      	mov	r3, r0
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <Tm_DArray_create+0x8c>
 8002bea:	f003 fb65 	bl	80062b8 <__errno>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 f994 	bl	8006f20 <strerror>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	e000      	b.n	8002bfe <Tm_DArray_create+0x8e>
 8002bfc:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <Tm_DArray_create+0x134>)
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2309      	movs	r3, #9
 8002c02:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <Tm_DArray_create+0x138>)
 8002c04:	492a      	ldr	r1, [pc, #168]	; (8002cb0 <Tm_DArray_create+0x140>)
 8002c06:	4620      	mov	r0, r4
 8002c08:	f003 fb70 	bl	80062ec <fiprintf>
 8002c0c:	f003 fb54 	bl	80062b8 <__errno>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e037      	b.n	8002c88 <Tm_DArray_create+0x118>

  array->contents = calloc(initial_max, sizeof(void *));
 8002c18:	2104      	movs	r1, #4
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f003 fb44 	bl	80062a8 <calloc>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  check_mem(array->contents);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11f      	bne.n	8002c70 <Tm_DArray_create+0x100>
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <Tm_DArray_create+0x130>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68dc      	ldr	r4, [r3, #12]
 8002c36:	f003 fb3f 	bl	80062b8 <__errno>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <Tm_DArray_create+0xe4>
 8002c42:	f003 fb39 	bl	80062b8 <__errno>
 8002c46:	4603      	mov	r3, r0
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 f968 	bl	8006f20 <strerror>
 8002c50:	4603      	mov	r3, r0
 8002c52:	e000      	b.n	8002c56 <Tm_DArray_create+0xe6>
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <Tm_DArray_create+0x134>)
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	230c      	movs	r3, #12
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <Tm_DArray_create+0x138>)
 8002c5c:	4913      	ldr	r1, [pc, #76]	; (8002cac <Tm_DArray_create+0x13c>)
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f003 fb44 	bl	80062ec <fiprintf>
 8002c64:	f003 fb28 	bl	80062b8 <__errno>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e00b      	b.n	8002c88 <Tm_DArray_create+0x118>

  array->end = 0;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
  array->element_size = element_size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
  array->expand_rate = DEFAULT_EXPAND_RATE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c82:	60da      	str	r2, [r3, #12]

  return array;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	e006      	b.n	8002c96 <Tm_DArray_create+0x126>

error:
  if(array) free(array);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <Tm_DArray_create+0x124>
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f003 fb6a 	bl	8006368 <free>
  return NULL;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000014 	.word	0x20000014
 8002ca4:	0800787c 	.word	0x0800787c
 8002ca8:	08007884 	.word	0x08007884
 8002cac:	0800789c 	.word	0x0800789c
 8002cb0:	080078cc 	.word	0x080078cc

08002cb4 <Tm_DArray_resize>:
    }
  }
}

static inline int Tm_DArray_resize(Tm_DArray *array, size_t newsize)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  array->max = newsize;
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]
  check(array->max > 0, "The newsize must be > 0.");
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	dc1f      	bgt.n	8002d0c <Tm_DArray_resize+0x58>
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <Tm_DArray_resize+0xc8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68dc      	ldr	r4, [r3, #12]
 8002cd2:	f003 faf1 	bl	80062b8 <__errno>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <Tm_DArray_resize+0x3c>
 8002cde:	f003 faeb 	bl	80062b8 <__errno>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 f91a 	bl	8006f20 <strerror>
 8002cec:	4603      	mov	r3, r0
 8002cee:	e000      	b.n	8002cf2 <Tm_DArray_resize+0x3e>
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <Tm_DArray_resize+0xcc>)
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2328      	movs	r3, #40	; 0x28
 8002cf6:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <Tm_DArray_resize+0xd0>)
 8002cf8:	4923      	ldr	r1, [pc, #140]	; (8002d88 <Tm_DArray_resize+0xd4>)
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f003 faf6 	bl	80062ec <fiprintf>
 8002d00:	f003 fada 	bl	80062b8 <__errno>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e031      	b.n	8002d70 <Tm_DArray_resize+0xbc>

  void *contents = realloc(array->contents, array->max * sizeof(void *));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f003 ff03 	bl	8006b24 <realloc>
 8002d1e:	60f8      	str	r0, [r7, #12]
  // check contents and assume realloc doesn't harm the original on error

  check_mem(contents);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11f      	bne.n	8002d66 <Tm_DArray_resize+0xb2>
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <Tm_DArray_resize+0xc8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68dc      	ldr	r4, [r3, #12]
 8002d2c:	f003 fac4 	bl	80062b8 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <Tm_DArray_resize+0x96>
 8002d38:	f003 fabe 	bl	80062b8 <__errno>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 f8ed 	bl	8006f20 <strerror>
 8002d46:	4603      	mov	r3, r0
 8002d48:	e000      	b.n	8002d4c <Tm_DArray_resize+0x98>
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <Tm_DArray_resize+0xcc>)
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	232d      	movs	r3, #45	; 0x2d
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <Tm_DArray_resize+0xd0>)
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <Tm_DArray_resize+0xd8>)
 8002d54:	4620      	mov	r0, r4
 8002d56:	f003 fac9 	bl	80062ec <fiprintf>
 8002d5a:	f003 faad 	bl	80062b8 <__errno>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e004      	b.n	8002d70 <Tm_DArray_resize+0xbc>

  array->contents = contents;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	611a      	str	r2, [r3, #16]

  return 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e001      	b.n	8002d74 <Tm_DArray_resize+0xc0>
error:
  return -1;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}
 8002d7c:	20000014 	.word	0x20000014
 8002d80:	0800787c 	.word	0x0800787c
 8002d84:	08007884 	.word	0x08007884
 8002d88:	0800790c 	.word	0x0800790c
 8002d8c:	0800789c 	.word	0x0800789c

08002d90 <Tm_DArray_expand>:

int Tm_DArray_expand(Tm_DArray *array)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
  size_t old_max = array->max;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
  check(Tm_DArray_resize(array, array->max + array->expand_rate) == 0,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff81 	bl	8002cb4 <Tm_DArray_resize>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d028      	beq.n	8002e0a <Tm_DArray_expand+0x7a>
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <Tm_DArray_expand+0x9c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68dc      	ldr	r4, [r3, #12]
 8002dbe:	f003 fa7b 	bl	80062b8 <__errno>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <Tm_DArray_expand+0x4c>
 8002dca:	f003 fa75 	bl	80062b8 <__errno>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 f8a4 	bl	8006f20 <strerror>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	e000      	b.n	8002dde <Tm_DArray_expand+0x4e>
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <Tm_DArray_expand+0xa0>)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6852      	ldr	r2, [r2, #4]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68c9      	ldr	r1, [r1, #12]
 8002de6:	440a      	add	r2, r1
 8002de8:	9201      	str	r2, [sp, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2339      	movs	r3, #57	; 0x39
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <Tm_DArray_expand+0xa4>)
 8002df0:	4911      	ldr	r1, [pc, #68]	; (8002e38 <Tm_DArray_expand+0xa8>)
 8002df2:	4620      	mov	r0, r4
 8002df4:	f003 fa7a 	bl	80062ec <fiprintf>
 8002df8:	f003 fa5e 	bl	80062b8 <__errno>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	bf00      	nop

  memset(array->contents + old_max, 0, array->expand_rate + 1);
  return 0;

error:
  return -1;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	e00c      	b.n	8002e24 <Tm_DArray_expand+0x94>
  memset(array->contents + old_max, 0, array->expand_rate + 1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	18d0      	adds	r0, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	f003 fab9 	bl	8006394 <memset>
  return 0;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	20000014 	.word	0x20000014
 8002e30:	0800787c 	.word	0x0800787c
 8002e34:	08007884 	.word	0x08007884
 8002e38:	08007944 	.word	0x08007944

08002e3c <Tm_DArray_contract>:

int Tm_DArray_contract(Tm_DArray *array)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  int new_size = array->end < (int)array->expand_rate ? (int)array->expand_rate : array->end;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68d2      	ldr	r2, [r2, #12]
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	bfb8      	it	lt
 8002e50:	4613      	movlt	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  return Tm_DArray_resize(array, new_size + 1);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff2a 	bl	8002cb4 <Tm_DArray_resize>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <Tm_DArray_destroy>:

void Tm_DArray_destroy(Tm_DArray *array)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  if(array) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <Tm_DArray_destroy+0x26>
    if(array->contents) free(array->contents);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <Tm_DArray_destroy+0x20>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fa6f 	bl	8006368 <free>
    free(array);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f003 fa6c 	bl	8006368 <free>
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <Tm_DArray_push>:
  Tm_DArray_clear(array);
  Tm_DArray_destroy(array);
}

int Tm_DArray_push(Tm_DArray *array, void *el)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  array->contents[array->end] = el;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	601a      	str	r2, [r3, #0]
  array->end++;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	601a      	str	r2, [r3, #0]

  if(Tm_DArray_end(array) >= Tm_DArray_max(array)) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	db04      	blt.n	8002ed2 <Tm_DArray_push+0x3a>
    return Tm_DArray_expand(array);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff61 	bl	8002d90 <Tm_DArray_expand>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	e000      	b.n	8002ed4 <Tm_DArray_push+0x3c>
  } else {
    return 0;
 8002ed2:	2300      	movs	r3, #0
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <Tm_DArray_pop>:

void *Tm_DArray_pop(Tm_DArray *array)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
  check(array->end - 1 >= 0, "Attempt to pop from empty array.");
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dc21      	bgt.n	8002f30 <Tm_DArray_pop+0x54>
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <Tm_DArray_pop+0xa4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68dc      	ldr	r4, [r3, #12]
 8002ef2:	f003 f9e1 	bl	80062b8 <__errno>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <Tm_DArray_pop+0x34>
 8002efe:	f003 f9db 	bl	80062b8 <__errno>
 8002f02:	4603      	mov	r3, r0
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 f80a 	bl	8006f20 <strerror>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	e000      	b.n	8002f12 <Tm_DArray_pop+0x36>
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <Tm_DArray_pop+0xa8>)
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2367      	movs	r3, #103	; 0x67
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <Tm_DArray_pop+0xac>)
 8002f18:	491c      	ldr	r1, [pc, #112]	; (8002f8c <Tm_DArray_pop+0xb0>)
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f003 f9e6 	bl	80062ec <fiprintf>
 8002f20:	f003 f9ca 	bl	80062b8 <__errno>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	bf00      	nop
    Tm_DArray_contract(array);
  }

  return el;
error:
  return NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e022      	b.n	8002f76 <Tm_DArray_pop+0x9a>
  void *el = Tm_DArray_remove(array, array->end - 1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff fdff 	bl	8002b3c <Tm_DArray_remove>
 8002f3e:	60f8      	str	r0, [r7, #12]
  array->end--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
  if (Tm_DArray_end(array) > (int)array->expand_rate && Tm_DArray_end(array) % array->expand_rate) {
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68d2      	ldr	r2, [r2, #12]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	dd0e      	ble.n	8002f74 <Tm_DArray_pop+0x98>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f64:	fb03 f301 	mul.w	r3, r3, r1
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <Tm_DArray_pop+0x98>
    Tm_DArray_contract(array);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff64 	bl	8002e3c <Tm_DArray_contract>
  return el;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000014 	.word	0x20000014
 8002f84:	0800787c 	.word	0x0800787c
 8002f88:	08007884 	.word	0x08007884
 8002f8c:	08007988 	.word	0x08007988

08002f90 <unsnap>:
/*
 * -(bottom)- ECRU -(top)- GREY -(scan)- BLACK -(free)- WHITE ...
 */

static inline void
unsnap(TmHeap *heap, TmCell* self) {
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  TmCell *my_prev = self->prev;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]
  TmCell *my_next = self->next;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60bb      	str	r3, [r7, #8]
  self->next = NULL;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
  self->prev = NULL;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	605a      	str	r2, [r3, #4]

  if(BOTTOM == self) BOTTOM = my_next;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d102      	bne.n	8002fc2 <unsnap+0x32>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	601a      	str	r2, [r3, #0]
  if(TOP    == self) TOP    = my_next;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d102      	bne.n	8002fd2 <unsnap+0x42>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	605a      	str	r2, [r3, #4]
  if(SCAN   == self) SCAN   = my_next;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d102      	bne.n	8002fe2 <unsnap+0x52>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
  if(FREE   == self) FREE   = my_next;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d102      	bne.n	8002ff2 <unsnap+0x62>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	609a      	str	r2, [r3, #8]

  my_prev->next = my_next;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	601a      	str	r2, [r3, #0]
  my_next->prev = my_prev;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <insert_in>:

static inline void
insert_in(TmHeap *heap, TmCell* self, TmCell* him) {
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
  if(self == him) return; // we do nothing
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d033      	beq.n	8003086 <insert_in+0x7c>

  unsnap(heap, self);
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ffb5 	bl	8002f90 <unsnap>

  TmCell *his_prev = him->prev;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	617b      	str	r3, [r7, #20]

  his_prev->next = self;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	601a      	str	r2, [r3, #0]
  him->prev      = self;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	605a      	str	r2, [r3, #4]

  self->prev  = his_prev;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	605a      	str	r2, [r3, #4]
  self->next  = him;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	601a      	str	r2, [r3, #0]

  if(him == TOP)    TOP = self;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d102      	bne.n	8003054 <insert_in+0x4a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	605a      	str	r2, [r3, #4]
  if(him == BOTTOM) BOTTOM = self;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	429a      	cmp	r2, r3
 800305c:	d102      	bne.n	8003064 <insert_in+0x5a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	601a      	str	r2, [r3, #0]
  if(him == SCAN)   SCAN = self;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d102      	bne.n	8003074 <insert_in+0x6a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	60da      	str	r2, [r3, #12]
  if(him == FREE)   FREE = self;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d104      	bne.n	8003088 <insert_in+0x7e>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e000      	b.n	8003088 <insert_in+0x7e>
  if(self == him) return; // we do nothing
 8003086:	bf00      	nop
}
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <make_ecru>:

static inline void
make_ecru(TmHeap *heap, TmCell *self)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  if(self == BOTTOM) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11b      	bne.n	80030da <make_ecru+0x4c>
    if (self == TOP)  TOP  = self->next;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d103      	bne.n	80030b4 <make_ecru+0x26>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]
    if (self == SCAN) SCAN = self->next;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <make_ecru+0x38>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]
    if (self == FREE) FREE = self->next;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10b      	bne.n	80030e8 <make_ecru+0x5a>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e006      	b.n	80030e8 <make_ecru+0x5a>
  } else {
    insert_in(heap, self, BOTTOM);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff91 	bl	800300a <insert_in>
  }
  self->ecru = 1;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	731a      	strb	r2, [r3, #12]
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <make_grey>:

static inline void
make_grey(TmHeap *heap, TmCell *self)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  insert_in(heap, self, TOP);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	461a      	mov	r2, r3
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff7e 	bl	800300a <insert_in>
  self->ecru = 0;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	731a      	strb	r2, [r3, #12]

  if (self == SCAN) {
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d103      	bne.n	8003126 <make_grey+0x30>
    SCAN = self->next;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
  }
  if (self == FREE) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d103      	bne.n	8003138 <make_grey+0x42>
    FREE = self->next;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	609a      	str	r2, [r3, #8]
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <TmHeap_new>:
  int growth_rate,
  int scan_every,
  size_t object_size,
  TmReleaseFn release_fn,
  TmScanPointersFn scan_pointers_fn)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  TmHeap *heap = calloc(1, sizeof(TmHeap));
 800314e:	2130      	movs	r1, #48	; 0x30
 8003150:	2001      	movs	r0, #1
 8003152:	f003 f8a9 	bl	80062a8 <calloc>
 8003156:	4603      	mov	r3, r0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24

  heap->state  = state;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
  heap->chunks = Tm_DArray_create(sizeof(TmCell*), 100);
 8003160:	2164      	movs	r1, #100	; 0x64
 8003162:	2004      	movs	r0, #4
 8003164:	f7ff fd04 	bl	8002b70 <Tm_DArray_create>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c

  TmChunk chunk = TmChunk_new(size + 1);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f9c1 	bl	8003500 <TmChunk_new>
  TmCell *head = chunk.head;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	623b      	str	r3, [r7, #32]
  TmCell *tail = chunk.tail;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	61fb      	str	r3, [r7, #28]

  // Save a reference to the chunk to deallocate it later
  Tm_DArray_push(heap->chunks, head);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	6a39      	ldr	r1, [r7, #32]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fe83 	bl	8002e98 <Tm_DArray_push>

  heap->growth_rate   = growth_rate;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	611a      	str	r2, [r3, #16]
  heap->release       = release_fn;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319c:	621a      	str	r2, [r3, #32]
  heap->scan_pointers = scan_pointers_fn;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24
  heap->object_size   = object_size;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a8:	61da      	str	r2, [r3, #28]
  heap->allocs        = 0;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
  heap->scan_every    = scan_every;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	619a      	str	r2, [r3, #24]

  FREE   = head;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	609a      	str	r2, [r3, #8]
  BOTTOM = head;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	6a3a      	ldr	r2, [r7, #32]
 80031c0:	601a      	str	r2, [r3, #0]
  TOP    = head;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	605a      	str	r2, [r3, #4]
  SCAN   = head;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	6a3a      	ldr	r2, [r7, #32]
 80031cc:	60da      	str	r2, [r3, #12]

  // Close the circle.
  tail->next = head;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	601a      	str	r2, [r3, #0]
  head->prev = tail;
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	605a      	str	r2, [r3, #4]

  return heap;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <TmHeap_grow>:
  printf("[END HEAP]\n");
}

void
TmHeap_grow(TmHeap *heap, int size)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  if(size < 1) return;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	dd40      	ble.n	8003276 <TmHeap_grow+0x92>

  TmChunk chunk = TmChunk_new(size);
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	6839      	ldr	r1, [r7, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f980 	bl	8003500 <TmChunk_new>
  TmCell *head = chunk.head;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	61fb      	str	r3, [r7, #28]
  TmCell *tail = chunk.tail;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	61bb      	str	r3, [r7, #24]

  // Save a reference to the chunk to deallocate it later
  Tm_DArray_push(heap->chunks, head);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	69f9      	ldr	r1, [r7, #28]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fe42 	bl	8002e98 <Tm_DArray_push>

  // Put the new chunk before the current free.
  TmCell *oldfree  = FREE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	617b      	str	r3, [r7, #20]
  TmCell *previous = oldfree->prev;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	613b      	str	r3, [r7, #16]

  // Attach tail
  oldfree->prev = tail;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	605a      	str	r2, [r3, #4]
  tail->next    = oldfree;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	601a      	str	r2, [r3, #0]

  // Attach head
  previous->next = head;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	601a      	str	r2, [r3, #0]
  head->prev     = previous;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	605a      	str	r2, [r3, #4]

  if(BOTTOM == FREE) BOTTOM = head;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d102      	bne.n	800324a <TmHeap_grow+0x66>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	601a      	str	r2, [r3, #0]
  if(TOP    == FREE) TOP = head;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d102      	bne.n	800325c <TmHeap_grow+0x78>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	605a      	str	r2, [r3, #4]
  if(SCAN   == FREE) SCAN = head;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	d102      	bne.n	800326e <TmHeap_grow+0x8a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	60da      	str	r2, [r3, #12]
  FREE = head;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e000      	b.n	8003278 <TmHeap_grow+0x94>
  if(size < 1) return;
 8003276:	bf00      	nop
}
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <TmHeap_distance_between>:

static inline int
TmHeap_distance_between(TmCell *a, TmCell *b)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  int count = 1;
 8003288:	2301      	movs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
  TmCell *ptr = a;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60bb      	str	r3, [r7, #8]
  while((ptr = ptr->next) && ptr != b) count++;
 8003290:	e002      	b.n	8003298 <TmHeap_distance_between+0x1a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <TmHeap_distance_between+0x2e>
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1f2      	bne.n	8003292 <TmHeap_distance_between+0x14>

  return count;
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <TmHeap_size>:


double
TmHeap_size(TmHeap *heap)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return TmHeap_distance_between(TOP, TOP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f7ff ffd6 	bl	800327e <TmHeap_distance_between>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f91d 	bl	8000514 <__aeabi_i2d>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	ec43 2b17 	vmov	d7, r2, r3
}
 80032e2:	eeb0 0a47 	vmov.f32	s0, s14
 80032e6:	eef0 0a67 	vmov.f32	s1, s15
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <TmHeap_white_size>:

double
TmHeap_white_size(TmHeap *heap)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(FREE == BOTTOM &&
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d111      	bne.n	8003328 <TmHeap_white_size+0x38>
     FREE == TOP &&
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
  if(FREE == BOTTOM &&
 800330c:	429a      	cmp	r2, r3
 800330e:	d10b      	bne.n	8003328 <TmHeap_white_size+0x38>
     FREE == SCAN) {
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
     FREE == TOP &&
 8003318:	429a      	cmp	r2, r3
 800331a:	d105      	bne.n	8003328 <TmHeap_white_size+0x38>
    return TmHeap_size(heap);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffcc 	bl	80032ba <TmHeap_size>
 8003322:	ec53 2b10 	vmov	r2, r3, d0
 8003326:	e00d      	b.n	8003344 <TmHeap_white_size+0x54>
  }

  return TmHeap_distance_between(FREE, BOTTOM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7ff ffa3 	bl	800327e <TmHeap_distance_between>
 8003338:	4603      	mov	r3, r0
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f8ea 	bl	8000514 <__aeabi_i2d>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	ec43 2b17 	vmov	d7, r2, r3
}
 8003348:	eeb0 0a47 	vmov.f32	s0, s14
 800334c:	eef0 0a67 	vmov.f32	s1, s15
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <TmHeap_ecru_size>:

double
TmHeap_ecru_size(TmHeap *heap)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  if(BOTTOM == TOP) return 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d104      	bne.n	8003374 <TmHeap_ecru_size+0x1e>
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e00d      	b.n	8003390 <TmHeap_ecru_size+0x3a>
  return TmHeap_distance_between(BOTTOM, TOP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f7ff ff7d 	bl	800327e <TmHeap_distance_between>
 8003384:	4603      	mov	r3, r0
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8c4 	bl	8000514 <__aeabi_i2d>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	ec43 2b17 	vmov	d7, r2, r3
}
 8003394:	eeb0 0a47 	vmov.f32	s0, s14
 8003398:	eef0 0a67 	vmov.f32	s1, s15
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <TmHeap_grey_size>:

double
TmHeap_grey_size(TmHeap *heap)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  if(TOP == SCAN) return 0;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d104      	bne.n	80033c0 <TmHeap_grey_size+0x1e>
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e00d      	b.n	80033dc <TmHeap_grey_size+0x3a>
  return TmHeap_distance_between(TOP, SCAN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7ff ff57 	bl	800327e <TmHeap_distance_between>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f89e 	bl	8000514 <__aeabi_i2d>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80033e0:	eeb0 0a47 	vmov.f32	s0, s14
 80033e4:	eef0 0a67 	vmov.f32	s1, s15
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <TmHeap_black_size>:

double
TmHeap_black_size(TmHeap *heap)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  if(SCAN == FREE) return 0;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d104      	bne.n	800340c <TmHeap_black_size+0x1e>
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e00d      	b.n	8003428 <TmHeap_black_size+0x3a>
  return TmHeap_distance_between(SCAN, FREE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7ff ff31 	bl	800327e <TmHeap_distance_between>
 800341c:	4603      	mov	r3, r0
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f878 	bl	8000514 <__aeabi_i2d>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	ec43 2b17 	vmov	d7, r2, r3
}
 800342c:	eeb0 0a47 	vmov.f32	s0, s14
 8003430:	eef0 0a67 	vmov.f32	s1, s15
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <null_rootset>:

static inline Tm_DArray*
null_rootset(TmStateHeader *state)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  return Tm_DArray_create(sizeof(TmObjectHeader*), 1);
 8003442:	2101      	movs	r1, #1
 8003444:	2004      	movs	r0, #4
 8003446:	f7ff fb93 	bl	8002b70 <Tm_DArray_create>
 800344a:	4603      	mov	r3, r0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <TmHeap_destroy>:

void
TmHeap_destroy(TmHeap* heap)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  debug("[GC] Destroying the heap");
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <TmHeap_destroy+0x9c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68d8      	ldr	r0, [r3, #12]
 8003462:	23f2      	movs	r3, #242	; 0xf2
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <TmHeap_destroy+0xa0>)
 8003466:	4924      	ldr	r1, [pc, #144]	; (80034f8 <TmHeap_destroy+0xa4>)
 8003468:	f002 ff40 	bl	80062ec <fiprintf>

  // Ignore the rootset and flip twice to clean up
  heap->state->rootset_fn = null_rootset;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	4a22      	ldr	r2, [pc, #136]	; (80034fc <TmHeap_destroy+0xa8>)
 8003472:	601a      	str	r2, [r3, #0]
  Tm_flip(heap);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8d3 	bl	8003620 <Tm_flip>
  Tm_flip(heap);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8d0 	bl	8003620 <Tm_flip>

  TmCell *ptr = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  // free Objects
  ITERATE(BOTTOM, FREE, ptr) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e008      	b.n	800349e <TmHeap_destroy+0x4a>
    // RELEASE() will free a Object
	RELEASE(ptr->value);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	6892      	ldr	r2, [r2, #8]
 8003494:	4610      	mov	r0, r2
 8003496:	4798      	blx	r3
    ptr = ptr->next;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	617b      	str	r3, [r7, #20]
  ITERATE(BOTTOM, FREE, ptr) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1f1      	bne.n	800348c <TmHeap_destroy+0x38>
  }

  for(int i=0; i < Tm_DArray_count(heap->chunks); i++) {
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	e00d      	b.n	80034ca <TmHeap_destroy+0x76>
    TmCell *chunk = (TmCell*)Tm_DArray_at(heap->chunks, i);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
    free(chunk);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f002 ff52 	bl	8006368 <free>
  for(int i=0; i < Tm_DArray_count(heap->chunks); i++) {
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	3301      	adds	r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	dbeb      	blt.n	80034ae <TmHeap_destroy+0x5a>
  }

  Tm_DArray_destroy(heap->chunks);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fcc5 	bl	8002e6a <Tm_DArray_destroy>

  free(heap);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f002 ff41 	bl	8006368 <free>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000014 	.word	0x20000014
 80034f4:	08007a74 	.word	0x08007a74
 80034f8:	08007a88 	.word	0x08007a88
 80034fc:	0800343b 	.word	0x0800343b

08003500 <TmChunk_new>:

TmChunk
TmChunk_new(int size)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  TmCell *memory = calloc(size, sizeof(TmCell));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2110      	movs	r1, #16
 800350e:	4618      	mov	r0, r3
 8003510:	f002 feca 	bl	80062a8 <calloc>
 8003514:	4603      	mov	r3, r0
 8003516:	61fb      	str	r3, [r7, #28]
  TmCell *ptr    = memory;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24

  for(int i=0; i < size; i++) {
 800351c:	2300      	movs	r3, #0
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	e01c      	b.n	800355c <TmChunk_new+0x5c>
    if(i>0) {
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	2b00      	cmp	r3, #0
 8003526:	dd07      	ble.n	8003538 <TmChunk_new+0x38>
      TmCell *prev = ptr; prev--;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b10      	subs	r3, #16
 8003530:	617b      	str	r3, [r7, #20]
      ptr->prev = prev;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	605a      	str	r2, [r3, #4]
    }
    if(i<size) {
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	da07      	bge.n	8003550 <TmChunk_new+0x50>
      TmCell *next = ptr; next++;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3310      	adds	r3, #16
 8003548:	613b      	str	r3, [r7, #16]
      ptr->next = next;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	601a      	str	r2, [r3, #0]
    }
    ptr++;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	3310      	adds	r3, #16
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
  for(int i=0; i < size; i++) {
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	3301      	adds	r3, #1
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	dbde      	blt.n	8003522 <TmChunk_new+0x22>
  }

  TmCell *tail = --ptr;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	3b10      	subs	r3, #16
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	61bb      	str	r3, [r7, #24]

  memory->prev = NULL;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
  tail->next   = NULL;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

  TmChunk chunk = { .head = memory, .tail = tail };
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60fb      	str	r3, [r7, #12]
  return chunk;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	461a      	mov	r2, r3
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800358e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	3728      	adds	r7, #40	; 0x28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <make_grey_if_ecru>:

static inline void
make_grey_if_ecru(TmHeap *heap, TmObjectHeader *o)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  TmCell *cell = o->cell;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
  if(cell->ecru) {
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	7b1b      	ldrb	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <make_grey_if_ecru+0x20>
    // Unsnap the cell from the ecru area,
    // and put it in the gray area.
    make_grey(heap, cell);
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fd9e 	bl	80030f6 <make_grey>
  }
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <Tm_scan>:

void
Tm_scan(TmHeap *heap)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  debug("[GC] Scan");
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <Tm_scan+0x4c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68d8      	ldr	r0, [r3, #12]
 80035d2:	f240 1335 	movw	r3, #309	; 0x135
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <Tm_scan+0x50>)
 80035d8:	490f      	ldr	r1, [pc, #60]	; (8003618 <Tm_scan+0x54>)
 80035da:	f002 fe87 	bl	80062ec <fiprintf>
  // If scan == top, the collection has finished
  if(SCAN == TOP) return;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d00d      	beq.n	8003606 <Tm_scan+0x42>

  // Move the scan pointer backwards, converting the scanned grey cell into a
  // black cell.
  SCAN = SCAN->prev;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
  heap->scan_pointers(heap, SCAN->value, make_grey_if_ecru);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68d2      	ldr	r2, [r2, #12]
 80035fc:	6891      	ldr	r1, [r2, #8]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <Tm_scan+0x58>)
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e000      	b.n	8003608 <Tm_scan+0x44>
  if(SCAN == TOP) return;
 8003606:	bf00      	nop
}
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000014 	.word	0x20000014
 8003614:	08007a74 	.word	0x08007a74
 8003618:	08007ab0 	.word	0x08007ab0
 800361c:	0800359b 	.word	0x0800359b

08003620 <Tm_flip>:

void
Tm_flip(TmHeap *heap)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
  debug("[GC] Flip");
 8003628:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <Tm_flip+0x100>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68d8      	ldr	r0, [r3, #12]
 800362e:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8003632:	4a3c      	ldr	r2, [pc, #240]	; (8003724 <Tm_flip+0x104>)
 8003634:	493c      	ldr	r1, [pc, #240]	; (8003728 <Tm_flip+0x108>)
 8003636:	f002 fe59 	bl	80062ec <fiprintf>
  // Scan all the grey cells before flipping.
  while(SCAN != TOP) Tm_scan(heap);
 800363a:	e002      	b.n	8003642 <Tm_flip+0x22>
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ffc1 	bl	80035c4 <Tm_scan>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	429a      	cmp	r2, r3
 800364c:	d1f6      	bne.n	800363c <Tm_flip+0x1c>

  TmCell *ptr = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

  // Make all the ecru into white and release them
  ITERATE(BOTTOM, TOP, ptr) {
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	e00b      	b.n	8003672 <Tm_flip+0x52>
    ptr->ecru = 0;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2200      	movs	r2, #0
 800365e:	731a      	strb	r2, [r3, #12]
    RELEASE(ptr->value);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	4610      	mov	r0, r2
 800366a:	4798      	blx	r3
    ptr = ptr->next;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  ITERATE(BOTTOM, TOP, ptr) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	429a      	cmp	r2, r3
 800367a:	d1ee      	bne.n	800365a <Tm_flip+0x3a>
  }
  BOTTOM = TOP;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]

  TmHeap_grow(heap, heap->growth_rate);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fdaa 	bl	80031e4 <TmHeap_grow>

  // Make all black into ecru.
  ITERATE(SCAN, FREE, ptr) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	e008      	b.n	80036aa <Tm_flip+0x8a>
    TmCell *next = ptr->next;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
    make_ecru(heap, ptr);
 800369e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fcf4 	bl	800308e <make_ecru>
    ptr = next;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
  ITERATE(SCAN, FREE, ptr) {
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1f1      	bne.n	8003698 <Tm_flip+0x78>
  }

  // Add all the rootset into the grey set.
  Tm_DArray *rootset = heap->state->rootset_fn(heap->state);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036be:	4610      	mov	r0, r2
 80036c0:	4798      	blx	r3
 80036c2:	61f8      	str	r0, [r7, #28]

  int count = Tm_DArray_count(rootset);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
  debug("[GC] Adding rootset (%i)", count);
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <Tm_flip+0x100>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68d8      	ldr	r0, [r3, #12]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f240 135d 	movw	r3, #349	; 0x15d
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <Tm_flip+0x104>)
 80036da:	4914      	ldr	r1, [pc, #80]	; (800372c <Tm_flip+0x10c>)
 80036dc:	f002 fe06 	bl	80062ec <fiprintf>
  for(int i=0; i < count; i++) {
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	e010      	b.n	8003708 <Tm_flip+0xe8>
    TmObjectHeader *o = (TmObjectHeader*)(Tm_DArray_at(rootset, i));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	617b      	str	r3, [r7, #20]
    TmCell *cell = o->cell;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	613b      	str	r3, [r7, #16]
    make_grey(heap, cell);
 80036fa:	6939      	ldr	r1, [r7, #16]
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fcfa 	bl	80030f6 <make_grey>
  for(int i=0; i < count; i++) {
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	3301      	adds	r3, #1
 8003706:	623b      	str	r3, [r7, #32]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	dbea      	blt.n	80036e6 <Tm_flip+0xc6>
  }

  Tm_DArray_destroy(rootset);
 8003710:	69f8      	ldr	r0, [r7, #28]
 8003712:	f7ff fbaa 	bl	8002e6a <Tm_DArray_destroy>
}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000014 	.word	0x20000014
 8003724:	08007a74 	.word	0x08007a74
 8003728:	08007acc 	.word	0x08007acc
 800372c:	08007ae8 	.word	0x08007ae8

08003730 <Tm_allocate>:

TmObjectHeader*
Tm_allocate(TmHeap *heap)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b087      	sub	sp, #28
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  if(heap->allocs >= heap->scan_every) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	429a      	cmp	r2, r3
 8003742:	db05      	blt.n	8003750 <Tm_allocate+0x20>
    heap->allocs = 0;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	615a      	str	r2, [r3, #20]
    Tm_scan(heap);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff3a 	bl	80035c4 <Tm_scan>

  /*
   * If there are no slots in the white list,
   * force a collection.
   */
  if(FREE->next == BOTTOM) {
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d129      	bne.n	80037b2 <Tm_allocate+0x82>
    Tm_flip(heap);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff5e 	bl	8003620 <Tm_flip>
    check(FREE != BOTTOM, "Heap full.");
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d120      	bne.n	80037b2 <Tm_allocate+0x82>
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <Tm_allocate+0x114>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68dc      	ldr	r4, [r3, #12]
 8003776:	f002 fd9f 	bl	80062b8 <__errno>
 800377a:	4603      	mov	r3, r0
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <Tm_allocate+0x64>
 8003782:	f002 fd99 	bl	80062b8 <__errno>
 8003786:	4603      	mov	r3, r0
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f003 fbc8 	bl	8006f20 <strerror>
 8003790:	4603      	mov	r3, r0
 8003792:	e000      	b.n	8003796 <Tm_allocate+0x66>
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <Tm_allocate+0x118>)
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	f240 1375 	movw	r3, #373	; 0x175
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <Tm_allocate+0x11c>)
 800379e:	492c      	ldr	r1, [pc, #176]	; (8003850 <Tm_allocate+0x120>)
 80037a0:	4620      	mov	r0, r4
 80037a2:	f002 fda3 	bl	80062ec <fiprintf>
 80037a6:	f002 fd87 	bl	80062b8 <__errno>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e041      	b.n	8003836 <Tm_allocate+0x106>
  }

  TmObjectHeader *header = calloc(1, heap->object_size);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4619      	mov	r1, r3
 80037b8:	2001      	movs	r0, #1
 80037ba:	f002 fd75 	bl	80062a8 <calloc>
 80037be:	4603      	mov	r3, r0
 80037c0:	60fb      	str	r3, [r7, #12]
  check(header, "Out of memory.");
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d120      	bne.n	800380a <Tm_allocate+0xda>
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <Tm_allocate+0x114>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68dc      	ldr	r4, [r3, #12]
 80037ce:	f002 fd73 	bl	80062b8 <__errno>
 80037d2:	4603      	mov	r3, r0
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <Tm_allocate+0xbc>
 80037da:	f002 fd6d 	bl	80062b8 <__errno>
 80037de:	4603      	mov	r3, r0
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fb9c 	bl	8006f20 <strerror>
 80037e8:	4603      	mov	r3, r0
 80037ea:	e000      	b.n	80037ee <Tm_allocate+0xbe>
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <Tm_allocate+0x118>)
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f240 1379 	movw	r3, #377	; 0x179
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <Tm_allocate+0x11c>)
 80037f6:	4917      	ldr	r1, [pc, #92]	; (8003854 <Tm_allocate+0x124>)
 80037f8:	4620      	mov	r0, r4
 80037fa:	f002 fd77 	bl	80062ec <fiprintf>
 80037fe:	f002 fd5b 	bl	80062b8 <__errno>
 8003802:	4603      	mov	r3, r0
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e015      	b.n	8003836 <Tm_allocate+0x106>

  TmCell *free = FREE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]
  header->cell = free;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	601a      	str	r2, [r3, #0]
  header->cell->value = header;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	609a      	str	r2, [r3, #8]

  FREE = FREE->next;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]

  heap->allocs++;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	615a      	str	r2, [r3, #20]

  return header;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	e002      	b.n	800383c <Tm_allocate+0x10c>
error:
  exit(EXIT_FAILURE);
 8003836:	2001      	movs	r0, #1
 8003838:	f002 fd44 	bl	80062c4 <exit>
  return NULL;
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}
 8003844:	20000014 	.word	0x20000014
 8003848:	08007b10 	.word	0x08007b10
 800384c:	08007a74 	.word	0x08007a74
 8003850:	08007b18 	.word	0x08007b18
 8003854:	08007b40 	.word	0x08007b40

08003858 <test_rootset>:
#include <treadmill/object.h>
#include "string.h"

Tm_DArray*
test_rootset(TmStateHeader *state_h)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  Tm_DArray *rootset = Tm_DArray_create(sizeof(TmObjectHeader*), 10);
 8003860:	210a      	movs	r1, #10
 8003862:	2004      	movs	r0, #4
 8003864:	f7ff f984 	bl	8002b70 <Tm_DArray_create>
 8003868:	6138      	str	r0, [r7, #16]
  State *state = (State*)state_h;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]
  for(int i=0; i<Tm_DArray_count(state->registers);i++) {
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e00d      	b.n	8003890 <test_rootset+0x38>
    Tm_DArray_push(rootset, Tm_DArray_at(state->registers, i));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	6938      	ldr	r0, [r7, #16]
 8003886:	f7ff fb07 	bl	8002e98 <Tm_DArray_push>
  for(int i=0; i<Tm_DArray_count(state->registers);i++) {
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3301      	adds	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	dbeb      	blt.n	8003874 <test_rootset+0x1c>
  }

  return rootset;
 800389c:	693b      	ldr	r3, [r7, #16]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <test_scan_pointers>:

void
test_scan_pointers(TmHeap *heap, TmObjectHeader *object, TmCallbackFn callback)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  Object *self = (Object*)object;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61bb      	str	r3, [r7, #24]
  for(int i=0; i < Tm_DArray_count(self->children); i++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e00e      	b.n	80038da <test_scan_pointers+0x34>
    TmObjectHeader *o = (TmObjectHeader*)Tm_DArray_at(self->children, i);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	617b      	str	r3, [r7, #20]
    callback(heap, o);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	4798      	blx	r3
  for(int i=0; i < Tm_DArray_count(self->children); i++) {
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	dbea      	blt.n	80038bc <test_scan_pointers+0x16>
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <test_release>:

void
test_release(void *value)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  Object_destroy((Object*)value);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f9e6 	bl	8003cca <Object_destroy>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <State_new>:

State*
State_new()
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  State *state = calloc(1, sizeof(State));
 800390e:	2108      	movs	r1, #8
 8003910:	2001      	movs	r0, #1
 8003912:	f002 fcc9 	bl	80062a8 <calloc>
 8003916:	4603      	mov	r3, r0
 8003918:	607b      	str	r3, [r7, #4]
  state->gc.rootset_fn = test_rootset;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a06      	ldr	r2, [pc, #24]	; (8003938 <State_new+0x30>)
 800391e:	601a      	str	r2, [r3, #0]
  state->registers = Tm_DArray_create(sizeof(Object*), 10);
 8003920:	210a      	movs	r1, #10
 8003922:	2004      	movs	r0, #4
 8003924:	f7ff f924 	bl	8002b70 <Tm_DArray_create>
 8003928:	4602      	mov	r2, r0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]
  return state;
 800392e:	687b      	ldr	r3, [r7, #4]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08003859 	.word	0x08003859

0800393c <new_heap>:

TmHeap*
new_heap(State *state, int size, int growth_rate)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af04      	add	r7, sp, #16
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  return TmHeap_new(
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <new_heap+0x30>)
 800394a:	9302      	str	r3, [sp, #8]
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <new_heap+0x34>)
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	2318      	movs	r3, #24
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2305      	movs	r3, #5
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fbf0 	bl	8003140 <TmHeap_new>
 8003960:	4603      	mov	r3, r0
    5,
    sizeof(Object),
    test_release,
    test_scan_pointers
    );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	080038a7 	.word	0x080038a7
 8003970:	080038f1 	.word	0x080038f1

08003974 <gc_vector_push>:
 */

#include <treadmill/gc_vector.h>


void gc_vector_push(TmHeap *heap, Object *obj_vector, double num) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	ed87 0b00 	vstr	d0, [r7]
	Object *obj_num = Number_new(heap, num);
 8003982:	ed97 0b00 	vldr	d0, [r7]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f90a 	bl	8003ba0 <Number_new>
 800398c:	6178      	str	r0, [r7, #20]

	Tm_DArray_push(OBJ2ARY(obj_vector), obj_num);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fa7f 	bl	8002e98 <Tm_DArray_push>

	Object_relate(obj_vector, obj_num);
 800399a:	6979      	ldr	r1, [r7, #20]
 800399c:	68b8      	ldr	r0, [r7, #8]
 800399e:	f000 f92c 	bl	8003bfa <Object_relate>
}
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <gc_vector_pop>:


void gc_vector_pop(Object *obj_vector) {
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
	Object *obj_num = Tm_DArray_pop(OBJ2ARY(obj_vector));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fa90 	bl	8002edc <Tm_DArray_pop>
 80039bc:	60f8      	str	r0, [r7, #12]
	Object_unrelate(obj_vector, obj_num);
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f93b 	bl	8003c3c <Object_unrelate>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <gc_vector_clear>:

void gc_vector_clear(Object *obj_vector) {
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]

	Tm_DArray *vector = OBJ2ARY(obj_vector);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

	for(int i = Tm_DArray_end(vector); i > 0; --i) {
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e005      	b.n	80039f0 <gc_vector_clear+0x22>
		gc_vector_pop(obj_vector);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ffe0 	bl	80039aa <gc_vector_pop>
	for(int i = Tm_DArray_end(vector); i > 0; --i) {
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dcf6      	bgt.n	80039e4 <gc_vector_clear+0x16>
	}
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f103 0208 	add.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f103 0208 	add.w	r2, r3, #8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f103 0208 	add.w	r2, r3, #8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d103      	bne.n	8003ac2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e00c      	b.n	8003adc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e002      	b.n	8003ad0 <vListInsert+0x2e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d2f6      	bcs.n	8003aca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6892      	ldr	r2, [r2, #8]
 8003b2a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d103      	bne.n	8003b48 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <Object_new>:

#include "string.h"

Object*
Object_new(TmHeap *heap, ValueType type)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  Object *obj = (Object*)Tm_allocate(heap);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fddb 	bl	8003730 <Tm_allocate>
 8003b7a:	60f8      	str	r0, [r7, #12]
  obj->type = type;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	711a      	strb	r2, [r3, #4]
  obj->parent = NULL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  obj->children = Tm_DArray_create(sizeof(Object*), 10);
 8003b88:	210a      	movs	r1, #10
 8003b8a:	2004      	movs	r0, #4
 8003b8c:	f7fe fff0 	bl	8002b70 <Tm_DArray_create>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	615a      	str	r2, [r3, #20]
  return obj;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <Number_new>:
  printf("#<Object %p @cell=%p, @children=%i>\n", self, self->gc.cell, Tm_DArray_count(self->children));
}

Object*
Number_new(TmHeap *heap, double num)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	ed87 0b00 	vstr	d0, [r7]
  Object* obj = Object_new(heap, NumberType);
 8003bac:	2100      	movs	r1, #0
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ffda 	bl	8003b68 <Object_new>
 8003bb4:	6178      	str	r0, [r7, #20]
  obj->data.as_num = num;
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bbc:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return obj;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <Vector_new>:
  return obj;
}

Object*
Vector_new(TmHeap *heap, int vector_size)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  Object* obj = Object_new(heap, VectorType);
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffc6 	bl	8003b68 <Object_new>
 8003bdc:	60f8      	str	r0, [r7, #12]
  Tm_DArray *array = Tm_DArray_create(sizeof(Object*), vector_size);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	2004      	movs	r0, #4
 8003be4:	f7fe ffc4 	bl	8002b70 <Tm_DArray_create>
 8003be8:	60b8      	str	r0, [r7, #8]
  obj->data.as_data = array;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]

  return obj;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <Object_relate>:
  return obj;
}

void
Object_relate(Object* parent, Object* child)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  Tm_DArray_push(parent->children, child);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f944 	bl	8002e98 <Tm_DArray_push>
  child->parent = parent;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <Object_make_root>:

void
Object_make_root(Object *self, State *state)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  Tm_DArray_push(state->registers, self);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f932 	bl	8002e98 <Tm_DArray_push>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <Object_unrelate>:

void Object_unrelate(Object* parent, Object* child) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

	int children_i;
	for (int i= 0; i < Tm_DArray_end(parent->children); ++i) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e014      	b.n	8003c76 <Object_unrelate+0x3a>
		if (Tm_DArray_at(parent->children, i) == child) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <Object_unrelate+0x34>
			children_i = i;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	617b      	str	r3, [r7, #20]
			--Tm_DArray_end(parent->children);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	3a01      	subs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
			break;
 8003c6e:	e008      	b.n	8003c82 <Object_unrelate+0x46>
	for (int i= 0; i < Tm_DArray_end(parent->children); ++i) {
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	3301      	adds	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	dbe4      	blt.n	8003c4c <Object_unrelate+0x10>
		}
	}

	for (int i = children_i; i < Tm_DArray_end(parent->children); ++i)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e011      	b.n	8003cac <Object_unrelate+0x70>
		Tm_DArray_at(parent->children, i) = Tm_DArray_at(parent->children, i+1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	6919      	ldr	r1, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	601a      	str	r2, [r3, #0]
	for (int i = children_i; i < Tm_DArray_end(parent->children); ++i)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	dbe7      	blt.n	8003c88 <Object_unrelate+0x4c>

	child->parent = NULL;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <Object_destroy>:

void
Object_destroy(Object *self)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  if (self->parent)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <Object_destroy+0x1c>
	Object_unrelate(self->parent, self);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ffab 	bl	8003c3c <Object_unrelate>

  Tm_DArray_destroy(self->children);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f8bd 	bl	8002e6a <Tm_DArray_destroy>

  if (self && self->type == StringType) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00c      	beq.n	8003d10 <Object_destroy+0x46>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	791b      	ldrb	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d108      	bne.n	8003d10 <Object_destroy+0x46>
	  if (self->data.as_str)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <Object_destroy+0x46>
		  free(self->data.as_str);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fb2c 	bl	8006368 <free>
  }
  free(self);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f002 fb29 	bl	8006368 <free>
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003d4a:	f001 ff8d 	bl	8005c68 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	441a      	add	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	22ff      	movs	r2, #255	; 0xff
 8003d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	22ff      	movs	r2, #255	; 0xff
 8003d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d114      	bne.n	8003dca <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3310      	adds	r3, #16
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 f85d 	bl	8004e6c <xTaskRemoveFromEventList>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <xQueueGenericReset+0xcc>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	e009      	b.n	8003dde <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3310      	adds	r3, #16
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fe16 	bl	8003a00 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe11 	bl	8003a00 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003dde:	f001 ff73 	bl	8005cc8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	e000ed04 	.word	0xe000ed04

08003df0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	; 0x30
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xQueueGenericCreate+0x2a>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	61bb      	str	r3, [r7, #24]
    }
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <xQueueGenericCreate+0x48>
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d101      	bne.n	8003e3c <xQueueGenericCreate+0x4c>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <xQueueGenericCreate+0x4e>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <xQueueGenericCreate+0x68>
        __asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	617b      	str	r3, [r7, #20]
    }
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003e5e:	d90a      	bls.n	8003e76 <xQueueGenericCreate+0x86>
        __asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
    }
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	3350      	adds	r3, #80	; 0x50
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 f816 	bl	8005eac <pvPortMalloc>
 8003e80:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3350      	adds	r3, #80	; 0x50
 8003e90:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e92:	79fa      	ldrb	r2, [r7, #7]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f805 	bl	8003eae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
    }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e002      	b.n	8003ed0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003edc:	2101      	movs	r1, #1
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f7ff ff1e 	bl	8003d20 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08e      	sub	sp, #56	; 0x38
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f02:	2300      	movs	r3, #0
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xQueueGenericSend+0x32>
        __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <xQueueGenericSend+0x40>
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <xQueueGenericSend+0x44>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <xQueueGenericSend+0x46>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <xQueueGenericSend+0x60>
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003f50:	bf00      	nop
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d103      	bne.n	8003f62 <xQueueGenericSend+0x6e>
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <xQueueGenericSend+0x72>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <xQueueGenericSend+0x74>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xQueueGenericSend+0x8e>
        __asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	623b      	str	r3, [r7, #32]
    }
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f82:	f001 f90f 	bl	80051a4 <xTaskGetSchedulerState>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <xQueueGenericSend+0x9e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <xQueueGenericSend+0xa2>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <xQueueGenericSend+0xa4>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xQueueGenericSend+0xbe>
        __asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	61fb      	str	r3, [r7, #28]
    }
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003fb2:	f001 fe59 	bl	8005c68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <xQueueGenericSend+0xd4>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d129      	bne.n	800401c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fce:	f000 fa19 	bl	8004404 <prvCopyDataToQueue>
 8003fd2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	3324      	adds	r3, #36	; 0x24
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 ff43 	bl	8004e6c <xTaskRemoveFromEventList>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <xQueueGenericSend+0x1f8>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	e00a      	b.n	8004014 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <xQueueGenericSend+0x1f8>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004014:	f001 fe58 	bl	8005cc8 <vPortExitCritical>
                return pdPASS;
 8004018:	2301      	movs	r3, #1
 800401a:	e063      	b.n	80040e4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004022:	f001 fe51 	bl	8005cc8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004026:	2300      	movs	r3, #0
 8004028:	e05c      	b.n	80040e4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	4618      	mov	r0, r3
 8004036:	f000 ff7b 	bl	8004f30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800403e:	f001 fe43 	bl	8005cc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004042:	f000 fcf5 	bl	8004a30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004046:	f001 fe0f 	bl	8005c68 <vPortEnterCritical>
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004050:	b25b      	sxtb	r3, r3
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d103      	bne.n	8004060 <xQueueGenericSend+0x16c>
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004066:	b25b      	sxtb	r3, r3
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d103      	bne.n	8004076 <xQueueGenericSend+0x182>
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004076:	f001 fe27 	bl	8005cc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800407a:	1d3a      	adds	r2, r7, #4
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f000 ff6a 	bl	8004f5c <xTaskCheckForTimeOut>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d124      	bne.n	80040d8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800408e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004090:	f000 fab0 	bl	80045f4 <prvIsQueueFull>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d018      	beq.n	80040cc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	3310      	adds	r3, #16
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fe92 	bl	8004dcc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80040a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040aa:	f000 fa3b 	bl	8004524 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80040ae:	f000 fccd 	bl	8004a4c <xTaskResumeAll>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f af7c 	bne.w	8003fb2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <xQueueGenericSend+0x1f8>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	e772      	b.n	8003fb2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80040cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ce:	f000 fa29 	bl	8004524 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040d2:	f000 fcbb 	bl	8004a4c <xTaskResumeAll>
 80040d6:	e76c      	b.n	8003fb2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80040d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040da:	f000 fa23 	bl	8004524 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040de:	f000 fcb5 	bl	8004a4c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80040e2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3738      	adds	r7, #56	; 0x38
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	e000ed04 	.word	0xe000ed04

080040f0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b090      	sub	sp, #64	; 0x40
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <xQueueGenericSendFromISR+0x3c>
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <xQueueGenericSendFromISR+0x40>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <xQueueGenericSendFromISR+0x42>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d103      	bne.n	800415a <xQueueGenericSendFromISR+0x6a>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <xQueueGenericSendFromISR+0x6e>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueGenericSendFromISR+0x70>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
    }
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800417a:	f001 fe57 	bl	8005e2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800417e:	f3ef 8211 	mrs	r2, BASEPRI
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	61fa      	str	r2, [r7, #28]
 8004194:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004196:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <xQueueGenericSendFromISR+0xbc>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d13e      	bne.n	800422a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041c2:	f000 f91f 	bl	8004404 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80041c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d112      	bne.n	80041f6 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d025      	beq.n	8004224 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fe45 	bl	8004e6c <xTaskRemoveFromEventList>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01d      	beq.n	8004224 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01a      	beq.n	8004224 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e016      	b.n	8004224 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80041f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80041fa:	2b7f      	cmp	r3, #127	; 0x7f
 80041fc:	d10a      	bne.n	8004214 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	617b      	str	r3, [r7, #20]
    }
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004218:	3301      	adds	r3, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	b25a      	sxtb	r2, r3
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004228:	e001      	b.n	800422e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800422a:	2300      	movs	r3, #0
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004238:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800423c:	4618      	mov	r0, r3
 800423e:	3740      	adds	r7, #64	; 0x40
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	; 0x30
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004250:	2300      	movs	r3, #0
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <xQueueReceive+0x30>
        __asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	623b      	str	r3, [r7, #32]
    }
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <xQueueReceive+0x3e>
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <xQueueReceive+0x42>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <xQueueReceive+0x44>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <xQueueReceive+0x5e>
        __asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	61fb      	str	r3, [r7, #28]
    }
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a2:	f000 ff7f 	bl	80051a4 <xTaskGetSchedulerState>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <xQueueReceive+0x6e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <xQueueReceive+0x72>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueReceive+0x74>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xQueueReceive+0x8e>
        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	61bb      	str	r3, [r7, #24]
    }
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80042d2:	f001 fcc9 	bl	8005c68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01f      	beq.n	8004322 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e6:	f000 f8f7 	bl	80044d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00f      	beq.n	800431a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	3310      	adds	r3, #16
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fdb4 	bl	8004e6c <xTaskRemoveFromEventList>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <xQueueReceive+0x1bc>)
 800430c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800431a:	f001 fcd5 	bl	8005cc8 <vPortExitCritical>
                return pdPASS;
 800431e:	2301      	movs	r3, #1
 8004320:	e069      	b.n	80043f6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004328:	f001 fcce 	bl	8005cc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800432c:	2300      	movs	r3, #0
 800432e:	e062      	b.n	80043f6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004336:	f107 0310 	add.w	r3, r7, #16
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fdf8 	bl	8004f30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004344:	f001 fcc0 	bl	8005cc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004348:	f000 fb72 	bl	8004a30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800434c:	f001 fc8c 	bl	8005c68 <vPortEnterCritical>
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d103      	bne.n	8004366 <xQueueReceive+0x122>
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800436c:	b25b      	sxtb	r3, r3
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d103      	bne.n	800437c <xQueueReceive+0x138>
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800437c:	f001 fca4 	bl	8005cc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004380:	1d3a      	adds	r2, r7, #4
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fde7 	bl	8004f5c <xTaskCheckForTimeOut>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d123      	bne.n	80043dc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004396:	f000 f917 	bl	80045c8 <prvIsQueueEmpty>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d017      	beq.n	80043d0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fd0f 	bl	8004dcc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80043ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b0:	f000 f8b8 	bl	8004524 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80043b4:	f000 fb4a 	bl	8004a4c <xTaskResumeAll>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d189      	bne.n	80042d2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <xQueueReceive+0x1bc>)
 80043c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	e780      	b.n	80042d2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80043d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d2:	f000 f8a7 	bl	8004524 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80043d6:	f000 fb39 	bl	8004a4c <xTaskResumeAll>
 80043da:	e77a      	b.n	80042d2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80043dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043de:	f000 f8a1 	bl	8004524 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80043e2:	f000 fb33 	bl	8004a4c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e8:	f000 f8ee 	bl	80045c8 <prvIsQueueEmpty>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f43f af6f 	beq.w	80042d2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80043f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3730      	adds	r7, #48	; 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10d      	bne.n	800443e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d14d      	bne.n	80044c6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fed6 	bl	80051e0 <xTaskPriorityDisinherit>
 8004434:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	e043      	b.n	80044c6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d119      	bne.n	8004478 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6858      	ldr	r0, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	461a      	mov	r2, r3
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	f001 ff92 	bl	8006378 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	441a      	add	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d32b      	bcc.n	80044c6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e026      	b.n	80044c6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68d8      	ldr	r0, [r3, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	461a      	mov	r2, r3
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	f001 ff78 	bl	8006378 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	425b      	negs	r3, r3
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d207      	bcs.n	80044b4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	425b      	negs	r3, r3
 80044ae:	441a      	add	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d105      	bne.n	80044c6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80044ce:	697b      	ldr	r3, [r7, #20]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	441a      	add	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d303      	bcc.n	800450c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	461a      	mov	r2, r3
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f001 ff2e 	bl	8006378 <memcpy>
    }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800452c:	f001 fb9c 	bl	8005c68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004536:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004538:	e011      	b.n	800455e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d012      	beq.n	8004568 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fc90 	bl	8004e6c <xTaskRemoveFromEventList>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004552:	f000 fd69 	bl	8005028 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	3b01      	subs	r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800455e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	dce9      	bgt.n	800453a <prvUnlockQueue+0x16>
 8004566:	e000      	b.n	800456a <prvUnlockQueue+0x46>
                        break;
 8004568:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004572:	f001 fba9 	bl	8005cc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004576:	f001 fb77 	bl	8005c68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004580:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004582:	e011      	b.n	80045a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3310      	adds	r3, #16
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fc6b 	bl	8004e6c <xTaskRemoveFromEventList>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800459c:	f000 fd44 	bl	8005028 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80045a0:	7bbb      	ldrb	r3, [r7, #14]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dce9      	bgt.n	8004584 <prvUnlockQueue+0x60>
 80045b0:	e000      	b.n	80045b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80045b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	22ff      	movs	r2, #255	; 0xff
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80045bc:	f001 fb84 	bl	8005cc8 <vPortExitCritical>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80045d0:	f001 fb4a 	bl	8005c68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e001      	b.n	80045e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80045e6:	f001 fb6f 	bl	8005cc8 <vPortExitCritical>

    return xReturn;
 80045ea:	68fb      	ldr	r3, [r7, #12]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80045fc:	f001 fb34 	bl	8005c68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	429a      	cmp	r2, r3
 800460a:	d102      	bne.n	8004612 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e001      	b.n	8004616 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004616:	f001 fb57 	bl	8005cc8 <vPortExitCritical>

    return xReturn;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e014      	b.n	800465e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004634:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <vQueueAddToRegistry+0x50>)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004640:	490c      	ldr	r1, [pc, #48]	; (8004674 <vQueueAddToRegistry+0x50>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <vQueueAddToRegistry+0x50>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004656:	e006      	b.n	8004666 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b07      	cmp	r3, #7
 8004662:	d9e7      	bls.n	8004634 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20012ea0 	.word	0x20012ea0

08004678 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004688:	f001 faee 	bl	8005c68 <vPortEnterCritical>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004692:	b25b      	sxtb	r3, r3
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d103      	bne.n	80046a2 <vQueueWaitForMessageRestricted+0x2a>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a8:	b25b      	sxtb	r3, r3
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d103      	bne.n	80046b8 <vQueueWaitForMessageRestricted+0x40>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b8:	f001 fb06 	bl	8005cc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	3324      	adds	r3, #36	; 0x24
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fba1 	bl	8004e14 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f7ff ff26 	bl	8004524 <prvUnlockQueue>
    }
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <State_destroy>:
 */
#include <treadmill/state.h>

void
State_destroy(State *state)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  Tm_DArray_destroy(state->registers);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fbbc 	bl	8002e6a <Tm_DArray_destroy>
  free(state);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f001 fe38 	bl	8006368 <free>
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004700:	b580      	push	{r7, lr}
 8004702:	b08c      	sub	sp, #48	; 0x30
 8004704:	af04      	add	r7, sp, #16
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fbc9 	bl	8005eac <pvPortMalloc>
 800471a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004722:	2058      	movs	r0, #88	; 0x58
 8004724:	f001 fbc2 	bl	8005eac <pvPortMalloc>
 8004728:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
 8004736:	e005      	b.n	8004744 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f001 fc97 	bl	800606c <vPortFree>
 800473e:	e001      	b.n	8004744 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d013      	beq.n	8004772 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	2300      	movs	r3, #0
 800474e:	9303      	str	r3, [sp, #12]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	9302      	str	r3, [sp, #8]
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f80e 	bl	8004782 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004766:	69f8      	ldr	r0, [r7, #28]
 8004768:	f000 f8a2 	bl	80048b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800476c:	2301      	movs	r3, #1
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e002      	b.n	8004778 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004778:	69bb      	ldr	r3, [r7, #24]
    }
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	21a5      	movs	r1, #165	; 0xa5
 800479c:	f001 fdfa 	bl	8006394 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047aa:	3b01      	subs	r3, #1
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <prvInitialiseNewTask+0x58>
        __asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	617b      	str	r3, [r7, #20]
    }
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01f      	beq.n	8004820 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e012      	b.n	800480c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	7819      	ldrb	r1, [r3, #0]
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	3334      	adds	r3, #52	; 0x34
 80047f6:	460a      	mov	r2, r1
 80047f8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3301      	adds	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b09      	cmp	r3, #9
 8004810:	d9e9      	bls.n	80047e6 <prvInitialiseNewTask+0x64>
 8004812:	e000      	b.n	8004816 <prvInitialiseNewTask+0x94>
            {
                break;
 8004814:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800481e:	e003      	b.n	8004828 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b04      	cmp	r3, #4
 800482c:	d901      	bls.n	8004832 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800482e:	2304      	movs	r3, #4
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	2200      	movs	r2, #0
 8004842:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	3304      	adds	r3, #4
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff f8f9 	bl	8003a40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	3318      	adds	r3, #24
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f8f4 	bl	8003a40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	f1c3 0205 	rsb	r2, r3, #5
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	3350      	adds	r3, #80	; 0x50
 8004872:	2204      	movs	r2, #4
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fd8c 	bl	8006394 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	3354      	adds	r3, #84	; 0x54
 8004880:	2201      	movs	r2, #1
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fd85 	bl	8006394 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	69b8      	ldr	r0, [r7, #24]
 8004890:	f001 f8bc 	bl	8005a0c <pxPortInitialiseStack>
 8004894:	4602      	mov	r2, r0
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048a6:	bf00      	nop
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80048b8:	f001 f9d6 	bl	8005c68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <prvAddNewTaskToReadyList+0xc0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <prvAddNewTaskToReadyList+0xc0>)
 80048c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80048c6:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <prvAddNewTaskToReadyList+0xc4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80048ce:	4a29      	ldr	r2, [pc, #164]	; (8004974 <prvAddNewTaskToReadyList+0xc4>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048d4:	4b26      	ldr	r3, [pc, #152]	; (8004970 <prvAddNewTaskToReadyList+0xc0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d110      	bne.n	80048fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80048dc:	f000 fbc8 	bl	8005070 <prvInitialiseTaskLists>
 80048e0:	e00d      	b.n	80048fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80048e2:	4b25      	ldr	r3, [pc, #148]	; (8004978 <prvAddNewTaskToReadyList+0xc8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <prvAddNewTaskToReadyList+0xc4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d802      	bhi.n	80048fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80048f8:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <prvAddNewTaskToReadyList+0xc4>)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <prvAddNewTaskToReadyList+0xcc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	4a1d      	ldr	r2, [pc, #116]	; (800497c <prvAddNewTaskToReadyList+0xcc>)
 8004906:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <prvAddNewTaskToReadyList+0xcc>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	409a      	lsls	r2, r3
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <prvAddNewTaskToReadyList+0xd0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	4a18      	ldr	r2, [pc, #96]	; (8004980 <prvAddNewTaskToReadyList+0xd0>)
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <prvAddNewTaskToReadyList+0xd4>)
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7ff f88e 	bl	8003a5a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800493e:	f001 f9c3 	bl	8005cc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <prvAddNewTaskToReadyList+0xc8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00e      	beq.n	8004968 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <prvAddNewTaskToReadyList+0xc4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	429a      	cmp	r2, r3
 8004956:	d207      	bcs.n	8004968 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <prvAddNewTaskToReadyList+0xd8>)
 800495a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000174 	.word	0x20000174
 8004974:	2000009c 	.word	0x2000009c
 8004978:	20000180 	.word	0x20000180
 800497c:	20000190 	.word	0x20000190
 8004980:	2000017c 	.word	0x2000017c
 8004984:	200000a0 	.word	0x200000a0
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <vTaskStartScheduler+0x88>)
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	2300      	movs	r3, #0
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	2282      	movs	r2, #130	; 0x82
 800499e:	491e      	ldr	r1, [pc, #120]	; (8004a18 <vTaskStartScheduler+0x8c>)
 80049a0:	481e      	ldr	r0, [pc, #120]	; (8004a1c <vTaskStartScheduler+0x90>)
 80049a2:	f7ff fead 	bl	8004700 <xTaskCreate>
 80049a6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d102      	bne.n	80049b4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80049ae:	f000 fcf7 	bl	80053a0 <xTimerCreateTimerTask>
 80049b2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d116      	bne.n	80049e8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60bb      	str	r3, [r7, #8]
    }
 80049cc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80049ce:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <vTaskStartScheduler+0x94>)
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <vTaskStartScheduler+0x98>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <vTaskStartScheduler+0x9c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80049e2:	f001 f89f 	bl	8005b24 <xPortStartScheduler>
 80049e6:	e00e      	b.n	8004a06 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d10a      	bne.n	8004a06 <vTaskStartScheduler+0x7a>
        __asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	607b      	str	r3, [r7, #4]
    }
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <vTaskStartScheduler+0xa0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000198 	.word	0x20000198
 8004a18:	08007b6c 	.word	0x08007b6c
 8004a1c:	08005041 	.word	0x08005041
 8004a20:	20000194 	.word	0x20000194
 8004a24:	20000180 	.word	0x20000180
 8004a28:	20000178 	.word	0x20000178
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <vTaskSuspendAll+0x18>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	4a03      	ldr	r2, [pc, #12]	; (8004a48 <vTaskSuspendAll+0x18>)
 8004a3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	2000019c 	.word	0x2000019c

08004a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <xTaskResumeAll+0x2c>
        __asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	603b      	str	r3, [r7, #0]
    }
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004a78:	f001 f8f6 	bl	8005c68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004a7c:	4b38      	ldr	r3, [pc, #224]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a84:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a86:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d161      	bne.n	8004b52 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a8e:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <xTaskResumeAll+0x118>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d05d      	beq.n	8004b52 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a96:	e02e      	b.n	8004af6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a98:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <xTaskResumeAll+0x11c>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff f835 	bl	8003b14 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f830 	bl	8003b14 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <xTaskResumeAll+0x120>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <xTaskResumeAll+0x120>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <xTaskResumeAll+0x124>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe ffbc 	bl	8003a5a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <xTaskResumeAll+0x128>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d302      	bcc.n	8004af6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004af0:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <xTaskResumeAll+0x12c>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <xTaskResumeAll+0x11c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1cc      	bne.n	8004a98 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004b04:	f000 fb32 	bl	800516c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <xTaskResumeAll+0x130>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004b14:	f000 f846 	bl	8004ba4 <xTaskIncrementTick>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004b1e:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <xTaskResumeAll+0x12c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f1      	bne.n	8004b14 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <xTaskResumeAll+0x130>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <xTaskResumeAll+0x12c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <xTaskResumeAll+0x134>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004b52:	f001 f8b9 	bl	8005cc8 <vPortExitCritical>

    return xAlreadyYielded;
 8004b56:	68bb      	ldr	r3, [r7, #8]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	2000019c 	.word	0x2000019c
 8004b64:	20000174 	.word	0x20000174
 8004b68:	20000134 	.word	0x20000134
 8004b6c:	2000017c 	.word	0x2000017c
 8004b70:	200000a0 	.word	0x200000a0
 8004b74:	2000009c 	.word	0x2000009c
 8004b78:	20000188 	.word	0x20000188
 8004b7c:	20000184 	.word	0x20000184
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <xTaskGetTickCount+0x1c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000178 	.word	0x20000178

08004ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bae:	4b4e      	ldr	r3, [pc, #312]	; (8004ce8 <xTaskIncrementTick+0x144>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 808e 	bne.w	8004cd4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb8:	4b4c      	ldr	r3, [pc, #304]	; (8004cec <xTaskIncrementTick+0x148>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004bc0:	4a4a      	ldr	r2, [pc, #296]	; (8004cec <xTaskIncrementTick+0x148>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d120      	bne.n	8004c0e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004bcc:	4b48      	ldr	r3, [pc, #288]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <xTaskIncrementTick+0x48>
        __asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	603b      	str	r3, [r7, #0]
    }
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xTaskIncrementTick+0x46>
 8004bec:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a3e      	ldr	r2, [pc, #248]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4a3e      	ldr	r2, [pc, #248]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	f000 faaf 	bl	800516c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004c0e:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d348      	bcc.n	8004caa <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c18:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	601a      	str	r2, [r3, #0]
                    break;
 8004c2a:	e03e      	b.n	8004caa <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2c:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d203      	bcs.n	8004c4c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c4a:	e02e      	b.n	8004caa <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe ff5f 	bl	8003b14 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3318      	adds	r3, #24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe ff56 	bl	8003b14 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c88:	441a      	add	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7fe fee2 	bl	8003a5a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3b9      	bcc.n	8004c18 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca8:	e7b6      	b.n	8004c18 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb0:	4914      	ldr	r1, [pc, #80]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d901      	bls.n	8004cc6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e004      	b.n	8004cde <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004cdc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	2000019c 	.word	0x2000019c
 8004cec:	20000178 	.word	0x20000178
 8004cf0:	2000012c 	.word	0x2000012c
 8004cf4:	20000130 	.word	0x20000130
 8004cf8:	2000018c 	.word	0x2000018c
 8004cfc:	20000194 	.word	0x20000194
 8004d00:	2000017c 	.word	0x2000017c
 8004d04:	200000a0 	.word	0x200000a0
 8004d08:	2000009c 	.word	0x2000009c
 8004d0c:	20000188 	.word	0x20000188
 8004d10:	20000184 	.word	0x20000184

08004d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d1a:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <vTaskSwitchContext+0xa4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <vTaskSwitchContext+0xa8>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004d28:	e03f      	b.n	8004daa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <vTaskSwitchContext+0xa8>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <vTaskSwitchContext+0xac>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	f1c3 031f 	rsb	r3, r3, #31
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	491f      	ldr	r1, [pc, #124]	; (8004dc4 <vTaskSwitchContext+0xb0>)
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
    }
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <vTaskSwitchContext+0x5a>
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <vTaskSwitchContext+0xb0>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	3308      	adds	r3, #8
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d104      	bne.n	8004da0 <vTaskSwitchContext+0x8c>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <vTaskSwitchContext+0xb4>)
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	2000019c 	.word	0x2000019c
 8004dbc:	20000188 	.word	0x20000188
 8004dc0:	2000017c 	.word	0x2000017c
 8004dc4:	200000a0 	.word	0x200000a0
 8004dc8:	2000009c 	.word	0x2000009c

08004dcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	60fb      	str	r3, [r7, #12]
    }
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <vTaskPlaceOnEventList+0x44>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3318      	adds	r3, #24
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fe fe51 	bl	8003aa2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e00:	2101      	movs	r1, #1
 8004e02:	6838      	ldr	r0, [r7, #0]
 8004e04:	f000 fa66 	bl	80052d4 <prvAddCurrentTaskToDelayedList>
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	2000009c 	.word	0x2000009c

08004e14 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	617b      	str	r3, [r7, #20]
    }
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3318      	adds	r3, #24
 8004e42:	4619      	mov	r1, r3
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7fe fe08 	bl	8003a5a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	68b8      	ldr	r0, [r7, #8]
 8004e5a:	f000 fa3b 	bl	80052d4 <prvAddCurrentTaskToDelayedList>
    }
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000009c 	.word	0x2000009c

08004e6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60fb      	str	r3, [r7, #12]
    }
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fe39 	bl	8003b14 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <xTaskRemoveFromEventList+0xac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11c      	bne.n	8004ee4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fe30 	bl	8003b14 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <xTaskRemoveFromEventList+0xb0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <xTaskRemoveFromEventList+0xb0>)
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <xTaskRemoveFromEventList+0xb4>)
 8004ed4:	441a      	add	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7fe fdbc 	bl	8003a5a <vListInsertEnd>
 8004ee2:	e005      	b.n	8004ef0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3318      	adds	r3, #24
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480e      	ldr	r0, [pc, #56]	; (8004f24 <xTaskRemoveFromEventList+0xb8>)
 8004eec:	f7fe fdb5 	bl	8003a5a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <xTaskRemoveFromEventList+0xbc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d905      	bls.n	8004f0a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <xTaskRemoveFromEventList+0xc0>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e001      	b.n	8004f0e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004f0e:	697b      	ldr	r3, [r7, #20]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000019c 	.word	0x2000019c
 8004f1c:	2000017c 	.word	0x2000017c
 8004f20:	200000a0 	.word	0x200000a0
 8004f24:	20000134 	.word	0x20000134
 8004f28:	2000009c 	.word	0x2000009c
 8004f2c:	20000188 	.word	0x20000188

08004f30 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <vTaskInternalSetTimeOutState+0x24>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <vTaskInternalSetTimeOutState+0x28>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	605a      	str	r2, [r3, #4]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	2000018c 	.word	0x2000018c
 8004f58:	20000178 	.word	0x20000178

08004f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	613b      	str	r3, [r7, #16]
    }
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	60fb      	str	r3, [r7, #12]
    }
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004f9e:	f000 fe63 	bl	8005c68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <xTaskCheckForTimeOut+0xc4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d102      	bne.n	8004fc2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e026      	b.n	8005010 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b17      	ldr	r3, [pc, #92]	; (8005024 <xTaskCheckForTimeOut+0xc8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d00a      	beq.n	8004fe4 <xTaskCheckForTimeOut+0x88>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d305      	bcc.n	8004fe4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e015      	b.n	8005010 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d20b      	bcs.n	8005006 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	1ad2      	subs	r2, r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff ff98 	bl	8004f30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	e004      	b.n	8005010 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005010:	f000 fe5a 	bl	8005cc8 <vPortExitCritical>

    return xReturn;
 8005014:	69fb      	ldr	r3, [r7, #28]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000178 	.word	0x20000178
 8005024:	2000018c 	.word	0x2000018c

08005028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <vTaskMissedYield+0x14>)
 800502e:	2201      	movs	r2, #1
 8005030:	601a      	str	r2, [r3, #0]
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000188 	.word	0x20000188

08005040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005048:	f000 f852 	bl	80050f0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <prvIdleTask+0x28>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d9f9      	bls.n	8005048 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <prvIdleTask+0x2c>)
 8005056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005064:	e7f0      	b.n	8005048 <prvIdleTask+0x8>
 8005066:	bf00      	nop
 8005068:	200000a0 	.word	0x200000a0
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	e00c      	b.n	8005096 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4a12      	ldr	r2, [pc, #72]	; (80050d0 <prvInitialiseTaskLists+0x60>)
 8005088:	4413      	add	r3, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe fcb8 	bl	8003a00 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d9ef      	bls.n	800507c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800509c:	480d      	ldr	r0, [pc, #52]	; (80050d4 <prvInitialiseTaskLists+0x64>)
 800509e:	f7fe fcaf 	bl	8003a00 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80050a2:	480d      	ldr	r0, [pc, #52]	; (80050d8 <prvInitialiseTaskLists+0x68>)
 80050a4:	f7fe fcac 	bl	8003a00 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80050a8:	480c      	ldr	r0, [pc, #48]	; (80050dc <prvInitialiseTaskLists+0x6c>)
 80050aa:	f7fe fca9 	bl	8003a00 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80050ae:	480c      	ldr	r0, [pc, #48]	; (80050e0 <prvInitialiseTaskLists+0x70>)
 80050b0:	f7fe fca6 	bl	8003a00 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80050b4:	480b      	ldr	r0, [pc, #44]	; (80050e4 <prvInitialiseTaskLists+0x74>)
 80050b6:	f7fe fca3 	bl	8003a00 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <prvInitialiseTaskLists+0x78>)
 80050bc:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <prvInitialiseTaskLists+0x64>)
 80050be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <prvInitialiseTaskLists+0x7c>)
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <prvInitialiseTaskLists+0x68>)
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200000a0 	.word	0x200000a0
 80050d4:	20000104 	.word	0x20000104
 80050d8:	20000118 	.word	0x20000118
 80050dc:	20000134 	.word	0x20000134
 80050e0:	20000148 	.word	0x20000148
 80050e4:	20000160 	.word	0x20000160
 80050e8:	2000012c 	.word	0x2000012c
 80050ec:	20000130 	.word	0x20000130

080050f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f6:	e019      	b.n	800512c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80050f8:	f000 fdb6 	bl	8005c68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <prvCheckTasksWaitingTermination+0x50>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fd03 	bl	8003b14 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <prvCheckTasksWaitingTermination+0x54>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <prvCheckTasksWaitingTermination+0x54>)
 8005116:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <prvCheckTasksWaitingTermination+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <prvCheckTasksWaitingTermination+0x58>)
 8005120:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005122:	f000 fdd1 	bl	8005cc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f810 	bl	800514c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <prvCheckTasksWaitingTermination+0x58>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e1      	bne.n	80050f8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000148 	.word	0x20000148
 8005144:	20000174 	.word	0x20000174
 8005148:	2000015c 	.word	0x2000015c

0800514c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	4618      	mov	r0, r3
 800515a:	f000 ff87 	bl	800606c <vPortFree>
                vPortFree( pxTCB );
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 ff84 	bl	800606c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <prvResetNextTaskUnblockTime+0x30>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <prvResetNextTaskUnblockTime+0x34>)
 800517c:	f04f 32ff 	mov.w	r2, #4294967295
 8005180:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005182:	e005      	b.n	8005190 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <prvResetNextTaskUnblockTime+0x30>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <prvResetNextTaskUnblockTime+0x34>)
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	2000012c 	.word	0x2000012c
 80051a0:	20000194 	.word	0x20000194

080051a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <xTaskGetSchedulerState+0x34>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80051b2:	2301      	movs	r3, #1
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	e008      	b.n	80051ca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <xTaskGetSchedulerState+0x38>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80051c0:	2302      	movs	r3, #2
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	e001      	b.n	80051ca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80051c6:	2300      	movs	r3, #0
 80051c8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80051ca:	687b      	ldr	r3, [r7, #4]
    }
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000180 	.word	0x20000180
 80051dc:	2000019c 	.word	0x2000019c

080051e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80051f6:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <xTaskPriorityDisinherit+0xe8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d00a      	beq.n	8005216 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	60fb      	str	r3, [r7, #12]
    }
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60bb      	str	r3, [r7, #8]
    }
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005246:	429a      	cmp	r2, r3
 8005248:	d039      	beq.n	80052be <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d135      	bne.n	80052be <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fc5c 	bl	8003b14 <uxListRemove>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	2201      	movs	r2, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43da      	mvns	r2, r3
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <xTaskPriorityDisinherit+0xec>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4013      	ands	r3, r2
 8005274:	4a15      	ldr	r2, [pc, #84]	; (80052cc <xTaskPriorityDisinherit+0xec>)
 8005276:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	f1c3 0205 	rsb	r2, r3, #5
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	2201      	movs	r2, #1
 8005292:	409a      	lsls	r2, r3
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <xTaskPriorityDisinherit+0xec>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	4a0c      	ldr	r2, [pc, #48]	; (80052cc <xTaskPriorityDisinherit+0xec>)
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <xTaskPriorityDisinherit+0xf0>)
 80052ac:	441a      	add	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7fe fbd0 	bl	8003a5a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80052be:	697b      	ldr	r3, [r7, #20]
    }
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2000009c 	.word	0x2000009c
 80052cc:	2000017c 	.word	0x2000017c
 80052d0:	200000a0 	.word	0x200000a0

080052d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052e4:	4b28      	ldr	r3, [pc, #160]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fc12 	bl	8003b14 <uxListRemove>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10b      	bne.n	800530e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	2201      	movs	r2, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43da      	mvns	r2, r3
 8005304:	4b21      	ldr	r3, [pc, #132]	; (800538c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4013      	ands	r3, r2
 800530a:	4a20      	ldr	r2, [pc, #128]	; (800538c <prvAddCurrentTaskToDelayedList+0xb8>)
 800530c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d10a      	bne.n	800532c <prvAddCurrentTaskToDelayedList+0x58>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	481a      	ldr	r0, [pc, #104]	; (8005390 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005326:	f7fe fb98 	bl	8003a5a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800532a:	e026      	b.n	800537a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d209      	bcs.n	8005358 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005344:	4b13      	ldr	r3, [pc, #76]	; (8005394 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3304      	adds	r3, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fe fba6 	bl	8003aa2 <vListInsert>
}
 8005356:	e010      	b.n	800537a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <prvAddCurrentTaskToDelayedList+0xc4>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe fb9c 	bl	8003aa2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <prvAddCurrentTaskToDelayedList+0xc8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	d202      	bcs.n	800537a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005374:	4a09      	ldr	r2, [pc, #36]	; (800539c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6013      	str	r3, [r2, #0]
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000178 	.word	0x20000178
 8005388:	2000009c 	.word	0x2000009c
 800538c:	2000017c 	.word	0x2000017c
 8005390:	20000160 	.word	0x20000160
 8005394:	20000130 	.word	0x20000130
 8005398:	2000012c 	.word	0x2000012c
 800539c:	20000194 	.word	0x20000194

080053a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80053aa:	f000 fad5 	bl	8005958 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <xTimerCreateTimerTask+0x54>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <xTimerCreateTimerTask+0x58>)
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	2302      	movs	r3, #2
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053c4:	490d      	ldr	r1, [pc, #52]	; (80053fc <xTimerCreateTimerTask+0x5c>)
 80053c6:	480e      	ldr	r0, [pc, #56]	; (8005400 <xTimerCreateTimerTask+0x60>)
 80053c8:	f7ff f99a 	bl	8004700 <xTaskCreate>
 80053cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	603b      	str	r3, [r7, #0]
    }
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80053ea:	687b      	ldr	r3, [r7, #4]
    }
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200001d0 	.word	0x200001d0
 80053f8:	200001d4 	.word	0x200001d4
 80053fc:	08007b74 	.word	0x08007b74
 8005400:	08005539 	.word	0x08005539

08005404 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005412:	2300      	movs	r3, #0
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <xTimerGenericCommand+0x2e>
        __asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	623b      	str	r3, [r7, #32]
    }
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005432:	4b1a      	ldr	r3, [pc, #104]	; (800549c <xTimerGenericCommand+0x98>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02a      	beq.n	8005490 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b05      	cmp	r3, #5
 800544a:	dc18      	bgt.n	800547e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800544c:	f7ff feaa 	bl	80051a4 <xTaskGetSchedulerState>
 8005450:	4603      	mov	r3, r0
 8005452:	2b02      	cmp	r3, #2
 8005454:	d109      	bne.n	800546a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <xTimerGenericCommand+0x98>)
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f107 0114 	add.w	r1, r7, #20
 800545e:	2300      	movs	r3, #0
 8005460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005462:	f7fe fd47 	bl	8003ef4 <xQueueGenericSend>
 8005466:	6278      	str	r0, [r7, #36]	; 0x24
 8005468:	e012      	b.n	8005490 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <xTimerGenericCommand+0x98>)
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f107 0114 	add.w	r1, r7, #20
 8005472:	2300      	movs	r3, #0
 8005474:	2200      	movs	r2, #0
 8005476:	f7fe fd3d 	bl	8003ef4 <xQueueGenericSend>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24
 800547c:	e008      	b.n	8005490 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800547e:	4b07      	ldr	r3, [pc, #28]	; (800549c <xTimerGenericCommand+0x98>)
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	f107 0114 	add.w	r1, r7, #20
 8005486:	2300      	movs	r3, #0
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	f7fe fe31 	bl	80040f0 <xQueueGenericSendFromISR>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	; 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200001d0 	.word	0x200001d0

080054a0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054aa:	4b22      	ldr	r3, [pc, #136]	; (8005534 <prvProcessExpiredTimer+0x94>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3304      	adds	r3, #4
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fb2b 	bl	8003b14 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d022      	beq.n	8005512 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	699a      	ldr	r2, [r3, #24]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	18d1      	adds	r1, r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	6978      	ldr	r0, [r7, #20]
 80054da:	f000 f8d1 	bl	8005680 <prvInsertTimerInActiveList>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01f      	beq.n	8005524 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054e4:	2300      	movs	r3, #0
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	2100      	movs	r1, #0
 80054ee:	6978      	ldr	r0, [r7, #20]
 80054f0:	f7ff ff88 	bl	8005404 <xTimerGenericCommand>
 80054f4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d113      	bne.n	8005524 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60fb      	str	r3, [r7, #12]
    }
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	6978      	ldr	r0, [r7, #20]
 800552a:	4798      	blx	r3
    }
 800552c:	bf00      	nop
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200001c8 	.word	0x200001c8

08005538 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005540:	f107 0308 	add.w	r3, r7, #8
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f857 	bl	80055f8 <prvGetNextExpireTime>
 800554a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4619      	mov	r1, r3
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f803 	bl	800555c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005556:	f000 f8d5 	bl	8005704 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800555a:	e7f1      	b.n	8005540 <prvTimerTask+0x8>

0800555c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005566:	f7ff fa63 	bl	8004a30 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f866 	bl	8005640 <prvSampleTimeNow>
 8005574:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d130      	bne.n	80055de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <prvProcessTimerOrBlockTask+0x3c>
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	429a      	cmp	r2, r3
 8005588:	d806      	bhi.n	8005598 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800558a:	f7ff fa5f 	bl	8004a4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff85 	bl	80054a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005596:	e024      	b.n	80055e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <prvProcessTimerOrBlockTask+0x90>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <prvProcessTimerOrBlockTask+0x50>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <prvProcessTimerOrBlockTask+0x52>
 80055ac:	2300      	movs	r3, #0
 80055ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <prvProcessTimerOrBlockTask+0x94>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	f7ff f85b 	bl	8004678 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80055c2:	f7ff fa43 	bl	8004a4c <xTaskResumeAll>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <prvProcessTimerOrBlockTask+0x98>)
 80055ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	f3bf 8f6f 	isb	sy
    }
 80055dc:	e001      	b.n	80055e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80055de:	f7ff fa35 	bl	8004a4c <xTaskResumeAll>
    }
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200001cc 	.word	0x200001cc
 80055f0:	200001d0 	.word	0x200001d0
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <prvGetNextExpireTime+0x44>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <prvGetNextExpireTime+0x16>
 800560a:	2201      	movs	r2, #1
 800560c:	e000      	b.n	8005610 <prvGetNextExpireTime+0x18>
 800560e:	2200      	movs	r2, #0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <prvGetNextExpireTime+0x44>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e001      	b.n	800562c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800562c:	68fb      	ldr	r3, [r7, #12]
    }
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200001c8 	.word	0x200001c8

08005640 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005648:	f7ff fa9c 	bl	8004b84 <xTaskGetTickCount>
 800564c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <prvSampleTimeNow+0x3c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	429a      	cmp	r2, r3
 8005656:	d205      	bcs.n	8005664 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005658:	f000 f91a 	bl	8005890 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e002      	b.n	800566a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800566a:	4a04      	ldr	r2, [pc, #16]	; (800567c <prvSampleTimeNow+0x3c>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005670:	68fb      	ldr	r3, [r7, #12]
    }
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	200001d8 	.word	0x200001d8

08005680 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d812      	bhi.n	80056cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e01b      	b.n	80056f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <prvInsertTimerInActiveList+0x7c>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fe f9ec 	bl	8003aa2 <vListInsert>
 80056ca:	e012      	b.n	80056f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d206      	bcs.n	80056e2 <prvInsertTimerInActiveList+0x62>
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e007      	b.n	80056f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056e2:	4b07      	ldr	r3, [pc, #28]	; (8005700 <prvInsertTimerInActiveList+0x80>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fe f9d8 	bl	8003aa2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80056f2:	697b      	ldr	r3, [r7, #20]
    }
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200001cc 	.word	0x200001cc
 8005700:	200001c8 	.word	0x200001c8

08005704 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005704:	b580      	push	{r7, lr}
 8005706:	b08c      	sub	sp, #48	; 0x30
 8005708:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800570a:	e0ae      	b.n	800586a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f2c0 80aa 	blt.w	8005868 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	3304      	adds	r3, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe f9f5 	bl	8003b14 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff ff87 	bl	8005640 <prvSampleTimeNow>
 8005732:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b09      	cmp	r3, #9
 8005738:	f200 8097 	bhi.w	800586a <prvProcessReceivedCommands+0x166>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <prvProcessReceivedCommands+0x40>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	0800576d 	.word	0x0800576d
 8005748:	0800576d 	.word	0x0800576d
 800574c:	0800576d 	.word	0x0800576d
 8005750:	080057e1 	.word	0x080057e1
 8005754:	080057f5 	.word	0x080057f5
 8005758:	0800583f 	.word	0x0800583f
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800576d 	.word	0x0800576d
 8005764:	080057e1 	.word	0x080057e1
 8005768:	080057f5 	.word	0x080057f5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	b2da      	uxtb	r2, r3
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	18d1      	adds	r1, r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800578c:	f7ff ff78 	bl	8005680 <prvInsertTimerInActiveList>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d069      	beq.n	800586a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05e      	beq.n	800586a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	441a      	add	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057be:	f7ff fe21 	bl	8005404 <xTimerGenericCommand>
 80057c2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d14f      	bne.n	800586a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	61bb      	str	r3, [r7, #24]
    }
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e6:	f023 0301 	bic.w	r3, r3, #1
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80057f2:	e03a      	b.n	800586a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	617b      	str	r3, [r7, #20]
    }
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	18d1      	adds	r1, r2, r3
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005838:	f7ff ff22 	bl	8005680 <prvInsertTimerInActiveList>
                        break;
 800583c:	e015      	b.n	800586a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800584c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800584e:	f000 fc0d 	bl	800606c <vPortFree>
 8005852:	e00a      	b.n	800586a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005866:	e000      	b.n	800586a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005868:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <prvProcessReceivedCommands+0x188>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f107 0108 	add.w	r1, r7, #8
 8005872:	2200      	movs	r2, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe fce5 	bl	8004244 <xQueueReceive>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	f47f af45 	bne.w	800570c <prvProcessReceivedCommands+0x8>
        }
    }
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	3728      	adds	r7, #40	; 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200001d0 	.word	0x200001d0

08005890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005896:	e048      	b.n	800592a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <prvSwitchTimerLists+0xc0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a2:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <prvSwitchTimerLists+0xc0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe f92f 	bl	8003b14 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02e      	beq.n	800592a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d90e      	bls.n	80058fc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ea:	4b19      	ldr	r3, [pc, #100]	; (8005950 <prvSwitchTimerLists+0xc0>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f7fe f8d4 	bl	8003aa2 <vListInsert>
 80058fa:	e016      	b.n	800592a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	2300      	movs	r3, #0
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	2100      	movs	r1, #0
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff fd7c 	bl	8005404 <xTimerGenericCommand>
 800590c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	603b      	str	r3, [r7, #0]
    }
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <prvSwitchTimerLists+0xc0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1b1      	bne.n	8005898 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <prvSwitchTimerLists+0xc0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <prvSwitchTimerLists+0xc4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a04      	ldr	r2, [pc, #16]	; (8005950 <prvSwitchTimerLists+0xc0>)
 8005940:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005942:	4a04      	ldr	r2, [pc, #16]	; (8005954 <prvSwitchTimerLists+0xc4>)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	6013      	str	r3, [r2, #0]
    }
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200001c8 	.word	0x200001c8
 8005954:	200001cc 	.word	0x200001cc

08005958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800595c:	f000 f984 	bl	8005c68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005960:	4b12      	ldr	r3, [pc, #72]	; (80059ac <prvCheckForValidListAndQueue+0x54>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11d      	bne.n	80059a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005968:	4811      	ldr	r0, [pc, #68]	; (80059b0 <prvCheckForValidListAndQueue+0x58>)
 800596a:	f7fe f849 	bl	8003a00 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800596e:	4811      	ldr	r0, [pc, #68]	; (80059b4 <prvCheckForValidListAndQueue+0x5c>)
 8005970:	f7fe f846 	bl	8003a00 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <prvCheckForValidListAndQueue+0x60>)
 8005976:	4a0e      	ldr	r2, [pc, #56]	; (80059b0 <prvCheckForValidListAndQueue+0x58>)
 8005978:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <prvCheckForValidListAndQueue+0x64>)
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <prvCheckForValidListAndQueue+0x5c>)
 800597e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005980:	2200      	movs	r2, #0
 8005982:	210c      	movs	r1, #12
 8005984:	200a      	movs	r0, #10
 8005986:	f7fe fa33 	bl	8003df0 <xQueueGenericCreate>
 800598a:	4603      	mov	r3, r0
 800598c:	4a07      	ldr	r2, [pc, #28]	; (80059ac <prvCheckForValidListAndQueue+0x54>)
 800598e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <prvCheckForValidListAndQueue+0x54>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <prvCheckForValidListAndQueue+0x54>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4908      	ldr	r1, [pc, #32]	; (80059c0 <prvCheckForValidListAndQueue+0x68>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe fe40 	bl	8004624 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80059a4:	f000 f990 	bl	8005cc8 <vPortExitCritical>
    }
 80059a8:	bf00      	nop
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	200001d0 	.word	0x200001d0
 80059b0:	200001a0 	.word	0x200001a0
 80059b4:	200001b4 	.word	0x200001b4
 80059b8:	200001c8 	.word	0x200001c8
 80059bc:	200001cc 	.word	0x200001cc
 80059c0:	08007b7c 	.word	0x08007b7c

080059c4 <Vector_each>:
 *      Author: HSNL
 */
#include <treadmill/vector.h>

void Vector_each(Object* vector, Vector_iter iter)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  Tm_DArray *array = OBJ2ARY(vector);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	613b      	str	r3, [r7, #16]
  int count = Tm_DArray_count(array);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]

  for(int i=0; i<count; i++) {
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e00b      	b.n	80059f8 <Vector_each+0x34>
    iter((Object* )Tm_DArray_at(array, i));
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4610      	mov	r0, r2
 80059f0:	4798      	blx	r3
  for(int i=0; i<count; i++) {
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	3301      	adds	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	dbef      	blt.n	80059e0 <Vector_each+0x1c>
  }
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 0201 	bic.w	r2, r3, #1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005a3c:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <pxPortInitialiseStack+0x64>)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b14      	subs	r3, #20
 8005a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f06f 0202 	mvn.w	r2, #2
 8005a5a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3b20      	subs	r3, #32
 8005a60:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005a62:	68fb      	ldr	r3, [r7, #12]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	08005a75 	.word	0x08005a75

08005a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvTaskExitError+0x54>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d00a      	beq.n	8005a9e <prvTaskExitError+0x2a>
        __asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
    }
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <prvTaskExitError+0x28>
        __asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60bb      	str	r3, [r7, #8]
    }
 8005ab0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005ab2:	bf00      	nop
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0fc      	beq.n	8005ab4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000010 	.word	0x20000010
 8005acc:	00000000 	.word	0x00000000

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005af8:	4808      	ldr	r0, [pc, #32]	; (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
 8005b1a:	0000      	.short	0x0000
 8005b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop

08005b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b2a:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <xPortStartScheduler+0x120>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a46      	ldr	r2, [pc, #280]	; (8005c48 <xPortStartScheduler+0x124>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10a      	bne.n	8005b4a <xPortStartScheduler+0x26>
        __asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	613b      	str	r3, [r7, #16]
    }
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b4a:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <xPortStartScheduler+0x120>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3f      	ldr	r2, [pc, #252]	; (8005c4c <xPortStartScheduler+0x128>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10a      	bne.n	8005b6a <xPortStartScheduler+0x46>
        __asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60fb      	str	r3, [r7, #12]
    }
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <xPortStartScheduler+0x12c>)
 8005b6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <xPortStartScheduler+0x130>)
 8005b90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b92:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <xPortStartScheduler+0x134>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b98:	e009      	b.n	8005bae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <xPortStartScheduler+0x134>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <xPortStartScheduler+0x134>)
 8005ba2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d0ef      	beq.n	8005b9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bba:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <xPortStartScheduler+0x134>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1c3 0307 	rsb	r3, r3, #7
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d00a      	beq.n	8005bdc <xPortStartScheduler+0xb8>
        __asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60bb      	str	r3, [r7, #8]
    }
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <xPortStartScheduler+0x134>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <xPortStartScheduler+0x134>)
 8005be4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <xPortStartScheduler+0x134>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bee:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <xPortStartScheduler+0x134>)
 8005bf0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005bfa:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <xPortStartScheduler+0x138>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <xPortStartScheduler+0x138>)
 8005c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <xPortStartScheduler+0x138>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <xPortStartScheduler+0x138>)
 8005c0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005c12:	f000 f8db 	bl	8005dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005c16:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <xPortStartScheduler+0x13c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005c1c:	f000 f8fa 	bl	8005e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <xPortStartScheduler+0x140>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <xPortStartScheduler+0x140>)
 8005c26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005c2c:	f7ff ff64 	bl	8005af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005c30:	f7ff f870 	bl	8004d14 <vTaskSwitchContext>
    prvTaskExitError();
 8005c34:	f7ff ff1e 	bl	8005a74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	410fc271 	.word	0x410fc271
 8005c4c:	410fc270 	.word	0x410fc270
 8005c50:	e000e400 	.word	0xe000e400
 8005c54:	200001dc 	.word	0x200001dc
 8005c58:	200001e0 	.word	0x200001e0
 8005c5c:	e000ed20 	.word	0xe000ed20
 8005c60:	20000010 	.word	0x20000010
 8005c64:	e000ef34 	.word	0xe000ef34

08005c68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
    }
 8005c80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <vPortEnterCritical+0x58>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <vPortEnterCritical+0x58>)
 8005c8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <vPortEnterCritical+0x58>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10f      	bne.n	8005cb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortEnterCritical+0x5c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	603b      	str	r3, [r7, #0]
    }
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <vPortEnterCritical+0x4a>
    }
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000010 	.word	0x20000010
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <vPortExitCritical+0x50>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <vPortExitCritical+0x24>
        __asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	607b      	str	r3, [r7, #4]
    }
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <vPortExitCritical+0x50>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <vPortExitCritical+0x50>)
 8005cf4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005cf6:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <vPortExitCritical+0x50>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d105      	bne.n	8005d0a <vPortExitCritical+0x42>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f383 8811 	msr	BASEPRI, r3
    }
 8005d08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000010 	.word	0x20000010
 8005d1c:	00000000 	.word	0x00000000

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7fe ffe0 	bl	8004d14 <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
    }
 8005da0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7fe feff 	bl	8004ba4 <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <SysTick_Handler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
    }
 8005dbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <vPortSetupTimerInterrupt+0x44>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010
 8005e04:	e000e018 	.word	0xe000e018
 8005e08:	20000000 	.word	0x20000000
 8005e0c:	10624dd3 	.word	0x10624dd3
 8005e10:	e000e014 	.word	0xe000e014

08005e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e24 <vPortEnableVFP+0x10>
 8005e18:	6801      	ldr	r1, [r0, #0]
 8005e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e1e:	6001      	str	r1, [r0, #0]
 8005e20:	4770      	bx	lr
 8005e22:	0000      	.short	0x0000
 8005e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop

08005e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005e32:	f3ef 8305 	mrs	r3, IPSR
 8005e36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b0f      	cmp	r3, #15
 8005e3c:	d914      	bls.n	8005e68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e3e:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <vPortValidateInterruptPriority+0x70>)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <vPortValidateInterruptPriority+0x74>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	7afa      	ldrb	r2, [r7, #11]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d20a      	bcs.n	8005e68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	607b      	str	r3, [r7, #4]
    }
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e68:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <vPortValidateInterruptPriority+0x78>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <vPortValidateInterruptPriority+0x7c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d90a      	bls.n	8005e8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	603b      	str	r3, [r7, #0]
    }
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <vPortValidateInterruptPriority+0x60>
    }
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000e3f0 	.word	0xe000e3f0
 8005ea0:	200001dc 	.word	0x200001dc
 8005ea4:	e000ed0c 	.word	0xe000ed0c
 8005ea8:	200001e0 	.word	0x200001e0

08005eac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005eb8:	f7fe fdba 	bl	8004a30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005ebc:	4b65      	ldr	r3, [pc, #404]	; (8006054 <pvPortMalloc+0x1a8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005ec4:	f000 f934 	bl	8006130 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ec8:	4b63      	ldr	r3, [pc, #396]	; (8006058 <pvPortMalloc+0x1ac>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 80a7 	bne.w	8006024 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d02d      	beq.n	8005f38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005edc:	2208      	movs	r2, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d227      	bcs.n	8005f38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005ee8:	2208      	movs	r2, #8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d021      	beq.n	8005f3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f023 0307 	bic.w	r3, r3, #7
 8005f00:	3308      	adds	r3, #8
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d214      	bcs.n	8005f32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	3308      	adds	r3, #8
 8005f10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d010      	beq.n	8005f3e <pvPortMalloc+0x92>
        __asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	617b      	str	r3, [r7, #20]
    }
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f36:	e002      	b.n	8005f3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e000      	b.n	8005f40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d06e      	beq.n	8006024 <pvPortMalloc+0x178>
 8005f46:	4b45      	ldr	r3, [pc, #276]	; (800605c <pvPortMalloc+0x1b0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d869      	bhi.n	8006024 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005f50:	4b43      	ldr	r3, [pc, #268]	; (8006060 <pvPortMalloc+0x1b4>)
 8005f52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005f54:	4b42      	ldr	r3, [pc, #264]	; (8006060 <pvPortMalloc+0x1b4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5a:	e004      	b.n	8005f66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d903      	bls.n	8005f78 <pvPortMalloc+0xcc>
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f1      	bne.n	8005f5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005f78:	4b36      	ldr	r3, [pc, #216]	; (8006054 <pvPortMalloc+0x1a8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d050      	beq.n	8006024 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2208      	movs	r2, #8
 8005f88:	4413      	add	r3, r2
 8005f8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	2308      	movs	r3, #8
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d91f      	bls.n	8005fe4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <pvPortMalloc+0x120>
        __asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	613b      	str	r3, [r7, #16]
    }
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	1ad2      	subs	r2, r2, r3
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fde:	69b8      	ldr	r0, [r7, #24]
 8005fe0:	f000 f908 	bl	80061f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <pvPortMalloc+0x1b0>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	4a1b      	ldr	r2, [pc, #108]	; (800605c <pvPortMalloc+0x1b0>)
 8005ff0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <pvPortMalloc+0x1b0>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <pvPortMalloc+0x1b8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d203      	bcs.n	8006006 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ffe:	4b17      	ldr	r3, [pc, #92]	; (800605c <pvPortMalloc+0x1b0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a18      	ldr	r2, [pc, #96]	; (8006064 <pvPortMalloc+0x1b8>)
 8006004:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <pvPortMalloc+0x1ac>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	431a      	orrs	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <pvPortMalloc+0x1bc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	4a11      	ldr	r2, [pc, #68]	; (8006068 <pvPortMalloc+0x1bc>)
 8006022:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006024:	f7fe fd12 	bl	8004a4c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <pvPortMalloc+0x19c>
        __asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60fb      	str	r3, [r7, #12]
    }
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <pvPortMalloc+0x19a>
    return pvReturn;
 8006048:	69fb      	ldr	r3, [r7, #28]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20012dec 	.word	0x20012dec
 8006058:	20012e00 	.word	0x20012e00
 800605c:	20012df0 	.word	0x20012df0
 8006060:	20012de4 	.word	0x20012de4
 8006064:	20012df4 	.word	0x20012df4
 8006068:	20012df8 	.word	0x20012df8

0800606c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d04d      	beq.n	800611a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800607e:	2308      	movs	r3, #8
 8006080:	425b      	negs	r3, r3
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4413      	add	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	4b24      	ldr	r3, [pc, #144]	; (8006124 <vPortFree+0xb8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <vPortFree+0x44>
        __asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	60fb      	str	r3, [r7, #12]
    }
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <vPortFree+0x62>
        __asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	60bb      	str	r3, [r7, #8]
    }
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <vPortFree+0xb8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01e      	beq.n	800611a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11a      	bne.n	800611a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <vPortFree+0xb8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	401a      	ands	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80060f4:	f7fe fc9c 	bl	8004a30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <vPortFree+0xbc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4413      	add	r3, r2
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <vPortFree+0xbc>)
 8006104:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f000 f874 	bl	80061f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <vPortFree+0xc0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a06      	ldr	r2, [pc, #24]	; (800612c <vPortFree+0xc0>)
 8006114:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006116:	f7fe fc99 	bl	8004a4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20012e00 	.word	0x20012e00
 8006128:	20012df0 	.word	0x20012df0
 800612c:	20012dfc 	.word	0x20012dfc

08006130 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006136:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800613a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <prvHeapInit+0xac>)
 800613e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3307      	adds	r3, #7
 800614e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0307 	bic.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <prvHeapInit+0xac>)
 8006160:	4413      	add	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006168:	4a1d      	ldr	r2, [pc, #116]	; (80061e0 <prvHeapInit+0xb0>)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <prvHeapInit+0xb0>)
 8006170:	2200      	movs	r2, #0
 8006172:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800617c:	2208      	movs	r2, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <prvHeapInit+0xb4>)
 8006190:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <prvHeapInit+0xb4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <prvHeapInit+0xb4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <prvHeapInit+0xb4>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4a0a      	ldr	r2, [pc, #40]	; (80061e8 <prvHeapInit+0xb8>)
 80061be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4a09      	ldr	r2, [pc, #36]	; (80061ec <prvHeapInit+0xbc>)
 80061c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <prvHeapInit+0xc0>)
 80061ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061ce:	601a      	str	r2, [r3, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	200001e4 	.word	0x200001e4
 80061e0:	20012de4 	.word	0x20012de4
 80061e4:	20012dec 	.word	0x20012dec
 80061e8:	20012df4 	.word	0x20012df4
 80061ec:	20012df0 	.word	0x20012df0
 80061f0:	20012e00 	.word	0x20012e00

080061f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061fc:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <prvInsertBlockIntoFreeList+0xac>)
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e002      	b.n	8006208 <prvInsertBlockIntoFreeList+0x14>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d8f7      	bhi.n	8006202 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d108      	bne.n	8006236 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d118      	bne.n	800627c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d00d      	beq.n	8006272 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e008      	b.n	8006284 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e003      	b.n	8006284 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d002      	beq.n	8006292 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20012de4 	.word	0x20012de4
 80062a4:	20012dec 	.word	0x20012dec

080062a8 <calloc>:
 80062a8:	4b02      	ldr	r3, [pc, #8]	; (80062b4 <calloc+0xc>)
 80062aa:	460a      	mov	r2, r1
 80062ac:	4601      	mov	r1, r0
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	f000 b878 	b.w	80063a4 <_calloc_r>
 80062b4:	20000014 	.word	0x20000014

080062b8 <__errno>:
 80062b8:	4b01      	ldr	r3, [pc, #4]	; (80062c0 <__errno+0x8>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000014 	.word	0x20000014

080062c4 <exit>:
 80062c4:	b508      	push	{r3, lr}
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <exit+0x20>)
 80062c8:	4604      	mov	r4, r0
 80062ca:	b113      	cbz	r3, 80062d2 <exit+0xe>
 80062cc:	2100      	movs	r1, #0
 80062ce:	f3af 8000 	nop.w
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <exit+0x24>)
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062d8:	b103      	cbz	r3, 80062dc <exit+0x18>
 80062da:	4798      	blx	r3
 80062dc:	4620      	mov	r0, r4
 80062de:	f7fa fe69 	bl	8000fb4 <_exit>
 80062e2:	bf00      	nop
 80062e4:	00000000 	.word	0x00000000
 80062e8:	08007b9c 	.word	0x08007b9c

080062ec <fiprintf>:
 80062ec:	b40e      	push	{r1, r2, r3}
 80062ee:	b503      	push	{r0, r1, lr}
 80062f0:	4601      	mov	r1, r0
 80062f2:	ab03      	add	r3, sp, #12
 80062f4:	4805      	ldr	r0, [pc, #20]	; (800630c <fiprintf+0x20>)
 80062f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	f000 f935 	bl	800656c <_vfiprintf_r>
 8006302:	b002      	add	sp, #8
 8006304:	f85d eb04 	ldr.w	lr, [sp], #4
 8006308:	b003      	add	sp, #12
 800630a:	4770      	bx	lr
 800630c:	20000014 	.word	0x20000014

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4d0d      	ldr	r5, [pc, #52]	; (8006348 <__libc_init_array+0x38>)
 8006314:	4c0d      	ldr	r4, [pc, #52]	; (800634c <__libc_init_array+0x3c>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	2600      	movs	r6, #0
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	4d0b      	ldr	r5, [pc, #44]	; (8006350 <__libc_init_array+0x40>)
 8006322:	4c0c      	ldr	r4, [pc, #48]	; (8006354 <__libc_init_array+0x44>)
 8006324:	f001 f9cc 	bl	80076c0 <_init>
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	2600      	movs	r6, #0
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	080082d4 	.word	0x080082d4
 800634c:	080082d4 	.word	0x080082d4
 8006350:	080082d4 	.word	0x080082d4
 8006354:	080082d8 	.word	0x080082d8

08006358 <malloc>:
 8006358:	4b02      	ldr	r3, [pc, #8]	; (8006364 <malloc+0xc>)
 800635a:	4601      	mov	r1, r0
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f000 b881 	b.w	8006464 <_malloc_r>
 8006362:	bf00      	nop
 8006364:	20000014 	.word	0x20000014

08006368 <free>:
 8006368:	4b02      	ldr	r3, [pc, #8]	; (8006374 <free+0xc>)
 800636a:	4601      	mov	r1, r0
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f000 b829 	b.w	80063c4 <_free_r>
 8006372:	bf00      	nop
 8006374:	20000014 	.word	0x20000014

08006378 <memcpy>:
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006380:	d100      	bne.n	8006384 <memcpy+0xc>
 8006382:	4770      	bx	lr
 8006384:	b510      	push	{r4, lr}
 8006386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800638e:	4291      	cmp	r1, r2
 8006390:	d1f9      	bne.n	8006386 <memcpy+0xe>
 8006392:	bd10      	pop	{r4, pc}

08006394 <memset>:
 8006394:	4402      	add	r2, r0
 8006396:	4603      	mov	r3, r0
 8006398:	4293      	cmp	r3, r2
 800639a:	d100      	bne.n	800639e <memset+0xa>
 800639c:	4770      	bx	lr
 800639e:	f803 1b01 	strb.w	r1, [r3], #1
 80063a2:	e7f9      	b.n	8006398 <memset+0x4>

080063a4 <_calloc_r>:
 80063a4:	b513      	push	{r0, r1, r4, lr}
 80063a6:	434a      	muls	r2, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	9201      	str	r2, [sp, #4]
 80063ac:	f000 f85a 	bl	8006464 <_malloc_r>
 80063b0:	4604      	mov	r4, r0
 80063b2:	b118      	cbz	r0, 80063bc <_calloc_r+0x18>
 80063b4:	9a01      	ldr	r2, [sp, #4]
 80063b6:	2100      	movs	r1, #0
 80063b8:	f7ff ffec 	bl	8006394 <memset>
 80063bc:	4620      	mov	r0, r4
 80063be:	b002      	add	sp, #8
 80063c0:	bd10      	pop	{r4, pc}
	...

080063c4 <_free_r>:
 80063c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d048      	beq.n	800645c <_free_r+0x98>
 80063ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f1a1 0404 	sub.w	r4, r1, #4
 80063d6:	bfb8      	it	lt
 80063d8:	18e4      	addlt	r4, r4, r3
 80063da:	f001 f88b 	bl	80074f4 <__malloc_lock>
 80063de:	4a20      	ldr	r2, [pc, #128]	; (8006460 <_free_r+0x9c>)
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	4615      	mov	r5, r2
 80063e6:	b933      	cbnz	r3, 80063f6 <_free_r+0x32>
 80063e8:	6063      	str	r3, [r4, #4]
 80063ea:	6014      	str	r4, [r2, #0]
 80063ec:	b003      	add	sp, #12
 80063ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f2:	f001 b885 	b.w	8007500 <__malloc_unlock>
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d90b      	bls.n	8006412 <_free_r+0x4e>
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	1862      	adds	r2, r4, r1
 80063fe:	4293      	cmp	r3, r2
 8006400:	bf04      	itt	eq
 8006402:	681a      	ldreq	r2, [r3, #0]
 8006404:	685b      	ldreq	r3, [r3, #4]
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	bf04      	itt	eq
 800640a:	1852      	addeq	r2, r2, r1
 800640c:	6022      	streq	r2, [r4, #0]
 800640e:	602c      	str	r4, [r5, #0]
 8006410:	e7ec      	b.n	80063ec <_free_r+0x28>
 8006412:	461a      	mov	r2, r3
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	b10b      	cbz	r3, 800641c <_free_r+0x58>
 8006418:	42a3      	cmp	r3, r4
 800641a:	d9fa      	bls.n	8006412 <_free_r+0x4e>
 800641c:	6811      	ldr	r1, [r2, #0]
 800641e:	1855      	adds	r5, r2, r1
 8006420:	42a5      	cmp	r5, r4
 8006422:	d10b      	bne.n	800643c <_free_r+0x78>
 8006424:	6824      	ldr	r4, [r4, #0]
 8006426:	4421      	add	r1, r4
 8006428:	1854      	adds	r4, r2, r1
 800642a:	42a3      	cmp	r3, r4
 800642c:	6011      	str	r1, [r2, #0]
 800642e:	d1dd      	bne.n	80063ec <_free_r+0x28>
 8006430:	681c      	ldr	r4, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	6053      	str	r3, [r2, #4]
 8006436:	4421      	add	r1, r4
 8006438:	6011      	str	r1, [r2, #0]
 800643a:	e7d7      	b.n	80063ec <_free_r+0x28>
 800643c:	d902      	bls.n	8006444 <_free_r+0x80>
 800643e:	230c      	movs	r3, #12
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	e7d3      	b.n	80063ec <_free_r+0x28>
 8006444:	6825      	ldr	r5, [r4, #0]
 8006446:	1961      	adds	r1, r4, r5
 8006448:	428b      	cmp	r3, r1
 800644a:	bf04      	itt	eq
 800644c:	6819      	ldreq	r1, [r3, #0]
 800644e:	685b      	ldreq	r3, [r3, #4]
 8006450:	6063      	str	r3, [r4, #4]
 8006452:	bf04      	itt	eq
 8006454:	1949      	addeq	r1, r1, r5
 8006456:	6021      	streq	r1, [r4, #0]
 8006458:	6054      	str	r4, [r2, #4]
 800645a:	e7c7      	b.n	80063ec <_free_r+0x28>
 800645c:	b003      	add	sp, #12
 800645e:	bd30      	pop	{r4, r5, pc}
 8006460:	20012e04 	.word	0x20012e04

08006464 <_malloc_r>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	1ccd      	adds	r5, r1, #3
 8006468:	f025 0503 	bic.w	r5, r5, #3
 800646c:	3508      	adds	r5, #8
 800646e:	2d0c      	cmp	r5, #12
 8006470:	bf38      	it	cc
 8006472:	250c      	movcc	r5, #12
 8006474:	2d00      	cmp	r5, #0
 8006476:	4606      	mov	r6, r0
 8006478:	db01      	blt.n	800647e <_malloc_r+0x1a>
 800647a:	42a9      	cmp	r1, r5
 800647c:	d903      	bls.n	8006486 <_malloc_r+0x22>
 800647e:	230c      	movs	r3, #12
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	2000      	movs	r0, #0
 8006484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006486:	f001 f835 	bl	80074f4 <__malloc_lock>
 800648a:	4921      	ldr	r1, [pc, #132]	; (8006510 <_malloc_r+0xac>)
 800648c:	680a      	ldr	r2, [r1, #0]
 800648e:	4614      	mov	r4, r2
 8006490:	b99c      	cbnz	r4, 80064ba <_malloc_r+0x56>
 8006492:	4f20      	ldr	r7, [pc, #128]	; (8006514 <_malloc_r+0xb0>)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	b923      	cbnz	r3, 80064a2 <_malloc_r+0x3e>
 8006498:	4621      	mov	r1, r4
 800649a:	4630      	mov	r0, r6
 800649c:	f000 fb4a 	bl	8006b34 <_sbrk_r>
 80064a0:	6038      	str	r0, [r7, #0]
 80064a2:	4629      	mov	r1, r5
 80064a4:	4630      	mov	r0, r6
 80064a6:	f000 fb45 	bl	8006b34 <_sbrk_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d123      	bne.n	80064f6 <_malloc_r+0x92>
 80064ae:	230c      	movs	r3, #12
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	4630      	mov	r0, r6
 80064b4:	f001 f824 	bl	8007500 <__malloc_unlock>
 80064b8:	e7e3      	b.n	8006482 <_malloc_r+0x1e>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	1b5b      	subs	r3, r3, r5
 80064be:	d417      	bmi.n	80064f0 <_malloc_r+0x8c>
 80064c0:	2b0b      	cmp	r3, #11
 80064c2:	d903      	bls.n	80064cc <_malloc_r+0x68>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	441c      	add	r4, r3
 80064c8:	6025      	str	r5, [r4, #0]
 80064ca:	e004      	b.n	80064d6 <_malloc_r+0x72>
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	42a2      	cmp	r2, r4
 80064d0:	bf0c      	ite	eq
 80064d2:	600b      	streq	r3, [r1, #0]
 80064d4:	6053      	strne	r3, [r2, #4]
 80064d6:	4630      	mov	r0, r6
 80064d8:	f001 f812 	bl	8007500 <__malloc_unlock>
 80064dc:	f104 000b 	add.w	r0, r4, #11
 80064e0:	1d23      	adds	r3, r4, #4
 80064e2:	f020 0007 	bic.w	r0, r0, #7
 80064e6:	1ac2      	subs	r2, r0, r3
 80064e8:	d0cc      	beq.n	8006484 <_malloc_r+0x20>
 80064ea:	1a1b      	subs	r3, r3, r0
 80064ec:	50a3      	str	r3, [r4, r2]
 80064ee:	e7c9      	b.n	8006484 <_malloc_r+0x20>
 80064f0:	4622      	mov	r2, r4
 80064f2:	6864      	ldr	r4, [r4, #4]
 80064f4:	e7cc      	b.n	8006490 <_malloc_r+0x2c>
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d0e3      	beq.n	80064c8 <_malloc_r+0x64>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4630      	mov	r0, r6
 8006504:	f000 fb16 	bl	8006b34 <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d1dd      	bne.n	80064c8 <_malloc_r+0x64>
 800650c:	e7cf      	b.n	80064ae <_malloc_r+0x4a>
 800650e:	bf00      	nop
 8006510:	20012e04 	.word	0x20012e04
 8006514:	20012e08 	.word	0x20012e08

08006518 <__sfputc_r>:
 8006518:	6893      	ldr	r3, [r2, #8]
 800651a:	3b01      	subs	r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	b410      	push	{r4}
 8006520:	6093      	str	r3, [r2, #8]
 8006522:	da08      	bge.n	8006536 <__sfputc_r+0x1e>
 8006524:	6994      	ldr	r4, [r2, #24]
 8006526:	42a3      	cmp	r3, r4
 8006528:	db01      	blt.n	800652e <__sfputc_r+0x16>
 800652a:	290a      	cmp	r1, #10
 800652c:	d103      	bne.n	8006536 <__sfputc_r+0x1e>
 800652e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006532:	f000 bd01 	b.w	8006f38 <__swbuf_r>
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	1c58      	adds	r0, r3, #1
 800653a:	6010      	str	r0, [r2, #0]
 800653c:	7019      	strb	r1, [r3, #0]
 800653e:	4608      	mov	r0, r1
 8006540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006544:	4770      	bx	lr

08006546 <__sfputs_r>:
 8006546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006548:	4606      	mov	r6, r0
 800654a:	460f      	mov	r7, r1
 800654c:	4614      	mov	r4, r2
 800654e:	18d5      	adds	r5, r2, r3
 8006550:	42ac      	cmp	r4, r5
 8006552:	d101      	bne.n	8006558 <__sfputs_r+0x12>
 8006554:	2000      	movs	r0, #0
 8006556:	e007      	b.n	8006568 <__sfputs_r+0x22>
 8006558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800655c:	463a      	mov	r2, r7
 800655e:	4630      	mov	r0, r6
 8006560:	f7ff ffda 	bl	8006518 <__sfputc_r>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d1f3      	bne.n	8006550 <__sfputs_r+0xa>
 8006568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800656c <_vfiprintf_r>:
 800656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006570:	460d      	mov	r5, r1
 8006572:	b09d      	sub	sp, #116	; 0x74
 8006574:	4614      	mov	r4, r2
 8006576:	4698      	mov	r8, r3
 8006578:	4606      	mov	r6, r0
 800657a:	b118      	cbz	r0, 8006584 <_vfiprintf_r+0x18>
 800657c:	6983      	ldr	r3, [r0, #24]
 800657e:	b90b      	cbnz	r3, 8006584 <_vfiprintf_r+0x18>
 8006580:	f000 feb4 	bl	80072ec <__sinit>
 8006584:	4b89      	ldr	r3, [pc, #548]	; (80067ac <_vfiprintf_r+0x240>)
 8006586:	429d      	cmp	r5, r3
 8006588:	d11b      	bne.n	80065c2 <_vfiprintf_r+0x56>
 800658a:	6875      	ldr	r5, [r6, #4]
 800658c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800658e:	07d9      	lsls	r1, r3, #31
 8006590:	d405      	bmi.n	800659e <_vfiprintf_r+0x32>
 8006592:	89ab      	ldrh	r3, [r5, #12]
 8006594:	059a      	lsls	r2, r3, #22
 8006596:	d402      	bmi.n	800659e <_vfiprintf_r+0x32>
 8006598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800659a:	f000 ff45 	bl	8007428 <__retarget_lock_acquire_recursive>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	071b      	lsls	r3, r3, #28
 80065a2:	d501      	bpl.n	80065a8 <_vfiprintf_r+0x3c>
 80065a4:	692b      	ldr	r3, [r5, #16]
 80065a6:	b9eb      	cbnz	r3, 80065e4 <_vfiprintf_r+0x78>
 80065a8:	4629      	mov	r1, r5
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 fd16 	bl	8006fdc <__swsetup_r>
 80065b0:	b1c0      	cbz	r0, 80065e4 <_vfiprintf_r+0x78>
 80065b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b4:	07dc      	lsls	r4, r3, #31
 80065b6:	d50e      	bpl.n	80065d6 <_vfiprintf_r+0x6a>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	b01d      	add	sp, #116	; 0x74
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	4b7b      	ldr	r3, [pc, #492]	; (80067b0 <_vfiprintf_r+0x244>)
 80065c4:	429d      	cmp	r5, r3
 80065c6:	d101      	bne.n	80065cc <_vfiprintf_r+0x60>
 80065c8:	68b5      	ldr	r5, [r6, #8]
 80065ca:	e7df      	b.n	800658c <_vfiprintf_r+0x20>
 80065cc:	4b79      	ldr	r3, [pc, #484]	; (80067b4 <_vfiprintf_r+0x248>)
 80065ce:	429d      	cmp	r5, r3
 80065d0:	bf08      	it	eq
 80065d2:	68f5      	ldreq	r5, [r6, #12]
 80065d4:	e7da      	b.n	800658c <_vfiprintf_r+0x20>
 80065d6:	89ab      	ldrh	r3, [r5, #12]
 80065d8:	0598      	lsls	r0, r3, #22
 80065da:	d4ed      	bmi.n	80065b8 <_vfiprintf_r+0x4c>
 80065dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065de:	f000 ff24 	bl	800742a <__retarget_lock_release_recursive>
 80065e2:	e7e9      	b.n	80065b8 <_vfiprintf_r+0x4c>
 80065e4:	2300      	movs	r3, #0
 80065e6:	9309      	str	r3, [sp, #36]	; 0x24
 80065e8:	2320      	movs	r3, #32
 80065ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80065f2:	2330      	movs	r3, #48	; 0x30
 80065f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067b8 <_vfiprintf_r+0x24c>
 80065f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065fc:	f04f 0901 	mov.w	r9, #1
 8006600:	4623      	mov	r3, r4
 8006602:	469a      	mov	sl, r3
 8006604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006608:	b10a      	cbz	r2, 800660e <_vfiprintf_r+0xa2>
 800660a:	2a25      	cmp	r2, #37	; 0x25
 800660c:	d1f9      	bne.n	8006602 <_vfiprintf_r+0x96>
 800660e:	ebba 0b04 	subs.w	fp, sl, r4
 8006612:	d00b      	beq.n	800662c <_vfiprintf_r+0xc0>
 8006614:	465b      	mov	r3, fp
 8006616:	4622      	mov	r2, r4
 8006618:	4629      	mov	r1, r5
 800661a:	4630      	mov	r0, r6
 800661c:	f7ff ff93 	bl	8006546 <__sfputs_r>
 8006620:	3001      	adds	r0, #1
 8006622:	f000 80aa 	beq.w	800677a <_vfiprintf_r+0x20e>
 8006626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006628:	445a      	add	r2, fp
 800662a:	9209      	str	r2, [sp, #36]	; 0x24
 800662c:	f89a 3000 	ldrb.w	r3, [sl]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80a2 	beq.w	800677a <_vfiprintf_r+0x20e>
 8006636:	2300      	movs	r3, #0
 8006638:	f04f 32ff 	mov.w	r2, #4294967295
 800663c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006640:	f10a 0a01 	add.w	sl, sl, #1
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800664c:	931a      	str	r3, [sp, #104]	; 0x68
 800664e:	4654      	mov	r4, sl
 8006650:	2205      	movs	r2, #5
 8006652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006656:	4858      	ldr	r0, [pc, #352]	; (80067b8 <_vfiprintf_r+0x24c>)
 8006658:	f7f9 fdba 	bl	80001d0 <memchr>
 800665c:	9a04      	ldr	r2, [sp, #16]
 800665e:	b9d8      	cbnz	r0, 8006698 <_vfiprintf_r+0x12c>
 8006660:	06d1      	lsls	r1, r2, #27
 8006662:	bf44      	itt	mi
 8006664:	2320      	movmi	r3, #32
 8006666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800666a:	0713      	lsls	r3, r2, #28
 800666c:	bf44      	itt	mi
 800666e:	232b      	movmi	r3, #43	; 0x2b
 8006670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006674:	f89a 3000 	ldrb.w	r3, [sl]
 8006678:	2b2a      	cmp	r3, #42	; 0x2a
 800667a:	d015      	beq.n	80066a8 <_vfiprintf_r+0x13c>
 800667c:	9a07      	ldr	r2, [sp, #28]
 800667e:	4654      	mov	r4, sl
 8006680:	2000      	movs	r0, #0
 8006682:	f04f 0c0a 	mov.w	ip, #10
 8006686:	4621      	mov	r1, r4
 8006688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800668c:	3b30      	subs	r3, #48	; 0x30
 800668e:	2b09      	cmp	r3, #9
 8006690:	d94e      	bls.n	8006730 <_vfiprintf_r+0x1c4>
 8006692:	b1b0      	cbz	r0, 80066c2 <_vfiprintf_r+0x156>
 8006694:	9207      	str	r2, [sp, #28]
 8006696:	e014      	b.n	80066c2 <_vfiprintf_r+0x156>
 8006698:	eba0 0308 	sub.w	r3, r0, r8
 800669c:	fa09 f303 	lsl.w	r3, r9, r3
 80066a0:	4313      	orrs	r3, r2
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	46a2      	mov	sl, r4
 80066a6:	e7d2      	b.n	800664e <_vfiprintf_r+0xe2>
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	1d19      	adds	r1, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	9103      	str	r1, [sp, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bfbb      	ittet	lt
 80066b4:	425b      	neglt	r3, r3
 80066b6:	f042 0202 	orrlt.w	r2, r2, #2
 80066ba:	9307      	strge	r3, [sp, #28]
 80066bc:	9307      	strlt	r3, [sp, #28]
 80066be:	bfb8      	it	lt
 80066c0:	9204      	strlt	r2, [sp, #16]
 80066c2:	7823      	ldrb	r3, [r4, #0]
 80066c4:	2b2e      	cmp	r3, #46	; 0x2e
 80066c6:	d10c      	bne.n	80066e2 <_vfiprintf_r+0x176>
 80066c8:	7863      	ldrb	r3, [r4, #1]
 80066ca:	2b2a      	cmp	r3, #42	; 0x2a
 80066cc:	d135      	bne.n	800673a <_vfiprintf_r+0x1ce>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	1d1a      	adds	r2, r3, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	9203      	str	r2, [sp, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfb8      	it	lt
 80066da:	f04f 33ff 	movlt.w	r3, #4294967295
 80066de:	3402      	adds	r4, #2
 80066e0:	9305      	str	r3, [sp, #20]
 80066e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067c8 <_vfiprintf_r+0x25c>
 80066e6:	7821      	ldrb	r1, [r4, #0]
 80066e8:	2203      	movs	r2, #3
 80066ea:	4650      	mov	r0, sl
 80066ec:	f7f9 fd70 	bl	80001d0 <memchr>
 80066f0:	b140      	cbz	r0, 8006704 <_vfiprintf_r+0x198>
 80066f2:	2340      	movs	r3, #64	; 0x40
 80066f4:	eba0 000a 	sub.w	r0, r0, sl
 80066f8:	fa03 f000 	lsl.w	r0, r3, r0
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	4303      	orrs	r3, r0
 8006700:	3401      	adds	r4, #1
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006708:	482c      	ldr	r0, [pc, #176]	; (80067bc <_vfiprintf_r+0x250>)
 800670a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800670e:	2206      	movs	r2, #6
 8006710:	f7f9 fd5e 	bl	80001d0 <memchr>
 8006714:	2800      	cmp	r0, #0
 8006716:	d03f      	beq.n	8006798 <_vfiprintf_r+0x22c>
 8006718:	4b29      	ldr	r3, [pc, #164]	; (80067c0 <_vfiprintf_r+0x254>)
 800671a:	bb1b      	cbnz	r3, 8006764 <_vfiprintf_r+0x1f8>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	3307      	adds	r3, #7
 8006720:	f023 0307 	bic.w	r3, r3, #7
 8006724:	3308      	adds	r3, #8
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672a:	443b      	add	r3, r7
 800672c:	9309      	str	r3, [sp, #36]	; 0x24
 800672e:	e767      	b.n	8006600 <_vfiprintf_r+0x94>
 8006730:	fb0c 3202 	mla	r2, ip, r2, r3
 8006734:	460c      	mov	r4, r1
 8006736:	2001      	movs	r0, #1
 8006738:	e7a5      	b.n	8006686 <_vfiprintf_r+0x11a>
 800673a:	2300      	movs	r3, #0
 800673c:	3401      	adds	r4, #1
 800673e:	9305      	str	r3, [sp, #20]
 8006740:	4619      	mov	r1, r3
 8006742:	f04f 0c0a 	mov.w	ip, #10
 8006746:	4620      	mov	r0, r4
 8006748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800674c:	3a30      	subs	r2, #48	; 0x30
 800674e:	2a09      	cmp	r2, #9
 8006750:	d903      	bls.n	800675a <_vfiprintf_r+0x1ee>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0c5      	beq.n	80066e2 <_vfiprintf_r+0x176>
 8006756:	9105      	str	r1, [sp, #20]
 8006758:	e7c3      	b.n	80066e2 <_vfiprintf_r+0x176>
 800675a:	fb0c 2101 	mla	r1, ip, r1, r2
 800675e:	4604      	mov	r4, r0
 8006760:	2301      	movs	r3, #1
 8006762:	e7f0      	b.n	8006746 <_vfiprintf_r+0x1da>
 8006764:	ab03      	add	r3, sp, #12
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	462a      	mov	r2, r5
 800676a:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <_vfiprintf_r+0x258>)
 800676c:	a904      	add	r1, sp, #16
 800676e:	4630      	mov	r0, r6
 8006770:	f3af 8000 	nop.w
 8006774:	4607      	mov	r7, r0
 8006776:	1c78      	adds	r0, r7, #1
 8006778:	d1d6      	bne.n	8006728 <_vfiprintf_r+0x1bc>
 800677a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800677c:	07d9      	lsls	r1, r3, #31
 800677e:	d405      	bmi.n	800678c <_vfiprintf_r+0x220>
 8006780:	89ab      	ldrh	r3, [r5, #12]
 8006782:	059a      	lsls	r2, r3, #22
 8006784:	d402      	bmi.n	800678c <_vfiprintf_r+0x220>
 8006786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006788:	f000 fe4f 	bl	800742a <__retarget_lock_release_recursive>
 800678c:	89ab      	ldrh	r3, [r5, #12]
 800678e:	065b      	lsls	r3, r3, #25
 8006790:	f53f af12 	bmi.w	80065b8 <_vfiprintf_r+0x4c>
 8006794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006796:	e711      	b.n	80065bc <_vfiprintf_r+0x50>
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	462a      	mov	r2, r5
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <_vfiprintf_r+0x258>)
 80067a0:	a904      	add	r1, sp, #16
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 f880 	bl	80068a8 <_printf_i>
 80067a8:	e7e4      	b.n	8006774 <_vfiprintf_r+0x208>
 80067aa:	bf00      	nop
 80067ac:	0800828c 	.word	0x0800828c
 80067b0:	080082ac 	.word	0x080082ac
 80067b4:	0800826c 	.word	0x0800826c
 80067b8:	08007ba0 	.word	0x08007ba0
 80067bc:	08007baa 	.word	0x08007baa
 80067c0:	00000000 	.word	0x00000000
 80067c4:	08006547 	.word	0x08006547
 80067c8:	08007ba6 	.word	0x08007ba6

080067cc <_printf_common>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	4616      	mov	r6, r2
 80067d2:	4699      	mov	r9, r3
 80067d4:	688a      	ldr	r2, [r1, #8]
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfb8      	it	lt
 80067e0:	4613      	movlt	r3, r2
 80067e2:	6033      	str	r3, [r6, #0]
 80067e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067e8:	4607      	mov	r7, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	b10a      	cbz	r2, 80067f2 <_printf_common+0x26>
 80067ee:	3301      	adds	r3, #1
 80067f0:	6033      	str	r3, [r6, #0]
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	0699      	lsls	r1, r3, #26
 80067f6:	bf42      	ittt	mi
 80067f8:	6833      	ldrmi	r3, [r6, #0]
 80067fa:	3302      	addmi	r3, #2
 80067fc:	6033      	strmi	r3, [r6, #0]
 80067fe:	6825      	ldr	r5, [r4, #0]
 8006800:	f015 0506 	ands.w	r5, r5, #6
 8006804:	d106      	bne.n	8006814 <_printf_common+0x48>
 8006806:	f104 0a19 	add.w	sl, r4, #25
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	6832      	ldr	r2, [r6, #0]
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	42ab      	cmp	r3, r5
 8006812:	dc26      	bgt.n	8006862 <_printf_common+0x96>
 8006814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006818:	1e13      	subs	r3, r2, #0
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	bf18      	it	ne
 800681e:	2301      	movne	r3, #1
 8006820:	0692      	lsls	r2, r2, #26
 8006822:	d42b      	bmi.n	800687c <_printf_common+0xb0>
 8006824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	47c0      	blx	r8
 800682e:	3001      	adds	r0, #1
 8006830:	d01e      	beq.n	8006870 <_printf_common+0xa4>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	68e5      	ldr	r5, [r4, #12]
 8006836:	6832      	ldr	r2, [r6, #0]
 8006838:	f003 0306 	and.w	r3, r3, #6
 800683c:	2b04      	cmp	r3, #4
 800683e:	bf08      	it	eq
 8006840:	1aad      	subeq	r5, r5, r2
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	bf0c      	ite	eq
 8006848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800684c:	2500      	movne	r5, #0
 800684e:	4293      	cmp	r3, r2
 8006850:	bfc4      	itt	gt
 8006852:	1a9b      	subgt	r3, r3, r2
 8006854:	18ed      	addgt	r5, r5, r3
 8006856:	2600      	movs	r6, #0
 8006858:	341a      	adds	r4, #26
 800685a:	42b5      	cmp	r5, r6
 800685c:	d11a      	bne.n	8006894 <_printf_common+0xc8>
 800685e:	2000      	movs	r0, #0
 8006860:	e008      	b.n	8006874 <_printf_common+0xa8>
 8006862:	2301      	movs	r3, #1
 8006864:	4652      	mov	r2, sl
 8006866:	4649      	mov	r1, r9
 8006868:	4638      	mov	r0, r7
 800686a:	47c0      	blx	r8
 800686c:	3001      	adds	r0, #1
 800686e:	d103      	bne.n	8006878 <_printf_common+0xac>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	3501      	adds	r5, #1
 800687a:	e7c6      	b.n	800680a <_printf_common+0x3e>
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	2030      	movs	r0, #48	; 0x30
 8006882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006886:	4422      	add	r2, r4
 8006888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800688c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006890:	3302      	adds	r3, #2
 8006892:	e7c7      	b.n	8006824 <_printf_common+0x58>
 8006894:	2301      	movs	r3, #1
 8006896:	4622      	mov	r2, r4
 8006898:	4649      	mov	r1, r9
 800689a:	4638      	mov	r0, r7
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d0e6      	beq.n	8006870 <_printf_common+0xa4>
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7d9      	b.n	800685a <_printf_common+0x8e>
	...

080068a8 <_printf_i>:
 80068a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	460c      	mov	r4, r1
 80068ae:	4691      	mov	r9, r2
 80068b0:	7e27      	ldrb	r7, [r4, #24]
 80068b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068b4:	2f78      	cmp	r7, #120	; 0x78
 80068b6:	4680      	mov	r8, r0
 80068b8:	469a      	mov	sl, r3
 80068ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068be:	d807      	bhi.n	80068d0 <_printf_i+0x28>
 80068c0:	2f62      	cmp	r7, #98	; 0x62
 80068c2:	d80a      	bhi.n	80068da <_printf_i+0x32>
 80068c4:	2f00      	cmp	r7, #0
 80068c6:	f000 80d8 	beq.w	8006a7a <_printf_i+0x1d2>
 80068ca:	2f58      	cmp	r7, #88	; 0x58
 80068cc:	f000 80a3 	beq.w	8006a16 <_printf_i+0x16e>
 80068d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068d8:	e03a      	b.n	8006950 <_printf_i+0xa8>
 80068da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068de:	2b15      	cmp	r3, #21
 80068e0:	d8f6      	bhi.n	80068d0 <_printf_i+0x28>
 80068e2:	a001      	add	r0, pc, #4	; (adr r0, 80068e8 <_printf_i+0x40>)
 80068e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068e8:	08006941 	.word	0x08006941
 80068ec:	08006955 	.word	0x08006955
 80068f0:	080068d1 	.word	0x080068d1
 80068f4:	080068d1 	.word	0x080068d1
 80068f8:	080068d1 	.word	0x080068d1
 80068fc:	080068d1 	.word	0x080068d1
 8006900:	08006955 	.word	0x08006955
 8006904:	080068d1 	.word	0x080068d1
 8006908:	080068d1 	.word	0x080068d1
 800690c:	080068d1 	.word	0x080068d1
 8006910:	080068d1 	.word	0x080068d1
 8006914:	08006a61 	.word	0x08006a61
 8006918:	08006985 	.word	0x08006985
 800691c:	08006a43 	.word	0x08006a43
 8006920:	080068d1 	.word	0x080068d1
 8006924:	080068d1 	.word	0x080068d1
 8006928:	08006a83 	.word	0x08006a83
 800692c:	080068d1 	.word	0x080068d1
 8006930:	08006985 	.word	0x08006985
 8006934:	080068d1 	.word	0x080068d1
 8006938:	080068d1 	.word	0x080068d1
 800693c:	08006a4b 	.word	0x08006a4b
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	600a      	str	r2, [r1, #0]
 8006948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800694c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006950:	2301      	movs	r3, #1
 8006952:	e0a3      	b.n	8006a9c <_printf_i+0x1f4>
 8006954:	6825      	ldr	r5, [r4, #0]
 8006956:	6808      	ldr	r0, [r1, #0]
 8006958:	062e      	lsls	r6, r5, #24
 800695a:	f100 0304 	add.w	r3, r0, #4
 800695e:	d50a      	bpl.n	8006976 <_printf_i+0xce>
 8006960:	6805      	ldr	r5, [r0, #0]
 8006962:	600b      	str	r3, [r1, #0]
 8006964:	2d00      	cmp	r5, #0
 8006966:	da03      	bge.n	8006970 <_printf_i+0xc8>
 8006968:	232d      	movs	r3, #45	; 0x2d
 800696a:	426d      	negs	r5, r5
 800696c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006970:	485e      	ldr	r0, [pc, #376]	; (8006aec <_printf_i+0x244>)
 8006972:	230a      	movs	r3, #10
 8006974:	e019      	b.n	80069aa <_printf_i+0x102>
 8006976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800697a:	6805      	ldr	r5, [r0, #0]
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	bf18      	it	ne
 8006980:	b22d      	sxthne	r5, r5
 8006982:	e7ef      	b.n	8006964 <_printf_i+0xbc>
 8006984:	680b      	ldr	r3, [r1, #0]
 8006986:	6825      	ldr	r5, [r4, #0]
 8006988:	1d18      	adds	r0, r3, #4
 800698a:	6008      	str	r0, [r1, #0]
 800698c:	0628      	lsls	r0, r5, #24
 800698e:	d501      	bpl.n	8006994 <_printf_i+0xec>
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0xf2>
 8006994:	0669      	lsls	r1, r5, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0xe8>
 8006998:	881d      	ldrh	r5, [r3, #0]
 800699a:	4854      	ldr	r0, [pc, #336]	; (8006aec <_printf_i+0x244>)
 800699c:	2f6f      	cmp	r7, #111	; 0x6f
 800699e:	bf0c      	ite	eq
 80069a0:	2308      	moveq	r3, #8
 80069a2:	230a      	movne	r3, #10
 80069a4:	2100      	movs	r1, #0
 80069a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069aa:	6866      	ldr	r6, [r4, #4]
 80069ac:	60a6      	str	r6, [r4, #8]
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	bfa2      	ittt	ge
 80069b2:	6821      	ldrge	r1, [r4, #0]
 80069b4:	f021 0104 	bicge.w	r1, r1, #4
 80069b8:	6021      	strge	r1, [r4, #0]
 80069ba:	b90d      	cbnz	r5, 80069c0 <_printf_i+0x118>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	d04d      	beq.n	8006a5c <_printf_i+0x1b4>
 80069c0:	4616      	mov	r6, r2
 80069c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069c6:	fb03 5711 	mls	r7, r3, r1, r5
 80069ca:	5dc7      	ldrb	r7, [r0, r7]
 80069cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d0:	462f      	mov	r7, r5
 80069d2:	42bb      	cmp	r3, r7
 80069d4:	460d      	mov	r5, r1
 80069d6:	d9f4      	bls.n	80069c2 <_printf_i+0x11a>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d10b      	bne.n	80069f4 <_printf_i+0x14c>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	07df      	lsls	r7, r3, #31
 80069e0:	d508      	bpl.n	80069f4 <_printf_i+0x14c>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6861      	ldr	r1, [r4, #4]
 80069e6:	4299      	cmp	r1, r3
 80069e8:	bfde      	ittt	le
 80069ea:	2330      	movle	r3, #48	; 0x30
 80069ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069f4:	1b92      	subs	r2, r2, r6
 80069f6:	6122      	str	r2, [r4, #16]
 80069f8:	f8cd a000 	str.w	sl, [sp]
 80069fc:	464b      	mov	r3, r9
 80069fe:	aa03      	add	r2, sp, #12
 8006a00:	4621      	mov	r1, r4
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff fee2 	bl	80067cc <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d14c      	bne.n	8006aa6 <_printf_i+0x1fe>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b004      	add	sp, #16
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	4835      	ldr	r0, [pc, #212]	; (8006aec <_printf_i+0x244>)
 8006a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	680e      	ldr	r6, [r1, #0]
 8006a20:	061f      	lsls	r7, r3, #24
 8006a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a26:	600e      	str	r6, [r1, #0]
 8006a28:	d514      	bpl.n	8006a54 <_printf_i+0x1ac>
 8006a2a:	07d9      	lsls	r1, r3, #31
 8006a2c:	bf44      	itt	mi
 8006a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a32:	6023      	strmi	r3, [r4, #0]
 8006a34:	b91d      	cbnz	r5, 8006a3e <_printf_i+0x196>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f023 0320 	bic.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2310      	movs	r3, #16
 8006a40:	e7b0      	b.n	80069a4 <_printf_i+0xfc>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	2378      	movs	r3, #120	; 0x78
 8006a4c:	4828      	ldr	r0, [pc, #160]	; (8006af0 <_printf_i+0x248>)
 8006a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a52:	e7e3      	b.n	8006a1c <_printf_i+0x174>
 8006a54:	065e      	lsls	r6, r3, #25
 8006a56:	bf48      	it	mi
 8006a58:	b2ad      	uxthmi	r5, r5
 8006a5a:	e7e6      	b.n	8006a2a <_printf_i+0x182>
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	e7bb      	b.n	80069d8 <_printf_i+0x130>
 8006a60:	680b      	ldr	r3, [r1, #0]
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	6960      	ldr	r0, [r4, #20]
 8006a66:	1d1d      	adds	r5, r3, #4
 8006a68:	600d      	str	r5, [r1, #0]
 8006a6a:	0635      	lsls	r5, r6, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1cc>
 8006a70:	6018      	str	r0, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1d2>
 8006a74:	0671      	lsls	r1, r6, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1c8>
 8006a78:	8018      	strh	r0, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4616      	mov	r6, r2
 8006a80:	e7ba      	b.n	80069f8 <_printf_i+0x150>
 8006a82:	680b      	ldr	r3, [r1, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	600a      	str	r2, [r1, #0]
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7f9 fb9e 	bl	80001d0 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1f2>
 8006a96:	1b80      	subs	r0, r0, r6
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	e7a8      	b.n	80069f8 <_printf_i+0x150>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ab      	beq.n	8006a0c <_printf_i+0x164>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x23a>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a4      	b.n	8006a10 <_printf_i+0x168>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09b      	beq.n	8006a0c <_printf_i+0x164>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x21e>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x212>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x22e>
 8006aea:	bf00      	nop
 8006aec:	08007bb1 	.word	0x08007bb1
 8006af0:	08007bc2 	.word	0x08007bc2

08006af4 <iprintf>:
 8006af4:	b40f      	push	{r0, r1, r2, r3}
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <iprintf+0x2c>)
 8006af8:	b513      	push	{r0, r1, r4, lr}
 8006afa:	681c      	ldr	r4, [r3, #0]
 8006afc:	b124      	cbz	r4, 8006b08 <iprintf+0x14>
 8006afe:	69a3      	ldr	r3, [r4, #24]
 8006b00:	b913      	cbnz	r3, 8006b08 <iprintf+0x14>
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fbf2 	bl	80072ec <__sinit>
 8006b08:	ab05      	add	r3, sp, #20
 8006b0a:	9a04      	ldr	r2, [sp, #16]
 8006b0c:	68a1      	ldr	r1, [r4, #8]
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7ff fd2b 	bl	800656c <_vfiprintf_r>
 8006b16:	b002      	add	sp, #8
 8006b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1c:	b004      	add	sp, #16
 8006b1e:	4770      	bx	lr
 8006b20:	20000014 	.word	0x20000014

08006b24 <realloc>:
 8006b24:	4b02      	ldr	r3, [pc, #8]	; (8006b30 <realloc+0xc>)
 8006b26:	460a      	mov	r2, r1
 8006b28:	4601      	mov	r1, r0
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	f000 bcee 	b.w	800750c <_realloc_r>
 8006b30:	20000014 	.word	0x20000014

08006b34 <_sbrk_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d06      	ldr	r5, [pc, #24]	; (8006b50 <_sbrk_r+0x1c>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fa fab0 	bl	80010a4 <_sbrk>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_sbrk_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_sbrk_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20012eec 	.word	0x20012eec

08006b54 <_strerror_r>:
 8006b54:	b510      	push	{r4, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	288e      	cmp	r0, #142	; 0x8e
 8006b5e:	f200 812f 	bhi.w	8006dc0 <_strerror_r+0x26c>
 8006b62:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006b66:	0138      	.short	0x0138
 8006b68:	0091008f 	.word	0x0091008f
 8006b6c:	00950093 	.word	0x00950093
 8006b70:	00990097 	.word	0x00990097
 8006b74:	009d009b 	.word	0x009d009b
 8006b78:	00a300a1 	.word	0x00a300a1
 8006b7c:	00a900a7 	.word	0x00a900a7
 8006b80:	00ad00ab 	.word	0x00ad00ab
 8006b84:	00af012d 	.word	0x00af012d
 8006b88:	00b300b1 	.word	0x00b300b1
 8006b8c:	00b700b5 	.word	0x00b700b5
 8006b90:	00bf00bd 	.word	0x00bf00bd
 8006b94:	00c700c5 	.word	0x00c700c5
 8006b98:	00cb00c9 	.word	0x00cb00c9
 8006b9c:	00d100cd 	.word	0x00d100cd
 8006ba0:	00d700d5 	.word	0x00d700d5
 8006ba4:	00db00d9 	.word	0x00db00d9
 8006ba8:	00df00dd 	.word	0x00df00dd
 8006bac:	00e300e1 	.word	0x00e300e1
 8006bb0:	012d012d 	.word	0x012d012d
 8006bb4:	012d012d 	.word	0x012d012d
 8006bb8:	012d012d 	.word	0x012d012d
 8006bbc:	012d012d 	.word	0x012d012d
 8006bc0:	00eb00e7 	.word	0x00eb00e7
 8006bc4:	012d012d 	.word	0x012d012d
 8006bc8:	012d012d 	.word	0x012d012d
 8006bcc:	012d012d 	.word	0x012d012d
 8006bd0:	012d012d 	.word	0x012d012d
 8006bd4:	012d012d 	.word	0x012d012d
 8006bd8:	012d012d 	.word	0x012d012d
 8006bdc:	00ed012d 	.word	0x00ed012d
 8006be0:	00ef0107 	.word	0x00ef0107
 8006be4:	012d00f1 	.word	0x012d00f1
 8006be8:	012d012d 	.word	0x012d012d
 8006bec:	012d00f3 	.word	0x012d00f3
 8006bf0:	012d012d 	.word	0x012d012d
 8006bf4:	012d00f5 	.word	0x012d00f5
 8006bf8:	00f9012d 	.word	0x00f9012d
 8006bfc:	012d012d 	.word	0x012d012d
 8006c00:	012d00fb 	.word	0x012d00fb
 8006c04:	012d012d 	.word	0x012d012d
 8006c08:	012d012d 	.word	0x012d012d
 8006c0c:	012d012d 	.word	0x012d012d
 8006c10:	012d012d 	.word	0x012d012d
 8006c14:	00fd012d 	.word	0x00fd012d
 8006c18:	00ff012d 	.word	0x00ff012d
 8006c1c:	01030101 	.word	0x01030101
 8006c20:	012d012d 	.word	0x012d012d
 8006c24:	012d0125 	.word	0x012d0125
 8006c28:	012d012d 	.word	0x012d012d
 8006c2c:	012d012d 	.word	0x012d012d
 8006c30:	012d012d 	.word	0x012d012d
 8006c34:	0113012d 	.word	0x0113012d
 8006c38:	01090105 	.word	0x01090105
 8006c3c:	010d010b 	.word	0x010d010b
 8006c40:	012d010f 	.word	0x012d010f
 8006c44:	01150111 	.word	0x01150111
 8006c48:	00e90119 	.word	0x00e90119
 8006c4c:	012b00c1 	.word	0x012b00c1
 8006c50:	00cf00b9 	.word	0x00cf00b9
 8006c54:	009f00bb 	.word	0x009f00bb
 8006c58:	012900a5 	.word	0x012900a5
 8006c5c:	012d00f7 	.word	0x012d00f7
 8006c60:	00c30117 	.word	0x00c30117
 8006c64:	011b011d 	.word	0x011b011d
 8006c68:	012d012d 	.word	0x012d012d
 8006c6c:	012d012d 	.word	0x012d012d
 8006c70:	00d3012d 	.word	0x00d3012d
 8006c74:	012d012d 	.word	0x012d012d
 8006c78:	00e5012d 	.word	0x00e5012d
 8006c7c:	011f0127 	.word	0x011f0127
 8006c80:	01230121 	.word	0x01230121
 8006c84:	4855      	ldr	r0, [pc, #340]	; (8006ddc <_strerror_r+0x288>)
 8006c86:	bd10      	pop	{r4, pc}
 8006c88:	4855      	ldr	r0, [pc, #340]	; (8006de0 <_strerror_r+0x28c>)
 8006c8a:	e7fc      	b.n	8006c86 <_strerror_r+0x132>
 8006c8c:	4855      	ldr	r0, [pc, #340]	; (8006de4 <_strerror_r+0x290>)
 8006c8e:	e7fa      	b.n	8006c86 <_strerror_r+0x132>
 8006c90:	4855      	ldr	r0, [pc, #340]	; (8006de8 <_strerror_r+0x294>)
 8006c92:	e7f8      	b.n	8006c86 <_strerror_r+0x132>
 8006c94:	4855      	ldr	r0, [pc, #340]	; (8006dec <_strerror_r+0x298>)
 8006c96:	e7f6      	b.n	8006c86 <_strerror_r+0x132>
 8006c98:	4855      	ldr	r0, [pc, #340]	; (8006df0 <_strerror_r+0x29c>)
 8006c9a:	e7f4      	b.n	8006c86 <_strerror_r+0x132>
 8006c9c:	4855      	ldr	r0, [pc, #340]	; (8006df4 <_strerror_r+0x2a0>)
 8006c9e:	e7f2      	b.n	8006c86 <_strerror_r+0x132>
 8006ca0:	4855      	ldr	r0, [pc, #340]	; (8006df8 <_strerror_r+0x2a4>)
 8006ca2:	e7f0      	b.n	8006c86 <_strerror_r+0x132>
 8006ca4:	4855      	ldr	r0, [pc, #340]	; (8006dfc <_strerror_r+0x2a8>)
 8006ca6:	e7ee      	b.n	8006c86 <_strerror_r+0x132>
 8006ca8:	4855      	ldr	r0, [pc, #340]	; (8006e00 <_strerror_r+0x2ac>)
 8006caa:	e7ec      	b.n	8006c86 <_strerror_r+0x132>
 8006cac:	4855      	ldr	r0, [pc, #340]	; (8006e04 <_strerror_r+0x2b0>)
 8006cae:	e7ea      	b.n	8006c86 <_strerror_r+0x132>
 8006cb0:	4855      	ldr	r0, [pc, #340]	; (8006e08 <_strerror_r+0x2b4>)
 8006cb2:	e7e8      	b.n	8006c86 <_strerror_r+0x132>
 8006cb4:	4855      	ldr	r0, [pc, #340]	; (8006e0c <_strerror_r+0x2b8>)
 8006cb6:	e7e6      	b.n	8006c86 <_strerror_r+0x132>
 8006cb8:	4855      	ldr	r0, [pc, #340]	; (8006e10 <_strerror_r+0x2bc>)
 8006cba:	e7e4      	b.n	8006c86 <_strerror_r+0x132>
 8006cbc:	4855      	ldr	r0, [pc, #340]	; (8006e14 <_strerror_r+0x2c0>)
 8006cbe:	e7e2      	b.n	8006c86 <_strerror_r+0x132>
 8006cc0:	4855      	ldr	r0, [pc, #340]	; (8006e18 <_strerror_r+0x2c4>)
 8006cc2:	e7e0      	b.n	8006c86 <_strerror_r+0x132>
 8006cc4:	4855      	ldr	r0, [pc, #340]	; (8006e1c <_strerror_r+0x2c8>)
 8006cc6:	e7de      	b.n	8006c86 <_strerror_r+0x132>
 8006cc8:	4855      	ldr	r0, [pc, #340]	; (8006e20 <_strerror_r+0x2cc>)
 8006cca:	e7dc      	b.n	8006c86 <_strerror_r+0x132>
 8006ccc:	4855      	ldr	r0, [pc, #340]	; (8006e24 <_strerror_r+0x2d0>)
 8006cce:	e7da      	b.n	8006c86 <_strerror_r+0x132>
 8006cd0:	4855      	ldr	r0, [pc, #340]	; (8006e28 <_strerror_r+0x2d4>)
 8006cd2:	e7d8      	b.n	8006c86 <_strerror_r+0x132>
 8006cd4:	4855      	ldr	r0, [pc, #340]	; (8006e2c <_strerror_r+0x2d8>)
 8006cd6:	e7d6      	b.n	8006c86 <_strerror_r+0x132>
 8006cd8:	4855      	ldr	r0, [pc, #340]	; (8006e30 <_strerror_r+0x2dc>)
 8006cda:	e7d4      	b.n	8006c86 <_strerror_r+0x132>
 8006cdc:	4855      	ldr	r0, [pc, #340]	; (8006e34 <_strerror_r+0x2e0>)
 8006cde:	e7d2      	b.n	8006c86 <_strerror_r+0x132>
 8006ce0:	4855      	ldr	r0, [pc, #340]	; (8006e38 <_strerror_r+0x2e4>)
 8006ce2:	e7d0      	b.n	8006c86 <_strerror_r+0x132>
 8006ce4:	4855      	ldr	r0, [pc, #340]	; (8006e3c <_strerror_r+0x2e8>)
 8006ce6:	e7ce      	b.n	8006c86 <_strerror_r+0x132>
 8006ce8:	4855      	ldr	r0, [pc, #340]	; (8006e40 <_strerror_r+0x2ec>)
 8006cea:	e7cc      	b.n	8006c86 <_strerror_r+0x132>
 8006cec:	4855      	ldr	r0, [pc, #340]	; (8006e44 <_strerror_r+0x2f0>)
 8006cee:	e7ca      	b.n	8006c86 <_strerror_r+0x132>
 8006cf0:	4855      	ldr	r0, [pc, #340]	; (8006e48 <_strerror_r+0x2f4>)
 8006cf2:	e7c8      	b.n	8006c86 <_strerror_r+0x132>
 8006cf4:	4855      	ldr	r0, [pc, #340]	; (8006e4c <_strerror_r+0x2f8>)
 8006cf6:	e7c6      	b.n	8006c86 <_strerror_r+0x132>
 8006cf8:	4855      	ldr	r0, [pc, #340]	; (8006e50 <_strerror_r+0x2fc>)
 8006cfa:	e7c4      	b.n	8006c86 <_strerror_r+0x132>
 8006cfc:	4855      	ldr	r0, [pc, #340]	; (8006e54 <_strerror_r+0x300>)
 8006cfe:	e7c2      	b.n	8006c86 <_strerror_r+0x132>
 8006d00:	4855      	ldr	r0, [pc, #340]	; (8006e58 <_strerror_r+0x304>)
 8006d02:	e7c0      	b.n	8006c86 <_strerror_r+0x132>
 8006d04:	4855      	ldr	r0, [pc, #340]	; (8006e5c <_strerror_r+0x308>)
 8006d06:	e7be      	b.n	8006c86 <_strerror_r+0x132>
 8006d08:	4855      	ldr	r0, [pc, #340]	; (8006e60 <_strerror_r+0x30c>)
 8006d0a:	e7bc      	b.n	8006c86 <_strerror_r+0x132>
 8006d0c:	4855      	ldr	r0, [pc, #340]	; (8006e64 <_strerror_r+0x310>)
 8006d0e:	e7ba      	b.n	8006c86 <_strerror_r+0x132>
 8006d10:	4855      	ldr	r0, [pc, #340]	; (8006e68 <_strerror_r+0x314>)
 8006d12:	e7b8      	b.n	8006c86 <_strerror_r+0x132>
 8006d14:	4855      	ldr	r0, [pc, #340]	; (8006e6c <_strerror_r+0x318>)
 8006d16:	e7b6      	b.n	8006c86 <_strerror_r+0x132>
 8006d18:	4855      	ldr	r0, [pc, #340]	; (8006e70 <_strerror_r+0x31c>)
 8006d1a:	e7b4      	b.n	8006c86 <_strerror_r+0x132>
 8006d1c:	4855      	ldr	r0, [pc, #340]	; (8006e74 <_strerror_r+0x320>)
 8006d1e:	e7b2      	b.n	8006c86 <_strerror_r+0x132>
 8006d20:	4855      	ldr	r0, [pc, #340]	; (8006e78 <_strerror_r+0x324>)
 8006d22:	e7b0      	b.n	8006c86 <_strerror_r+0x132>
 8006d24:	4855      	ldr	r0, [pc, #340]	; (8006e7c <_strerror_r+0x328>)
 8006d26:	e7ae      	b.n	8006c86 <_strerror_r+0x132>
 8006d28:	4855      	ldr	r0, [pc, #340]	; (8006e80 <_strerror_r+0x32c>)
 8006d2a:	e7ac      	b.n	8006c86 <_strerror_r+0x132>
 8006d2c:	4855      	ldr	r0, [pc, #340]	; (8006e84 <_strerror_r+0x330>)
 8006d2e:	e7aa      	b.n	8006c86 <_strerror_r+0x132>
 8006d30:	4855      	ldr	r0, [pc, #340]	; (8006e88 <_strerror_r+0x334>)
 8006d32:	e7a8      	b.n	8006c86 <_strerror_r+0x132>
 8006d34:	4855      	ldr	r0, [pc, #340]	; (8006e8c <_strerror_r+0x338>)
 8006d36:	e7a6      	b.n	8006c86 <_strerror_r+0x132>
 8006d38:	4855      	ldr	r0, [pc, #340]	; (8006e90 <_strerror_r+0x33c>)
 8006d3a:	e7a4      	b.n	8006c86 <_strerror_r+0x132>
 8006d3c:	4855      	ldr	r0, [pc, #340]	; (8006e94 <_strerror_r+0x340>)
 8006d3e:	e7a2      	b.n	8006c86 <_strerror_r+0x132>
 8006d40:	4855      	ldr	r0, [pc, #340]	; (8006e98 <_strerror_r+0x344>)
 8006d42:	e7a0      	b.n	8006c86 <_strerror_r+0x132>
 8006d44:	4855      	ldr	r0, [pc, #340]	; (8006e9c <_strerror_r+0x348>)
 8006d46:	e79e      	b.n	8006c86 <_strerror_r+0x132>
 8006d48:	4855      	ldr	r0, [pc, #340]	; (8006ea0 <_strerror_r+0x34c>)
 8006d4a:	e79c      	b.n	8006c86 <_strerror_r+0x132>
 8006d4c:	4855      	ldr	r0, [pc, #340]	; (8006ea4 <_strerror_r+0x350>)
 8006d4e:	e79a      	b.n	8006c86 <_strerror_r+0x132>
 8006d50:	4855      	ldr	r0, [pc, #340]	; (8006ea8 <_strerror_r+0x354>)
 8006d52:	e798      	b.n	8006c86 <_strerror_r+0x132>
 8006d54:	4855      	ldr	r0, [pc, #340]	; (8006eac <_strerror_r+0x358>)
 8006d56:	e796      	b.n	8006c86 <_strerror_r+0x132>
 8006d58:	4855      	ldr	r0, [pc, #340]	; (8006eb0 <_strerror_r+0x35c>)
 8006d5a:	e794      	b.n	8006c86 <_strerror_r+0x132>
 8006d5c:	4855      	ldr	r0, [pc, #340]	; (8006eb4 <_strerror_r+0x360>)
 8006d5e:	e792      	b.n	8006c86 <_strerror_r+0x132>
 8006d60:	4855      	ldr	r0, [pc, #340]	; (8006eb8 <_strerror_r+0x364>)
 8006d62:	e790      	b.n	8006c86 <_strerror_r+0x132>
 8006d64:	4855      	ldr	r0, [pc, #340]	; (8006ebc <_strerror_r+0x368>)
 8006d66:	e78e      	b.n	8006c86 <_strerror_r+0x132>
 8006d68:	4855      	ldr	r0, [pc, #340]	; (8006ec0 <_strerror_r+0x36c>)
 8006d6a:	e78c      	b.n	8006c86 <_strerror_r+0x132>
 8006d6c:	4855      	ldr	r0, [pc, #340]	; (8006ec4 <_strerror_r+0x370>)
 8006d6e:	e78a      	b.n	8006c86 <_strerror_r+0x132>
 8006d70:	4855      	ldr	r0, [pc, #340]	; (8006ec8 <_strerror_r+0x374>)
 8006d72:	e788      	b.n	8006c86 <_strerror_r+0x132>
 8006d74:	4855      	ldr	r0, [pc, #340]	; (8006ecc <_strerror_r+0x378>)
 8006d76:	e786      	b.n	8006c86 <_strerror_r+0x132>
 8006d78:	4855      	ldr	r0, [pc, #340]	; (8006ed0 <_strerror_r+0x37c>)
 8006d7a:	e784      	b.n	8006c86 <_strerror_r+0x132>
 8006d7c:	4855      	ldr	r0, [pc, #340]	; (8006ed4 <_strerror_r+0x380>)
 8006d7e:	e782      	b.n	8006c86 <_strerror_r+0x132>
 8006d80:	4855      	ldr	r0, [pc, #340]	; (8006ed8 <_strerror_r+0x384>)
 8006d82:	e780      	b.n	8006c86 <_strerror_r+0x132>
 8006d84:	4855      	ldr	r0, [pc, #340]	; (8006edc <_strerror_r+0x388>)
 8006d86:	e77e      	b.n	8006c86 <_strerror_r+0x132>
 8006d88:	4855      	ldr	r0, [pc, #340]	; (8006ee0 <_strerror_r+0x38c>)
 8006d8a:	e77c      	b.n	8006c86 <_strerror_r+0x132>
 8006d8c:	4855      	ldr	r0, [pc, #340]	; (8006ee4 <_strerror_r+0x390>)
 8006d8e:	e77a      	b.n	8006c86 <_strerror_r+0x132>
 8006d90:	4855      	ldr	r0, [pc, #340]	; (8006ee8 <_strerror_r+0x394>)
 8006d92:	e778      	b.n	8006c86 <_strerror_r+0x132>
 8006d94:	4855      	ldr	r0, [pc, #340]	; (8006eec <_strerror_r+0x398>)
 8006d96:	e776      	b.n	8006c86 <_strerror_r+0x132>
 8006d98:	4855      	ldr	r0, [pc, #340]	; (8006ef0 <_strerror_r+0x39c>)
 8006d9a:	e774      	b.n	8006c86 <_strerror_r+0x132>
 8006d9c:	4855      	ldr	r0, [pc, #340]	; (8006ef4 <_strerror_r+0x3a0>)
 8006d9e:	e772      	b.n	8006c86 <_strerror_r+0x132>
 8006da0:	4855      	ldr	r0, [pc, #340]	; (8006ef8 <_strerror_r+0x3a4>)
 8006da2:	e770      	b.n	8006c86 <_strerror_r+0x132>
 8006da4:	4855      	ldr	r0, [pc, #340]	; (8006efc <_strerror_r+0x3a8>)
 8006da6:	e76e      	b.n	8006c86 <_strerror_r+0x132>
 8006da8:	4855      	ldr	r0, [pc, #340]	; (8006f00 <_strerror_r+0x3ac>)
 8006daa:	e76c      	b.n	8006c86 <_strerror_r+0x132>
 8006dac:	4855      	ldr	r0, [pc, #340]	; (8006f04 <_strerror_r+0x3b0>)
 8006dae:	e76a      	b.n	8006c86 <_strerror_r+0x132>
 8006db0:	4855      	ldr	r0, [pc, #340]	; (8006f08 <_strerror_r+0x3b4>)
 8006db2:	e768      	b.n	8006c86 <_strerror_r+0x132>
 8006db4:	4855      	ldr	r0, [pc, #340]	; (8006f0c <_strerror_r+0x3b8>)
 8006db6:	e766      	b.n	8006c86 <_strerror_r+0x132>
 8006db8:	4855      	ldr	r0, [pc, #340]	; (8006f10 <_strerror_r+0x3bc>)
 8006dba:	e764      	b.n	8006c86 <_strerror_r+0x132>
 8006dbc:	4855      	ldr	r0, [pc, #340]	; (8006f14 <_strerror_r+0x3c0>)
 8006dbe:	e762      	b.n	8006c86 <_strerror_r+0x132>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf14      	ite	ne
 8006dc4:	461a      	movne	r2, r3
 8006dc6:	4622      	moveq	r2, r4
 8006dc8:	f000 f8b4 	bl	8006f34 <_user_strerror>
 8006dcc:	4b52      	ldr	r3, [pc, #328]	; (8006f18 <_strerror_r+0x3c4>)
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	bf08      	it	eq
 8006dd2:	4618      	moveq	r0, r3
 8006dd4:	e757      	b.n	8006c86 <_strerror_r+0x132>
 8006dd6:	4851      	ldr	r0, [pc, #324]	; (8006f1c <_strerror_r+0x3c8>)
 8006dd8:	e755      	b.n	8006c86 <_strerror_r+0x132>
 8006dda:	bf00      	nop
 8006ddc:	08007bd3 	.word	0x08007bd3
 8006de0:	08007bdd 	.word	0x08007bdd
 8006de4:	08007bf7 	.word	0x08007bf7
 8006de8:	08007c07 	.word	0x08007c07
 8006dec:	08007c1f 	.word	0x08007c1f
 8006df0:	08007c29 	.word	0x08007c29
 8006df4:	08007c43 	.word	0x08007c43
 8006df8:	08007c55 	.word	0x08007c55
 8006dfc:	08007c67 	.word	0x08007c67
 8006e00:	08007c80 	.word	0x08007c80
 8006e04:	08007c90 	.word	0x08007c90
 8006e08:	08007c9c 	.word	0x08007c9c
 8006e0c:	08007cb9 	.word	0x08007cb9
 8006e10:	08007ccb 	.word	0x08007ccb
 8006e14:	08007cdc 	.word	0x08007cdc
 8006e18:	08007cee 	.word	0x08007cee
 8006e1c:	08007cfa 	.word	0x08007cfa
 8006e20:	08007d12 	.word	0x08007d12
 8006e24:	08007d1e 	.word	0x08007d1e
 8006e28:	08007d30 	.word	0x08007d30
 8006e2c:	08007d3f 	.word	0x08007d3f
 8006e30:	08007d4f 	.word	0x08007d4f
 8006e34:	08007d5c 	.word	0x08007d5c
 8006e38:	08007d7b 	.word	0x08007d7b
 8006e3c:	08007d8a 	.word	0x08007d8a
 8006e40:	08007d9b 	.word	0x08007d9b
 8006e44:	08007dbf 	.word	0x08007dbf
 8006e48:	08007ddd 	.word	0x08007ddd
 8006e4c:	08007dfb 	.word	0x08007dfb
 8006e50:	08007e1b 	.word	0x08007e1b
 8006e54:	08007e32 	.word	0x08007e32
 8006e58:	08007e41 	.word	0x08007e41
 8006e5c:	08007e50 	.word	0x08007e50
 8006e60:	08007e64 	.word	0x08007e64
 8006e64:	08007e7c 	.word	0x08007e7c
 8006e68:	08007e8a 	.word	0x08007e8a
 8006e6c:	08007e97 	.word	0x08007e97
 8006e70:	08007ead 	.word	0x08007ead
 8006e74:	08007ebc 	.word	0x08007ebc
 8006e78:	08007ec8 	.word	0x08007ec8
 8006e7c:	08007ef7 	.word	0x08007ef7
 8006e80:	08007f08 	.word	0x08007f08
 8006e84:	08007f23 	.word	0x08007f23
 8006e88:	08007f36 	.word	0x08007f36
 8006e8c:	08007f4c 	.word	0x08007f4c
 8006e90:	08007f55 	.word	0x08007f55
 8006e94:	08007f6c 	.word	0x08007f6c
 8006e98:	08007f74 	.word	0x08007f74
 8006e9c:	08007f81 	.word	0x08007f81
 8006ea0:	08007f96 	.word	0x08007f96
 8006ea4:	08007faa 	.word	0x08007faa
 8006ea8:	08007fc2 	.word	0x08007fc2
 8006eac:	08007fd1 	.word	0x08007fd1
 8006eb0:	08007fe2 	.word	0x08007fe2
 8006eb4:	08007ff5 	.word	0x08007ff5
 8006eb8:	08008001 	.word	0x08008001
 8006ebc:	0800801a 	.word	0x0800801a
 8006ec0:	0800802e 	.word	0x0800802e
 8006ec4:	08008049 	.word	0x08008049
 8006ec8:	08008061 	.word	0x08008061
 8006ecc:	0800807b 	.word	0x0800807b
 8006ed0:	08008083 	.word	0x08008083
 8006ed4:	080080b3 	.word	0x080080b3
 8006ed8:	080080d2 	.word	0x080080d2
 8006edc:	080080f1 	.word	0x080080f1
 8006ee0:	08008108 	.word	0x08008108
 8006ee4:	0800811b 	.word	0x0800811b
 8006ee8:	08008134 	.word	0x08008134
 8006eec:	0800814b 	.word	0x0800814b
 8006ef0:	08008161 	.word	0x08008161
 8006ef4:	08008182 	.word	0x08008182
 8006ef8:	0800819a 	.word	0x0800819a
 8006efc:	080081b6 	.word	0x080081b6
 8006f00:	080081c9 	.word	0x080081c9
 8006f04:	080081df 	.word	0x080081df
 8006f08:	080081f3 	.word	0x080081f3
 8006f0c:	08008215 	.word	0x08008215
 8006f10:	0800823b 	.word	0x0800823b
 8006f14:	0800824c 	.word	0x0800824c
 8006f18:	08007ba5 	.word	0x08007ba5
 8006f1c:	08008261 	.word	0x08008261

08006f20 <strerror>:
 8006f20:	4601      	mov	r1, r0
 8006f22:	4803      	ldr	r0, [pc, #12]	; (8006f30 <strerror+0x10>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	6800      	ldr	r0, [r0, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f7ff be13 	b.w	8006b54 <_strerror_r>
 8006f2e:	bf00      	nop
 8006f30:	20000014 	.word	0x20000014

08006f34 <_user_strerror>:
 8006f34:	2000      	movs	r0, #0
 8006f36:	4770      	bx	lr

08006f38 <__swbuf_r>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	460e      	mov	r6, r1
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	4605      	mov	r5, r0
 8006f40:	b118      	cbz	r0, 8006f4a <__swbuf_r+0x12>
 8006f42:	6983      	ldr	r3, [r0, #24]
 8006f44:	b90b      	cbnz	r3, 8006f4a <__swbuf_r+0x12>
 8006f46:	f000 f9d1 	bl	80072ec <__sinit>
 8006f4a:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <__swbuf_r+0x98>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	d12b      	bne.n	8006fa8 <__swbuf_r+0x70>
 8006f50:	686c      	ldr	r4, [r5, #4]
 8006f52:	69a3      	ldr	r3, [r4, #24]
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	071a      	lsls	r2, r3, #28
 8006f5a:	d52f      	bpl.n	8006fbc <__swbuf_r+0x84>
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	b36b      	cbz	r3, 8006fbc <__swbuf_r+0x84>
 8006f60:	6923      	ldr	r3, [r4, #16]
 8006f62:	6820      	ldr	r0, [r4, #0]
 8006f64:	1ac0      	subs	r0, r0, r3
 8006f66:	6963      	ldr	r3, [r4, #20]
 8006f68:	b2f6      	uxtb	r6, r6
 8006f6a:	4283      	cmp	r3, r0
 8006f6c:	4637      	mov	r7, r6
 8006f6e:	dc04      	bgt.n	8006f7a <__swbuf_r+0x42>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f926 	bl	80071c4 <_fflush_r>
 8006f78:	bb30      	cbnz	r0, 8006fc8 <__swbuf_r+0x90>
 8006f7a:	68a3      	ldr	r3, [r4, #8]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	60a3      	str	r3, [r4, #8]
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	701e      	strb	r6, [r3, #0]
 8006f88:	6963      	ldr	r3, [r4, #20]
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	4283      	cmp	r3, r0
 8006f8e:	d004      	beq.n	8006f9a <__swbuf_r+0x62>
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d506      	bpl.n	8006fa4 <__swbuf_r+0x6c>
 8006f96:	2e0a      	cmp	r6, #10
 8006f98:	d104      	bne.n	8006fa4 <__swbuf_r+0x6c>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f000 f911 	bl	80071c4 <_fflush_r>
 8006fa2:	b988      	cbnz	r0, 8006fc8 <__swbuf_r+0x90>
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <__swbuf_r+0x9c>)
 8006faa:	429c      	cmp	r4, r3
 8006fac:	d101      	bne.n	8006fb2 <__swbuf_r+0x7a>
 8006fae:	68ac      	ldr	r4, [r5, #8]
 8006fb0:	e7cf      	b.n	8006f52 <__swbuf_r+0x1a>
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <__swbuf_r+0xa0>)
 8006fb4:	429c      	cmp	r4, r3
 8006fb6:	bf08      	it	eq
 8006fb8:	68ec      	ldreq	r4, [r5, #12]
 8006fba:	e7ca      	b.n	8006f52 <__swbuf_r+0x1a>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 f80c 	bl	8006fdc <__swsetup_r>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d0cb      	beq.n	8006f60 <__swbuf_r+0x28>
 8006fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fcc:	e7ea      	b.n	8006fa4 <__swbuf_r+0x6c>
 8006fce:	bf00      	nop
 8006fd0:	0800828c 	.word	0x0800828c
 8006fd4:	080082ac 	.word	0x080082ac
 8006fd8:	0800826c 	.word	0x0800826c

08006fdc <__swsetup_r>:
 8006fdc:	4b32      	ldr	r3, [pc, #200]	; (80070a8 <__swsetup_r+0xcc>)
 8006fde:	b570      	push	{r4, r5, r6, lr}
 8006fe0:	681d      	ldr	r5, [r3, #0]
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	b125      	cbz	r5, 8006ff2 <__swsetup_r+0x16>
 8006fe8:	69ab      	ldr	r3, [r5, #24]
 8006fea:	b913      	cbnz	r3, 8006ff2 <__swsetup_r+0x16>
 8006fec:	4628      	mov	r0, r5
 8006fee:	f000 f97d 	bl	80072ec <__sinit>
 8006ff2:	4b2e      	ldr	r3, [pc, #184]	; (80070ac <__swsetup_r+0xd0>)
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	d10f      	bne.n	8007018 <__swsetup_r+0x3c>
 8006ff8:	686c      	ldr	r4, [r5, #4]
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007000:	0719      	lsls	r1, r3, #28
 8007002:	d42c      	bmi.n	800705e <__swsetup_r+0x82>
 8007004:	06dd      	lsls	r5, r3, #27
 8007006:	d411      	bmi.n	800702c <__swsetup_r+0x50>
 8007008:	2309      	movs	r3, #9
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	f04f 30ff 	mov.w	r0, #4294967295
 8007016:	e03e      	b.n	8007096 <__swsetup_r+0xba>
 8007018:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <__swsetup_r+0xd4>)
 800701a:	429c      	cmp	r4, r3
 800701c:	d101      	bne.n	8007022 <__swsetup_r+0x46>
 800701e:	68ac      	ldr	r4, [r5, #8]
 8007020:	e7eb      	b.n	8006ffa <__swsetup_r+0x1e>
 8007022:	4b24      	ldr	r3, [pc, #144]	; (80070b4 <__swsetup_r+0xd8>)
 8007024:	429c      	cmp	r4, r3
 8007026:	bf08      	it	eq
 8007028:	68ec      	ldreq	r4, [r5, #12]
 800702a:	e7e6      	b.n	8006ffa <__swsetup_r+0x1e>
 800702c:	0758      	lsls	r0, r3, #29
 800702e:	d512      	bpl.n	8007056 <__swsetup_r+0x7a>
 8007030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007032:	b141      	cbz	r1, 8007046 <__swsetup_r+0x6a>
 8007034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <__swsetup_r+0x66>
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff f9c1 	bl	80063c4 <_free_r>
 8007042:	2300      	movs	r3, #0
 8007044:	6363      	str	r3, [r4, #52]	; 0x34
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	2300      	movs	r3, #0
 8007050:	6063      	str	r3, [r4, #4]
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f043 0308 	orr.w	r3, r3, #8
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	b94b      	cbnz	r3, 8007076 <__swsetup_r+0x9a>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706c:	d003      	beq.n	8007076 <__swsetup_r+0x9a>
 800706e:	4621      	mov	r1, r4
 8007070:	4630      	mov	r0, r6
 8007072:	f000 f9ff 	bl	8007474 <__smakebuf_r>
 8007076:	89a0      	ldrh	r0, [r4, #12]
 8007078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800707c:	f010 0301 	ands.w	r3, r0, #1
 8007080:	d00a      	beq.n	8007098 <__swsetup_r+0xbc>
 8007082:	2300      	movs	r3, #0
 8007084:	60a3      	str	r3, [r4, #8]
 8007086:	6963      	ldr	r3, [r4, #20]
 8007088:	425b      	negs	r3, r3
 800708a:	61a3      	str	r3, [r4, #24]
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	b943      	cbnz	r3, 80070a2 <__swsetup_r+0xc6>
 8007090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007094:	d1ba      	bne.n	800700c <__swsetup_r+0x30>
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	0781      	lsls	r1, r0, #30
 800709a:	bf58      	it	pl
 800709c:	6963      	ldrpl	r3, [r4, #20]
 800709e:	60a3      	str	r3, [r4, #8]
 80070a0:	e7f4      	b.n	800708c <__swsetup_r+0xb0>
 80070a2:	2000      	movs	r0, #0
 80070a4:	e7f7      	b.n	8007096 <__swsetup_r+0xba>
 80070a6:	bf00      	nop
 80070a8:	20000014 	.word	0x20000014
 80070ac:	0800828c 	.word	0x0800828c
 80070b0:	080082ac 	.word	0x080082ac
 80070b4:	0800826c 	.word	0x0800826c

080070b8 <__sflush_r>:
 80070b8:	898a      	ldrh	r2, [r1, #12]
 80070ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070be:	4605      	mov	r5, r0
 80070c0:	0710      	lsls	r0, r2, #28
 80070c2:	460c      	mov	r4, r1
 80070c4:	d458      	bmi.n	8007178 <__sflush_r+0xc0>
 80070c6:	684b      	ldr	r3, [r1, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	dc05      	bgt.n	80070d8 <__sflush_r+0x20>
 80070cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dc02      	bgt.n	80070d8 <__sflush_r+0x20>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070da:	2e00      	cmp	r6, #0
 80070dc:	d0f9      	beq.n	80070d2 <__sflush_r+0x1a>
 80070de:	2300      	movs	r3, #0
 80070e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070e4:	682f      	ldr	r7, [r5, #0]
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	d032      	beq.n	8007150 <__sflush_r+0x98>
 80070ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	075a      	lsls	r2, r3, #29
 80070f0:	d505      	bpl.n	80070fe <__sflush_r+0x46>
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	1ac0      	subs	r0, r0, r3
 80070f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070f8:	b10b      	cbz	r3, 80070fe <__sflush_r+0x46>
 80070fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070fc:	1ac0      	subs	r0, r0, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	4602      	mov	r2, r0
 8007102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007104:	6a21      	ldr	r1, [r4, #32]
 8007106:	4628      	mov	r0, r5
 8007108:	47b0      	blx	r6
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	d106      	bne.n	800711e <__sflush_r+0x66>
 8007110:	6829      	ldr	r1, [r5, #0]
 8007112:	291d      	cmp	r1, #29
 8007114:	d82c      	bhi.n	8007170 <__sflush_r+0xb8>
 8007116:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <__sflush_r+0x108>)
 8007118:	40ca      	lsrs	r2, r1
 800711a:	07d6      	lsls	r6, r2, #31
 800711c:	d528      	bpl.n	8007170 <__sflush_r+0xb8>
 800711e:	2200      	movs	r2, #0
 8007120:	6062      	str	r2, [r4, #4]
 8007122:	04d9      	lsls	r1, r3, #19
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	6022      	str	r2, [r4, #0]
 8007128:	d504      	bpl.n	8007134 <__sflush_r+0x7c>
 800712a:	1c42      	adds	r2, r0, #1
 800712c:	d101      	bne.n	8007132 <__sflush_r+0x7a>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b903      	cbnz	r3, 8007134 <__sflush_r+0x7c>
 8007132:	6560      	str	r0, [r4, #84]	; 0x54
 8007134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007136:	602f      	str	r7, [r5, #0]
 8007138:	2900      	cmp	r1, #0
 800713a:	d0ca      	beq.n	80070d2 <__sflush_r+0x1a>
 800713c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007140:	4299      	cmp	r1, r3
 8007142:	d002      	beq.n	800714a <__sflush_r+0x92>
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff f93d 	bl	80063c4 <_free_r>
 800714a:	2000      	movs	r0, #0
 800714c:	6360      	str	r0, [r4, #52]	; 0x34
 800714e:	e7c1      	b.n	80070d4 <__sflush_r+0x1c>
 8007150:	6a21      	ldr	r1, [r4, #32]
 8007152:	2301      	movs	r3, #1
 8007154:	4628      	mov	r0, r5
 8007156:	47b0      	blx	r6
 8007158:	1c41      	adds	r1, r0, #1
 800715a:	d1c7      	bne.n	80070ec <__sflush_r+0x34>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0c4      	beq.n	80070ec <__sflush_r+0x34>
 8007162:	2b1d      	cmp	r3, #29
 8007164:	d001      	beq.n	800716a <__sflush_r+0xb2>
 8007166:	2b16      	cmp	r3, #22
 8007168:	d101      	bne.n	800716e <__sflush_r+0xb6>
 800716a:	602f      	str	r7, [r5, #0]
 800716c:	e7b1      	b.n	80070d2 <__sflush_r+0x1a>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	e7ad      	b.n	80070d4 <__sflush_r+0x1c>
 8007178:	690f      	ldr	r7, [r1, #16]
 800717a:	2f00      	cmp	r7, #0
 800717c:	d0a9      	beq.n	80070d2 <__sflush_r+0x1a>
 800717e:	0793      	lsls	r3, r2, #30
 8007180:	680e      	ldr	r6, [r1, #0]
 8007182:	bf08      	it	eq
 8007184:	694b      	ldreq	r3, [r1, #20]
 8007186:	600f      	str	r7, [r1, #0]
 8007188:	bf18      	it	ne
 800718a:	2300      	movne	r3, #0
 800718c:	eba6 0807 	sub.w	r8, r6, r7
 8007190:	608b      	str	r3, [r1, #8]
 8007192:	f1b8 0f00 	cmp.w	r8, #0
 8007196:	dd9c      	ble.n	80070d2 <__sflush_r+0x1a>
 8007198:	6a21      	ldr	r1, [r4, #32]
 800719a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800719c:	4643      	mov	r3, r8
 800719e:	463a      	mov	r2, r7
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b0      	blx	r6
 80071a4:	2800      	cmp	r0, #0
 80071a6:	dc06      	bgt.n	80071b6 <__sflush_r+0xfe>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e78e      	b.n	80070d4 <__sflush_r+0x1c>
 80071b6:	4407      	add	r7, r0
 80071b8:	eba8 0800 	sub.w	r8, r8, r0
 80071bc:	e7e9      	b.n	8007192 <__sflush_r+0xda>
 80071be:	bf00      	nop
 80071c0:	20400001 	.word	0x20400001

080071c4 <_fflush_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	690b      	ldr	r3, [r1, #16]
 80071c8:	4605      	mov	r5, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	b913      	cbnz	r3, 80071d4 <_fflush_r+0x10>
 80071ce:	2500      	movs	r5, #0
 80071d0:	4628      	mov	r0, r5
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	b118      	cbz	r0, 80071de <_fflush_r+0x1a>
 80071d6:	6983      	ldr	r3, [r0, #24]
 80071d8:	b90b      	cbnz	r3, 80071de <_fflush_r+0x1a>
 80071da:	f000 f887 	bl	80072ec <__sinit>
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <_fflush_r+0x6c>)
 80071e0:	429c      	cmp	r4, r3
 80071e2:	d11b      	bne.n	800721c <_fflush_r+0x58>
 80071e4:	686c      	ldr	r4, [r5, #4]
 80071e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0ef      	beq.n	80071ce <_fflush_r+0xa>
 80071ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071f0:	07d0      	lsls	r0, r2, #31
 80071f2:	d404      	bmi.n	80071fe <_fflush_r+0x3a>
 80071f4:	0599      	lsls	r1, r3, #22
 80071f6:	d402      	bmi.n	80071fe <_fflush_r+0x3a>
 80071f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fa:	f000 f915 	bl	8007428 <__retarget_lock_acquire_recursive>
 80071fe:	4628      	mov	r0, r5
 8007200:	4621      	mov	r1, r4
 8007202:	f7ff ff59 	bl	80070b8 <__sflush_r>
 8007206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007208:	07da      	lsls	r2, r3, #31
 800720a:	4605      	mov	r5, r0
 800720c:	d4e0      	bmi.n	80071d0 <_fflush_r+0xc>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	059b      	lsls	r3, r3, #22
 8007212:	d4dd      	bmi.n	80071d0 <_fflush_r+0xc>
 8007214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007216:	f000 f908 	bl	800742a <__retarget_lock_release_recursive>
 800721a:	e7d9      	b.n	80071d0 <_fflush_r+0xc>
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <_fflush_r+0x70>)
 800721e:	429c      	cmp	r4, r3
 8007220:	d101      	bne.n	8007226 <_fflush_r+0x62>
 8007222:	68ac      	ldr	r4, [r5, #8]
 8007224:	e7df      	b.n	80071e6 <_fflush_r+0x22>
 8007226:	4b04      	ldr	r3, [pc, #16]	; (8007238 <_fflush_r+0x74>)
 8007228:	429c      	cmp	r4, r3
 800722a:	bf08      	it	eq
 800722c:	68ec      	ldreq	r4, [r5, #12]
 800722e:	e7da      	b.n	80071e6 <_fflush_r+0x22>
 8007230:	0800828c 	.word	0x0800828c
 8007234:	080082ac 	.word	0x080082ac
 8007238:	0800826c 	.word	0x0800826c

0800723c <std>:
 800723c:	2300      	movs	r3, #0
 800723e:	b510      	push	{r4, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	e9c0 3300 	strd	r3, r3, [r0]
 8007246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800724a:	6083      	str	r3, [r0, #8]
 800724c:	8181      	strh	r1, [r0, #12]
 800724e:	6643      	str	r3, [r0, #100]	; 0x64
 8007250:	81c2      	strh	r2, [r0, #14]
 8007252:	6183      	str	r3, [r0, #24]
 8007254:	4619      	mov	r1, r3
 8007256:	2208      	movs	r2, #8
 8007258:	305c      	adds	r0, #92	; 0x5c
 800725a:	f7ff f89b 	bl	8006394 <memset>
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <std+0x38>)
 8007260:	6263      	str	r3, [r4, #36]	; 0x24
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <std+0x3c>)
 8007264:	62a3      	str	r3, [r4, #40]	; 0x28
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <std+0x40>)
 8007268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <std+0x44>)
 800726c:	6224      	str	r4, [r4, #32]
 800726e:	6323      	str	r3, [r4, #48]	; 0x30
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	08007559 	.word	0x08007559
 8007278:	0800757b 	.word	0x0800757b
 800727c:	080075b3 	.word	0x080075b3
 8007280:	080075d7 	.word	0x080075d7

08007284 <_cleanup_r>:
 8007284:	4901      	ldr	r1, [pc, #4]	; (800728c <_cleanup_r+0x8>)
 8007286:	f000 b8af 	b.w	80073e8 <_fwalk_reent>
 800728a:	bf00      	nop
 800728c:	080071c5 	.word	0x080071c5

08007290 <__sfmoreglue>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	1e4a      	subs	r2, r1, #1
 8007294:	2568      	movs	r5, #104	; 0x68
 8007296:	4355      	muls	r5, r2
 8007298:	460e      	mov	r6, r1
 800729a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800729e:	f7ff f8e1 	bl	8006464 <_malloc_r>
 80072a2:	4604      	mov	r4, r0
 80072a4:	b140      	cbz	r0, 80072b8 <__sfmoreglue+0x28>
 80072a6:	2100      	movs	r1, #0
 80072a8:	e9c0 1600 	strd	r1, r6, [r0]
 80072ac:	300c      	adds	r0, #12
 80072ae:	60a0      	str	r0, [r4, #8]
 80072b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072b4:	f7ff f86e 	bl	8006394 <memset>
 80072b8:	4620      	mov	r0, r4
 80072ba:	bd70      	pop	{r4, r5, r6, pc}

080072bc <__sfp_lock_acquire>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__sfp_lock_acquire+0x8>)
 80072be:	f000 b8b3 	b.w	8007428 <__retarget_lock_acquire_recursive>
 80072c2:	bf00      	nop
 80072c4:	20012ee8 	.word	0x20012ee8

080072c8 <__sfp_lock_release>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__sfp_lock_release+0x8>)
 80072ca:	f000 b8ae 	b.w	800742a <__retarget_lock_release_recursive>
 80072ce:	bf00      	nop
 80072d0:	20012ee8 	.word	0x20012ee8

080072d4 <__sinit_lock_acquire>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__sinit_lock_acquire+0x8>)
 80072d6:	f000 b8a7 	b.w	8007428 <__retarget_lock_acquire_recursive>
 80072da:	bf00      	nop
 80072dc:	20012ee3 	.word	0x20012ee3

080072e0 <__sinit_lock_release>:
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <__sinit_lock_release+0x8>)
 80072e2:	f000 b8a2 	b.w	800742a <__retarget_lock_release_recursive>
 80072e6:	bf00      	nop
 80072e8:	20012ee3 	.word	0x20012ee3

080072ec <__sinit>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	f7ff fff0 	bl	80072d4 <__sinit_lock_acquire>
 80072f4:	69a3      	ldr	r3, [r4, #24]
 80072f6:	b11b      	cbz	r3, 8007300 <__sinit+0x14>
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	f7ff bff0 	b.w	80072e0 <__sinit_lock_release>
 8007300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007304:	6523      	str	r3, [r4, #80]	; 0x50
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <__sinit+0x68>)
 8007308:	4a13      	ldr	r2, [pc, #76]	; (8007358 <__sinit+0x6c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	62a2      	str	r2, [r4, #40]	; 0x28
 800730e:	42a3      	cmp	r3, r4
 8007310:	bf04      	itt	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	61a3      	streq	r3, [r4, #24]
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f820 	bl	800735c <__sfp>
 800731c:	6060      	str	r0, [r4, #4]
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f81c 	bl	800735c <__sfp>
 8007324:	60a0      	str	r0, [r4, #8]
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f818 	bl	800735c <__sfp>
 800732c:	2200      	movs	r2, #0
 800732e:	60e0      	str	r0, [r4, #12]
 8007330:	2104      	movs	r1, #4
 8007332:	6860      	ldr	r0, [r4, #4]
 8007334:	f7ff ff82 	bl	800723c <std>
 8007338:	68a0      	ldr	r0, [r4, #8]
 800733a:	2201      	movs	r2, #1
 800733c:	2109      	movs	r1, #9
 800733e:	f7ff ff7d 	bl	800723c <std>
 8007342:	68e0      	ldr	r0, [r4, #12]
 8007344:	2202      	movs	r2, #2
 8007346:	2112      	movs	r1, #18
 8007348:	f7ff ff78 	bl	800723c <std>
 800734c:	2301      	movs	r3, #1
 800734e:	61a3      	str	r3, [r4, #24]
 8007350:	e7d2      	b.n	80072f8 <__sinit+0xc>
 8007352:	bf00      	nop
 8007354:	08007b9c 	.word	0x08007b9c
 8007358:	08007285 	.word	0x08007285

0800735c <__sfp>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	4607      	mov	r7, r0
 8007360:	f7ff ffac 	bl	80072bc <__sfp_lock_acquire>
 8007364:	4b1e      	ldr	r3, [pc, #120]	; (80073e0 <__sfp+0x84>)
 8007366:	681e      	ldr	r6, [r3, #0]
 8007368:	69b3      	ldr	r3, [r6, #24]
 800736a:	b913      	cbnz	r3, 8007372 <__sfp+0x16>
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ffbd 	bl	80072ec <__sinit>
 8007372:	3648      	adds	r6, #72	; 0x48
 8007374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007378:	3b01      	subs	r3, #1
 800737a:	d503      	bpl.n	8007384 <__sfp+0x28>
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	b30b      	cbz	r3, 80073c4 <__sfp+0x68>
 8007380:	6836      	ldr	r6, [r6, #0]
 8007382:	e7f7      	b.n	8007374 <__sfp+0x18>
 8007384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007388:	b9d5      	cbnz	r5, 80073c0 <__sfp+0x64>
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <__sfp+0x88>)
 800738c:	60e3      	str	r3, [r4, #12]
 800738e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007392:	6665      	str	r5, [r4, #100]	; 0x64
 8007394:	f000 f847 	bl	8007426 <__retarget_lock_init_recursive>
 8007398:	f7ff ff96 	bl	80072c8 <__sfp_lock_release>
 800739c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073a4:	6025      	str	r5, [r4, #0]
 80073a6:	61a5      	str	r5, [r4, #24]
 80073a8:	2208      	movs	r2, #8
 80073aa:	4629      	mov	r1, r5
 80073ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073b0:	f7fe fff0 	bl	8006394 <memset>
 80073b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073bc:	4620      	mov	r0, r4
 80073be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c0:	3468      	adds	r4, #104	; 0x68
 80073c2:	e7d9      	b.n	8007378 <__sfp+0x1c>
 80073c4:	2104      	movs	r1, #4
 80073c6:	4638      	mov	r0, r7
 80073c8:	f7ff ff62 	bl	8007290 <__sfmoreglue>
 80073cc:	4604      	mov	r4, r0
 80073ce:	6030      	str	r0, [r6, #0]
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d1d5      	bne.n	8007380 <__sfp+0x24>
 80073d4:	f7ff ff78 	bl	80072c8 <__sfp_lock_release>
 80073d8:	230c      	movs	r3, #12
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	e7ee      	b.n	80073bc <__sfp+0x60>
 80073de:	bf00      	nop
 80073e0:	08007b9c 	.word	0x08007b9c
 80073e4:	ffff0001 	.word	0xffff0001

080073e8 <_fwalk_reent>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	4606      	mov	r6, r0
 80073ee:	4688      	mov	r8, r1
 80073f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073f4:	2700      	movs	r7, #0
 80073f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073fa:	f1b9 0901 	subs.w	r9, r9, #1
 80073fe:	d505      	bpl.n	800740c <_fwalk_reent+0x24>
 8007400:	6824      	ldr	r4, [r4, #0]
 8007402:	2c00      	cmp	r4, #0
 8007404:	d1f7      	bne.n	80073f6 <_fwalk_reent+0xe>
 8007406:	4638      	mov	r0, r7
 8007408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d907      	bls.n	8007422 <_fwalk_reent+0x3a>
 8007412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007416:	3301      	adds	r3, #1
 8007418:	d003      	beq.n	8007422 <_fwalk_reent+0x3a>
 800741a:	4629      	mov	r1, r5
 800741c:	4630      	mov	r0, r6
 800741e:	47c0      	blx	r8
 8007420:	4307      	orrs	r7, r0
 8007422:	3568      	adds	r5, #104	; 0x68
 8007424:	e7e9      	b.n	80073fa <_fwalk_reent+0x12>

08007426 <__retarget_lock_init_recursive>:
 8007426:	4770      	bx	lr

08007428 <__retarget_lock_acquire_recursive>:
 8007428:	4770      	bx	lr

0800742a <__retarget_lock_release_recursive>:
 800742a:	4770      	bx	lr

0800742c <__swhatbuf_r>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	460e      	mov	r6, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	2900      	cmp	r1, #0
 8007436:	b096      	sub	sp, #88	; 0x58
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	da07      	bge.n	800744e <__swhatbuf_r+0x22>
 800743e:	2300      	movs	r3, #0
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	89b3      	ldrh	r3, [r6, #12]
 8007444:	061a      	lsls	r2, r3, #24
 8007446:	d410      	bmi.n	800746a <__swhatbuf_r+0x3e>
 8007448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800744c:	e00e      	b.n	800746c <__swhatbuf_r+0x40>
 800744e:	466a      	mov	r2, sp
 8007450:	f000 f8e8 	bl	8007624 <_fstat_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	dbf2      	blt.n	800743e <__swhatbuf_r+0x12>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800745e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007462:	425a      	negs	r2, r3
 8007464:	415a      	adcs	r2, r3
 8007466:	602a      	str	r2, [r5, #0]
 8007468:	e7ee      	b.n	8007448 <__swhatbuf_r+0x1c>
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	2000      	movs	r0, #0
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	b016      	add	sp, #88	; 0x58
 8007472:	bd70      	pop	{r4, r5, r6, pc}

08007474 <__smakebuf_r>:
 8007474:	898b      	ldrh	r3, [r1, #12]
 8007476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007478:	079d      	lsls	r5, r3, #30
 800747a:	4606      	mov	r6, r0
 800747c:	460c      	mov	r4, r1
 800747e:	d507      	bpl.n	8007490 <__smakebuf_r+0x1c>
 8007480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2301      	movs	r3, #1
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	b002      	add	sp, #8
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	ab01      	add	r3, sp, #4
 8007492:	466a      	mov	r2, sp
 8007494:	f7ff ffca 	bl	800742c <__swhatbuf_r>
 8007498:	9900      	ldr	r1, [sp, #0]
 800749a:	4605      	mov	r5, r0
 800749c:	4630      	mov	r0, r6
 800749e:	f7fe ffe1 	bl	8006464 <_malloc_r>
 80074a2:	b948      	cbnz	r0, 80074b8 <__smakebuf_r+0x44>
 80074a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d4ef      	bmi.n	800748c <__smakebuf_r+0x18>
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7e3      	b.n	8007480 <__smakebuf_r+0xc>
 80074b8:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <__smakebuf_r+0x7c>)
 80074ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	6163      	str	r3, [r4, #20]
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	6120      	str	r0, [r4, #16]
 80074ce:	b15b      	cbz	r3, 80074e8 <__smakebuf_r+0x74>
 80074d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f8b7 	bl	8007648 <_isatty_r>
 80074da:	b128      	cbz	r0, 80074e8 <__smakebuf_r+0x74>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	89a0      	ldrh	r0, [r4, #12]
 80074ea:	4305      	orrs	r5, r0
 80074ec:	81a5      	strh	r5, [r4, #12]
 80074ee:	e7cd      	b.n	800748c <__smakebuf_r+0x18>
 80074f0:	08007285 	.word	0x08007285

080074f4 <__malloc_lock>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__malloc_lock+0x8>)
 80074f6:	f7ff bf97 	b.w	8007428 <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	20012ee4 	.word	0x20012ee4

08007500 <__malloc_unlock>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__malloc_unlock+0x8>)
 8007502:	f7ff bf92 	b.w	800742a <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	20012ee4 	.word	0x20012ee4

0800750c <_realloc_r>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	4607      	mov	r7, r0
 8007510:	4614      	mov	r4, r2
 8007512:	460e      	mov	r6, r1
 8007514:	b921      	cbnz	r1, 8007520 <_realloc_r+0x14>
 8007516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800751a:	4611      	mov	r1, r2
 800751c:	f7fe bfa2 	b.w	8006464 <_malloc_r>
 8007520:	b922      	cbnz	r2, 800752c <_realloc_r+0x20>
 8007522:	f7fe ff4f 	bl	80063c4 <_free_r>
 8007526:	4625      	mov	r5, r4
 8007528:	4628      	mov	r0, r5
 800752a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752c:	f000 f8ae 	bl	800768c <_malloc_usable_size_r>
 8007530:	42a0      	cmp	r0, r4
 8007532:	d20f      	bcs.n	8007554 <_realloc_r+0x48>
 8007534:	4621      	mov	r1, r4
 8007536:	4638      	mov	r0, r7
 8007538:	f7fe ff94 	bl	8006464 <_malloc_r>
 800753c:	4605      	mov	r5, r0
 800753e:	2800      	cmp	r0, #0
 8007540:	d0f2      	beq.n	8007528 <_realloc_r+0x1c>
 8007542:	4631      	mov	r1, r6
 8007544:	4622      	mov	r2, r4
 8007546:	f7fe ff17 	bl	8006378 <memcpy>
 800754a:	4631      	mov	r1, r6
 800754c:	4638      	mov	r0, r7
 800754e:	f7fe ff39 	bl	80063c4 <_free_r>
 8007552:	e7e9      	b.n	8007528 <_realloc_r+0x1c>
 8007554:	4635      	mov	r5, r6
 8007556:	e7e7      	b.n	8007528 <_realloc_r+0x1c>

08007558 <__sread>:
 8007558:	b510      	push	{r4, lr}
 800755a:	460c      	mov	r4, r1
 800755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007560:	f000 f89c 	bl	800769c <_read_r>
 8007564:	2800      	cmp	r0, #0
 8007566:	bfab      	itete	ge
 8007568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800756a:	89a3      	ldrhlt	r3, [r4, #12]
 800756c:	181b      	addge	r3, r3, r0
 800756e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007572:	bfac      	ite	ge
 8007574:	6563      	strge	r3, [r4, #84]	; 0x54
 8007576:	81a3      	strhlt	r3, [r4, #12]
 8007578:	bd10      	pop	{r4, pc}

0800757a <__swrite>:
 800757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	461f      	mov	r7, r3
 8007580:	898b      	ldrh	r3, [r1, #12]
 8007582:	05db      	lsls	r3, r3, #23
 8007584:	4605      	mov	r5, r0
 8007586:	460c      	mov	r4, r1
 8007588:	4616      	mov	r6, r2
 800758a:	d505      	bpl.n	8007598 <__swrite+0x1e>
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	2302      	movs	r3, #2
 8007592:	2200      	movs	r2, #0
 8007594:	f000 f868 	bl	8007668 <_lseek_r>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800759e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	4632      	mov	r2, r6
 80075a6:	463b      	mov	r3, r7
 80075a8:	4628      	mov	r0, r5
 80075aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ae:	f000 b817 	b.w	80075e0 <_write_r>

080075b2 <__sseek>:
 80075b2:	b510      	push	{r4, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ba:	f000 f855 	bl	8007668 <_lseek_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	bf15      	itete	ne
 80075c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ce:	81a3      	strheq	r3, [r4, #12]
 80075d0:	bf18      	it	ne
 80075d2:	81a3      	strhne	r3, [r4, #12]
 80075d4:	bd10      	pop	{r4, pc}

080075d6 <__sclose>:
 80075d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075da:	f000 b813 	b.w	8007604 <_close_r>
	...

080075e0 <_write_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d07      	ldr	r5, [pc, #28]	; (8007600 <_write_r+0x20>)
 80075e4:	4604      	mov	r4, r0
 80075e6:	4608      	mov	r0, r1
 80075e8:	4611      	mov	r1, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	602a      	str	r2, [r5, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f7f9 fd07 	bl	8001002 <_write>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_write_r+0x1e>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_write_r+0x1e>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	20012eec 	.word	0x20012eec

08007604 <_close_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	4d06      	ldr	r5, [pc, #24]	; (8007620 <_close_r+0x1c>)
 8007608:	2300      	movs	r3, #0
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	602b      	str	r3, [r5, #0]
 8007610:	f7f9 fd13 	bl	800103a <_close>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_close_r+0x1a>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b103      	cbz	r3, 800761e <_close_r+0x1a>
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20012eec 	.word	0x20012eec

08007624 <_fstat_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d07      	ldr	r5, [pc, #28]	; (8007644 <_fstat_r+0x20>)
 8007628:	2300      	movs	r3, #0
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	f7f9 fd0e 	bl	8001052 <_fstat>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d102      	bne.n	8007640 <_fstat_r+0x1c>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b103      	cbz	r3, 8007640 <_fstat_r+0x1c>
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	bd38      	pop	{r3, r4, r5, pc}
 8007642:	bf00      	nop
 8007644:	20012eec 	.word	0x20012eec

08007648 <_isatty_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d06      	ldr	r5, [pc, #24]	; (8007664 <_isatty_r+0x1c>)
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	f7f9 fd0d 	bl	8001072 <_isatty>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_isatty_r+0x1a>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_isatty_r+0x1a>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	20012eec 	.word	0x20012eec

08007668 <_lseek_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d07      	ldr	r5, [pc, #28]	; (8007688 <_lseek_r+0x20>)
 800766c:	4604      	mov	r4, r0
 800766e:	4608      	mov	r0, r1
 8007670:	4611      	mov	r1, r2
 8007672:	2200      	movs	r2, #0
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	f7f9 fd06 	bl	8001088 <_lseek>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_lseek_r+0x1e>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_lseek_r+0x1e>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	20012eec 	.word	0x20012eec

0800768c <_malloc_usable_size_r>:
 800768c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007690:	1f18      	subs	r0, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfbc      	itt	lt
 8007696:	580b      	ldrlt	r3, [r1, r0]
 8007698:	18c0      	addlt	r0, r0, r3
 800769a:	4770      	bx	lr

0800769c <_read_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_read_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7f9 fc8c 	bl	8000fc8 <_read>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_read_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_read_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20012eec 	.word	0x20012eec

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
