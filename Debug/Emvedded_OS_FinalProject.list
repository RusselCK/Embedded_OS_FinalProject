
Emvedded_OS_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001320  080092c4  080092c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e4  0800a5e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5ec  0800a5ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e8c  20000078  0800a66c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f04  0800a66c  00022f04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddcb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004656  00000000  00000000  0003de73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  000424d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00043938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025107  00000000  00000000  00044c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181a7  00000000  00000000  00069d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5cc2  00000000  00000000  00081eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e70  00000000  00000000  00157bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092ac 	.word	0x080092ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080092ac 	.word	0x080092ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b96e 	b.w	800095c <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468c      	mov	ip, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f040 8083 	bne.w	80007ae <__udivmoddi4+0x116>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	4617      	mov	r7, r2
 80006ac:	d947      	bls.n	800073e <__udivmoddi4+0xa6>
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	b142      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b4:	f1c2 0020 	rsb	r0, r2, #32
 80006b8:	fa24 f000 	lsr.w	r0, r4, r0
 80006bc:	4091      	lsls	r1, r2
 80006be:	4097      	lsls	r7, r2
 80006c0:	ea40 0c01 	orr.w	ip, r0, r1
 80006c4:	4094      	lsls	r4, r2
 80006c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ca:	0c23      	lsrs	r3, r4, #16
 80006cc:	fbbc f6f8 	udiv	r6, ip, r8
 80006d0:	fa1f fe87 	uxth.w	lr, r7
 80006d4:	fb08 c116 	mls	r1, r8, r6, ip
 80006d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006dc:	fb06 f10e 	mul.w	r1, r6, lr
 80006e0:	4299      	cmp	r1, r3
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x60>
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ea:	f080 8119 	bcs.w	8000920 <__udivmoddi4+0x288>
 80006ee:	4299      	cmp	r1, r3
 80006f0:	f240 8116 	bls.w	8000920 <__udivmoddi4+0x288>
 80006f4:	3e02      	subs	r6, #2
 80006f6:	443b      	add	r3, r7
 80006f8:	1a5b      	subs	r3, r3, r1
 80006fa:	b2a4      	uxth	r4, r4
 80006fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000700:	fb08 3310 	mls	r3, r8, r0, r3
 8000704:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000708:	fb00 fe0e 	mul.w	lr, r0, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d909      	bls.n	8000724 <__udivmoddi4+0x8c>
 8000710:	193c      	adds	r4, r7, r4
 8000712:	f100 33ff 	add.w	r3, r0, #4294967295
 8000716:	f080 8105 	bcs.w	8000924 <__udivmoddi4+0x28c>
 800071a:	45a6      	cmp	lr, r4
 800071c:	f240 8102 	bls.w	8000924 <__udivmoddi4+0x28c>
 8000720:	3802      	subs	r0, #2
 8000722:	443c      	add	r4, r7
 8000724:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000728:	eba4 040e 	sub.w	r4, r4, lr
 800072c:	2600      	movs	r6, #0
 800072e:	b11d      	cbz	r5, 8000738 <__udivmoddi4+0xa0>
 8000730:	40d4      	lsrs	r4, r2
 8000732:	2300      	movs	r3, #0
 8000734:	e9c5 4300 	strd	r4, r3, [r5]
 8000738:	4631      	mov	r1, r6
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	b902      	cbnz	r2, 8000742 <__udivmoddi4+0xaa>
 8000740:	deff      	udf	#255	; 0xff
 8000742:	fab2 f282 	clz	r2, r2
 8000746:	2a00      	cmp	r2, #0
 8000748:	d150      	bne.n	80007ec <__udivmoddi4+0x154>
 800074a:	1bcb      	subs	r3, r1, r7
 800074c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000750:	fa1f f887 	uxth.w	r8, r7
 8000754:	2601      	movs	r6, #1
 8000756:	fbb3 fcfe 	udiv	ip, r3, lr
 800075a:	0c21      	lsrs	r1, r4, #16
 800075c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000760:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000764:	fb08 f30c 	mul.w	r3, r8, ip
 8000768:	428b      	cmp	r3, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0xe4>
 800076c:	1879      	adds	r1, r7, r1
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0xe2>
 8000774:	428b      	cmp	r3, r1
 8000776:	f200 80e9 	bhi.w	800094c <__udivmoddi4+0x2b4>
 800077a:	4684      	mov	ip, r0
 800077c:	1ac9      	subs	r1, r1, r3
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1110 	mls	r1, lr, r0, r1
 8000788:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x10c>
 8000794:	193c      	adds	r4, r7, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x10a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80d9 	bhi.w	8000954 <__udivmoddi4+0x2bc>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e7bf      	b.n	800072e <__udivmoddi4+0x96>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x12e>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	f000 80b1 	beq.w	800091a <__udivmoddi4+0x282>
 80007b8:	2600      	movs	r6, #0
 80007ba:	e9c5 0100 	strd	r0, r1, [r5]
 80007be:	4630      	mov	r0, r6
 80007c0:	4631      	mov	r1, r6
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f683 	clz	r6, r3
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d14a      	bne.n	8000864 <__udivmoddi4+0x1cc>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0x140>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80b8 	bhi.w	8000948 <__udivmoddi4+0x2b0>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb61 0103 	sbc.w	r1, r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	468c      	mov	ip, r1
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d0a8      	beq.n	8000738 <__udivmoddi4+0xa0>
 80007e6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ea:	e7a5      	b.n	8000738 <__udivmoddi4+0xa0>
 80007ec:	f1c2 0320 	rsb	r3, r2, #32
 80007f0:	fa20 f603 	lsr.w	r6, r0, r3
 80007f4:	4097      	lsls	r7, r2
 80007f6:	fa01 f002 	lsl.w	r0, r1, r2
 80007fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fe:	40d9      	lsrs	r1, r3
 8000800:	4330      	orrs	r0, r6
 8000802:	0c03      	lsrs	r3, r0, #16
 8000804:	fbb1 f6fe 	udiv	r6, r1, lr
 8000808:	fa1f f887 	uxth.w	r8, r7
 800080c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000814:	fb06 f108 	mul.w	r1, r6, r8
 8000818:	4299      	cmp	r1, r3
 800081a:	fa04 f402 	lsl.w	r4, r4, r2
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x19c>
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	f106 3cff 	add.w	ip, r6, #4294967295
 8000826:	f080 808d 	bcs.w	8000944 <__udivmoddi4+0x2ac>
 800082a:	4299      	cmp	r1, r3
 800082c:	f240 808a 	bls.w	8000944 <__udivmoddi4+0x2ac>
 8000830:	3e02      	subs	r6, #2
 8000832:	443b      	add	r3, r7
 8000834:	1a5b      	subs	r3, r3, r1
 8000836:	b281      	uxth	r1, r0
 8000838:	fbb3 f0fe 	udiv	r0, r3, lr
 800083c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000840:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000844:	fb00 f308 	mul.w	r3, r0, r8
 8000848:	428b      	cmp	r3, r1
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x1c4>
 800084c:	1879      	adds	r1, r7, r1
 800084e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000852:	d273      	bcs.n	800093c <__udivmoddi4+0x2a4>
 8000854:	428b      	cmp	r3, r1
 8000856:	d971      	bls.n	800093c <__udivmoddi4+0x2a4>
 8000858:	3802      	subs	r0, #2
 800085a:	4439      	add	r1, r7
 800085c:	1acb      	subs	r3, r1, r3
 800085e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000862:	e778      	b.n	8000756 <__udivmoddi4+0xbe>
 8000864:	f1c6 0c20 	rsb	ip, r6, #32
 8000868:	fa03 f406 	lsl.w	r4, r3, r6
 800086c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000870:	431c      	orrs	r4, r3
 8000872:	fa20 f70c 	lsr.w	r7, r0, ip
 8000876:	fa01 f306 	lsl.w	r3, r1, r6
 800087a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800087e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000882:	431f      	orrs	r7, r3
 8000884:	0c3b      	lsrs	r3, r7, #16
 8000886:	fbb1 f9fe 	udiv	r9, r1, lr
 800088a:	fa1f f884 	uxth.w	r8, r4
 800088e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000892:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000896:	fb09 fa08 	mul.w	sl, r9, r8
 800089a:	458a      	cmp	sl, r1
 800089c:	fa02 f206 	lsl.w	r2, r2, r6
 80008a0:	fa00 f306 	lsl.w	r3, r0, r6
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x220>
 80008a6:	1861      	adds	r1, r4, r1
 80008a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008ac:	d248      	bcs.n	8000940 <__udivmoddi4+0x2a8>
 80008ae:	458a      	cmp	sl, r1
 80008b0:	d946      	bls.n	8000940 <__udivmoddi4+0x2a8>
 80008b2:	f1a9 0902 	sub.w	r9, r9, #2
 80008b6:	4421      	add	r1, r4
 80008b8:	eba1 010a 	sub.w	r1, r1, sl
 80008bc:	b2bf      	uxth	r7, r7
 80008be:	fbb1 f0fe 	udiv	r0, r1, lr
 80008c2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ca:	fb00 f808 	mul.w	r8, r0, r8
 80008ce:	45b8      	cmp	r8, r7
 80008d0:	d907      	bls.n	80008e2 <__udivmoddi4+0x24a>
 80008d2:	19e7      	adds	r7, r4, r7
 80008d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008d8:	d22e      	bcs.n	8000938 <__udivmoddi4+0x2a0>
 80008da:	45b8      	cmp	r8, r7
 80008dc:	d92c      	bls.n	8000938 <__udivmoddi4+0x2a0>
 80008de:	3802      	subs	r0, #2
 80008e0:	4427      	add	r7, r4
 80008e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e6:	eba7 0708 	sub.w	r7, r7, r8
 80008ea:	fba0 8902 	umull	r8, r9, r0, r2
 80008ee:	454f      	cmp	r7, r9
 80008f0:	46c6      	mov	lr, r8
 80008f2:	4649      	mov	r1, r9
 80008f4:	d31a      	bcc.n	800092c <__udivmoddi4+0x294>
 80008f6:	d017      	beq.n	8000928 <__udivmoddi4+0x290>
 80008f8:	b15d      	cbz	r5, 8000912 <__udivmoddi4+0x27a>
 80008fa:	ebb3 020e 	subs.w	r2, r3, lr
 80008fe:	eb67 0701 	sbc.w	r7, r7, r1
 8000902:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000906:	40f2      	lsrs	r2, r6
 8000908:	ea4c 0202 	orr.w	r2, ip, r2
 800090c:	40f7      	lsrs	r7, r6
 800090e:	e9c5 2700 	strd	r2, r7, [r5]
 8000912:	2600      	movs	r6, #0
 8000914:	4631      	mov	r1, r6
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e70b      	b.n	8000738 <__udivmoddi4+0xa0>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0x60>
 8000924:	4618      	mov	r0, r3
 8000926:	e6fd      	b.n	8000724 <__udivmoddi4+0x8c>
 8000928:	4543      	cmp	r3, r8
 800092a:	d2e5      	bcs.n	80008f8 <__udivmoddi4+0x260>
 800092c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000930:	eb69 0104 	sbc.w	r1, r9, r4
 8000934:	3801      	subs	r0, #1
 8000936:	e7df      	b.n	80008f8 <__udivmoddi4+0x260>
 8000938:	4608      	mov	r0, r1
 800093a:	e7d2      	b.n	80008e2 <__udivmoddi4+0x24a>
 800093c:	4660      	mov	r0, ip
 800093e:	e78d      	b.n	800085c <__udivmoddi4+0x1c4>
 8000940:	4681      	mov	r9, r0
 8000942:	e7b9      	b.n	80008b8 <__udivmoddi4+0x220>
 8000944:	4666      	mov	r6, ip
 8000946:	e775      	b.n	8000834 <__udivmoddi4+0x19c>
 8000948:	4630      	mov	r0, r6
 800094a:	e74a      	b.n	80007e2 <__udivmoddi4+0x14a>
 800094c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000950:	4439      	add	r1, r7
 8000952:	e713      	b.n	800077c <__udivmoddi4+0xe4>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	e724      	b.n	80007a4 <__udivmoddi4+0x10c>
 800095a:	bf00      	nop

0800095c <__aeabi_idiv0>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <__io_putchar>:
  * @param  None
  * @retval None
  */
UART_HandleTypeDef huart4;
PUTCHAR_PROTOTYPE
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000968:	1d39      	adds	r1, r7, #4
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	2201      	movs	r2, #1
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <__io_putchar+0x20>)
 8000972:	f002 fa6a 	bl	8002e4a <HAL_UART_Transmit>
	return ch;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20012e24 	.word	0x20012e24

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f001 f829 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f845 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 f8cb 	bl	8000b2c <MX_GPIO_Init>
  MX_UART4_Init();
 8000996:	f000 f89f 	bl	8000ad8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  state = State_new();
 800099a:	f004 f837 	bl	8004a0c <State_new>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <main+0x74>)
 80009a2:	6013      	str	r3, [r2, #0]
  heap = new_heap(state, 3, 4);
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <main+0x74>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2204      	movs	r2, #4
 80009aa:	2103      	movs	r1, #3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 f847 	bl	8004a40 <new_heap>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a11      	ldr	r2, [pc, #68]	; (80009fc <main+0x78>)
 80009b6:	6013      	str	r3, [r2, #0]
  xSemaphore = xSemaphoreCreateMutex();
 80009b8:	2001      	movs	r0, #1
 80009ba:	f004 fe21 	bl	8005600 <xQueueCreateMutex>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <main+0x7c>)
 80009c2:	6013      	str	r3, [r2, #0]

//  xTaskCreate( printf_test, " printf_test", 500, NULL, 1, NULL);

//  xTaskCreate( darray_test, " darray_test", 500, NULL, 1, NULL);
//  xTaskCreate( gc_test, " gc_test", 500, NULL, 1, NULL);
  xTaskCreate( vector_test, " vector_test", 500, NULL, 1, &vector_task_handle);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <main+0x80>)
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2300      	movs	r3, #0
 80009ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d2:	490d      	ldr	r1, [pc, #52]	; (8000a08 <main+0x84>)
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <main+0x88>)
 80009d6:	f005 fb45 	bl	8006064 <xTaskCreate>
  xTaskCreate( hashmap_test, " hashmap_test", 500, NULL, 1, &map_task_handle);
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <main+0x8c>)
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2301      	movs	r3, #1
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009e8:	490a      	ldr	r1, [pc, #40]	; (8000a14 <main+0x90>)
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <main+0x94>)
 80009ec:	f005 fb3a 	bl	8006064 <xTaskCreate>

//  xTaskCreate( gc_flip, "gc_flip", 500, NULL, 2, &gc_flip_handle);

  vTaskStartScheduler();
 80009f0:	f005 fc7e 	bl	80062f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <main+0x70>
 80009f6:	bf00      	nop
 80009f8:	20012e1c 	.word	0x20012e1c
 80009fc:	20012e20 	.word	0x20012e20
 8000a00:	20012e18 	.word	0x20012e18
 8000a04:	20000094 	.word	0x20000094
 8000a08:	080093b8 	.word	0x080093b8
 8000a0c:	08000c81 	.word	0x08000c81
 8000a10:	20000098 	.word	0x20000098
 8000a14:	080093c8 	.word	0x080093c8
 8000a18:	080010e1 	.word	0x080010e1

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	; 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2230      	movs	r2, #48	; 0x30
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f007 fa8a 	bl	8007f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <SystemClock_Config+0xb4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <SystemClock_Config+0xb4>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <SystemClock_Config+0xb4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <SystemClock_Config+0xb8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <SystemClock_Config+0xb8>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <SystemClock_Config+0xb8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2310      	movs	r3, #16
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fa67 	bl	8001f60 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a98:	f000 fdba 	bl	8001610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fcca 	bl	8002450 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ac2:	f000 fda5 	bl	8001610 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_UART4_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_UART4_Init+0x4c>)
 8000b10:	f002 f94e 	bl	8002db0 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 fd79 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20012e24 	.word	0x20012e24
 8000b28:	40004c00 	.word	0x40004c00

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_GPIO_Init+0x30>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <MX_GPIO_Init+0x30>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_GPIO_Init+0x30>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <test_size>:
		// destroy test
		Tm_DArray_destroy(array);
	}
}

void test_size (TmHeap* heap, int* heap_size, int* white_size, int* ecru_size, int* grey_size, int* black_size) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b72:	f383 8811 	msr	BASEPRI, r3
 8000b76:	f3bf 8f6f 	isb	sy
 8000b7a:	f3bf 8f4f 	dsb	sy
 8000b7e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000b80:	bf00      	nop

	portDISABLE_INTERRUPTS();
		*heap_size = TmHeap_size(heap);
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f003 f893 	bl	8003cae <TmHeap_size>
 8000b88:	ec53 2b10 	vmov	r2, r3, d0
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f7ff fd42 	bl	8000618 <__aeabi_d2iz>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	601a      	str	r2, [r3, #0]
		*white_size = TmHeap_white_size(heap);
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f003 f8a2 	bl	8003ce4 <TmHeap_white_size>
 8000ba0:	ec53 2b10 	vmov	r2, r3, d0
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f7ff fd36 	bl	8000618 <__aeabi_d2iz>
 8000bac:	4602      	mov	r2, r0
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
		*ecru_size = TmHeap_ecru_size(heap);
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f003 f8c9 	bl	8003d4a <TmHeap_ecru_size>
 8000bb8:	ec53 2b10 	vmov	r2, r3, d0
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f7ff fd2a 	bl	8000618 <__aeabi_d2iz>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	601a      	str	r2, [r3, #0]
		*grey_size = TmHeap_grey_size(heap);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f003 f8e3 	bl	8003d96 <TmHeap_grey_size>
 8000bd0:	ec53 2b10 	vmov	r2, r3, d0
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f7ff fd1e 	bl	8000618 <__aeabi_d2iz>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	601a      	str	r2, [r3, #0]
		*black_size = TmHeap_black_size(heap);
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f003 f8fd 	bl	8003de2 <TmHeap_black_size>
 8000be8:	ec53 2b10 	vmov	r2, r3, d0
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff fd12 	bl	8000618 <__aeabi_d2iz>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	601a      	str	r2, [r3, #0]
		fprintf(stderr, "heap = %d, white = %d, ecru = %d, grey = %d, black = %d\n\r", *heap_size, *white_size, *ecru_size, *grey_size , *black_size);
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <test_size+0xd8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68d8      	ldr	r0, [r3, #12]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	681c      	ldr	r4, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681d      	ldr	r5, [r3, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c12:	6809      	ldr	r1, [r1, #0]
 8000c14:	9102      	str	r1, [sp, #8]
 8000c16:	9201      	str	r2, [sp, #4]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	462b      	mov	r3, r5
 8000c1c:	4622      	mov	r2, r4
 8000c1e:	4907      	ldr	r1, [pc, #28]	; (8000c3c <test_size+0xdc>)
 8000c20:	f007 f93c 	bl	8007e9c <fiprintf>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c2e:	bf00      	nop
	portENABLE_INTERRUPTS();
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}
 8000c38:	20000014 	.word	0x20000014
 8000c3c:	080093e8 	.word	0x080093e8

08000c40 <count_iter>:
		State_destroy(state);
	}
}

int count = 0;
void count_iter(Object* obj) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	count = count + OBJ2NUM(obj);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <count_iter+0x38>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fc79 	bl	8000544 <__aeabi_i2d>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c58:	f7ff fb28 	bl	80002ac <__adddf3>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff fcd8 	bl	8000618 <__aeabi_d2iz>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <count_iter+0x38>)
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000009c 	.word	0x2000009c
 8000c7c:	00000000 	.word	0x00000000

08000c80 <vector_test>:
//void relate_iter
void  vector_test(void *pvParameters) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b099      	sub	sp, #100	; 0x64
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	6078      	str	r0, [r7, #4]

	while (1) {
//		State *state = State_new();
//		TmHeap *heap = new_heap(state, 3, 3);

		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000c88:	4bbf      	ldr	r3, [pc, #764]	; (8000f88 <vector_test+0x308>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	f107 0410 	add.w	r4, r7, #16
 8000c90:	f107 0214 	add.w	r2, r7, #20
 8000c94:	f107 0118 	add.w	r1, r7, #24
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	f7ff ff5b 	bl	8000b60 <test_size>
        __asm volatile
 8000caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cae:	f383 8811 	msr	BASEPRI, r3
 8000cb2:	f3bf 8f6f 	isb	sy
 8000cb6:	f3bf 8f4f 	dsb	sy
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
 8000cbc:	bf00      	nop
		debug("[vector] vector task");
 8000cbe:	4bb3      	ldr	r3, [pc, #716]	; (8000f8c <vector_test+0x30c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68d8      	ldr	r0, [r3, #12]
 8000cc4:	f240 1373 	movw	r3, #371	; 0x173
 8000cc8:	4ab1      	ldr	r2, [pc, #708]	; (8000f90 <vector_test+0x310>)
 8000cca:	49b2      	ldr	r1, [pc, #712]	; (8000f94 <vector_test+0x314>)
 8000ccc:	f007 f8e6 	bl	8007e9c <fiprintf>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
        __asm volatile
 8000cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cd6:	f383 8811 	msr	BASEPRI, r3
    }
 8000cda:	bf00      	nop
		Object* vector = Vector_new(heap, 10);
 8000cdc:	4baa      	ldr	r3, [pc, #680]	; (8000f88 <vector_test+0x308>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fa27 	bl	8005136 <Vector_new>
 8000ce8:	6578      	str	r0, [r7, #84]	; 0x54
		if (!vector) continue;
 8000cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 81df 	beq.w	80010b0 <vector_test+0x430>
        __asm volatile
 8000cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf6:	f383 8811 	msr	BASEPRI, r3
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	f3bf 8f4f 	dsb	sy
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
    }
 8000d04:	bf00      	nop
		debug("[vector] create vector");
 8000d06:	4ba1      	ldr	r3, [pc, #644]	; (8000f8c <vector_test+0x30c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68d8      	ldr	r0, [r3, #12]
 8000d0c:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8000d10:	4a9f      	ldr	r2, [pc, #636]	; (8000f90 <vector_test+0x310>)
 8000d12:	49a1      	ldr	r1, [pc, #644]	; (8000f98 <vector_test+0x318>)
 8000d14:	f007 f8c2 	bl	8007e9c <fiprintf>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
        __asm volatile
 8000d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d1e:	f383 8811 	msr	BASEPRI, r3
    }
 8000d22:	bf00      	nop
		Object_make_root(vector, state);
 8000d24:	4b9d      	ldr	r3, [pc, #628]	; (8000f9c <vector_test+0x31c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000d2c:	f004 fa50 	bl	80051d0 <Object_make_root>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000d30:	4b95      	ldr	r3, [pc, #596]	; (8000f88 <vector_test+0x308>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	f107 0410 	add.w	r4, r7, #16
 8000d38:	f107 0214 	add.w	r2, r7, #20
 8000d3c:	f107 0118 	add.w	r1, r7, #24
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	4623      	mov	r3, r4
 8000d4e:	f7ff ff07 	bl	8000b60 <test_size>

		if (gc_vector_push(heap, vector, 1) == 0) {
 8000d52:	4b8d      	ldr	r3, [pc, #564]	; (8000f88 <vector_test+0x308>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8000f68 <vector_test+0x2e8>
 8000d5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fe8b 	bl	8004a78 <gc_vector_push>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d129      	bne.n	8000dbc <vector_test+0x13c>
        __asm volatile
 8000d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6c:	f383 8811 	msr	BASEPRI, r3
 8000d70:	f3bf 8f6f 	isb	sy
 8000d74:	f3bf 8f4f 	dsb	sy
 8000d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8000d7a:	bf00      	nop
			debug("[vector] push 1");
 8000d7c:	4b83      	ldr	r3, [pc, #524]	; (8000f8c <vector_test+0x30c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68d8      	ldr	r0, [r3, #12]
 8000d82:	f240 137b 	movw	r3, #379	; 0x17b
 8000d86:	4a82      	ldr	r2, [pc, #520]	; (8000f90 <vector_test+0x310>)
 8000d88:	4985      	ldr	r1, [pc, #532]	; (8000fa0 <vector_test+0x320>)
 8000d8a:	f007 f887 	bl	8007e9c <fiprintf>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8000d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d94:	f383 8811 	msr	BASEPRI, r3
    }
 8000d98:	bf00      	nop
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <vector_test+0x308>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 0410 	add.w	r4, r7, #16
 8000da2:	f107 0214 	add.w	r2, r7, #20
 8000da6:	f107 0118 	add.w	r1, r7, #24
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	4623      	mov	r3, r4
 8000db8:	f7ff fed2 	bl	8000b60 <test_size>
		}
		if (gc_vector_push(heap, vector, 2) == 0) {
 8000dbc:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <vector_test+0x308>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8000f70 <vector_test+0x2f0>
 8000dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fe56 	bl	8004a78 <gc_vector_push>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d129      	bne.n	8000e26 <vector_test+0x1a6>
        __asm volatile
 8000dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8000de4:	bf00      	nop
			debug("[vector] push 2");
 8000de6:	4b69      	ldr	r3, [pc, #420]	; (8000f8c <vector_test+0x30c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68d8      	ldr	r0, [r3, #12]
 8000dec:	f240 137f 	movw	r3, #383	; 0x17f
 8000df0:	4a67      	ldr	r2, [pc, #412]	; (8000f90 <vector_test+0x310>)
 8000df2:	496c      	ldr	r1, [pc, #432]	; (8000fa4 <vector_test+0x324>)
 8000df4:	f007 f852 	bl	8007e9c <fiprintf>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8000dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfe:	f383 8811 	msr	BASEPRI, r3
    }
 8000e02:	bf00      	nop
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000e04:	4b60      	ldr	r3, [pc, #384]	; (8000f88 <vector_test+0x308>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	f107 0410 	add.w	r4, r7, #16
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	f107 0118 	add.w	r1, r7, #24
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	4623      	mov	r3, r4
 8000e22:	f7ff fe9d 	bl	8000b60 <test_size>
		}
		if (gc_vector_push(heap, vector, 3) == 0){
 8000e26:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <vector_test+0x308>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8000f78 <vector_test+0x2f8>
 8000e2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fe21 	bl	8004a78 <gc_vector_push>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d129      	bne.n	8000e90 <vector_test+0x210>
        __asm volatile
 8000e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e40:	f383 8811 	msr	BASEPRI, r3
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	f3bf 8f4f 	dsb	sy
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000e4e:	bf00      	nop
			debug("[vector] push 3");
 8000e50:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <vector_test+0x30c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68d8      	ldr	r0, [r3, #12]
 8000e56:	f240 1383 	movw	r3, #387	; 0x183
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	; (8000f90 <vector_test+0x310>)
 8000e5c:	4952      	ldr	r1, [pc, #328]	; (8000fa8 <vector_test+0x328>)
 8000e5e:	f007 f81d 	bl	8007e9c <fiprintf>
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
        __asm volatile
 8000e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e68:	f383 8811 	msr	BASEPRI, r3
    }
 8000e6c:	bf00      	nop
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <vector_test+0x308>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	f107 0410 	add.w	r4, r7, #16
 8000e76:	f107 0214 	add.w	r2, r7, #20
 8000e7a:	f107 0118 	add.w	r1, r7, #24
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	f7ff fe68 	bl	8000b60 <test_size>
		}

		count = 0;
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <vector_test+0x32c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
		Vector_each(vector, count_iter);
 8000e96:	4946      	ldr	r1, [pc, #280]	; (8000fb0 <vector_test+0x330>)
 8000e98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e9a:	f006 fb5d 	bl	8007558 <Vector_each>
		printf("count = %d\r\n", count);
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <vector_test+0x32c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4843      	ldr	r0, [pc, #268]	; (8000fb4 <vector_test+0x334>)
 8000ea6:	f007 fbfd 	bl	80086a4 <iprintf>

		Number_new(heap, 7);
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <vector_test+0x308>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8000f80 <vector_test+0x300>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 f914 	bl	80050e0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <vector_test+0x308>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	f107 0410 	add.w	r4, r7, #16
 8000ec0:	f107 0214 	add.w	r2, r7, #20
 8000ec4:	f107 0118 	add.w	r1, r7, #24
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	f7ff fe43 	bl	8000b60 <test_size>
		Number_new(heap, 7); //scan
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <vector_test+0x308>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8000f80 <vector_test+0x300>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 f8fc 	bl	80050e0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <vector_test+0x308>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f107 0410 	add.w	r4, r7, #16
 8000ef0:	f107 0214 	add.w	r2, r7, #20
 8000ef4:	f107 0118 	add.w	r1, r7, #24
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4623      	mov	r3, r4
 8000f06:	f7ff fe2b 	bl	8000b60 <test_size>
		Number_new(heap, 7); // add rootset
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <vector_test+0x308>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8000f80 <vector_test+0x300>
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 f8e4 	bl	80050e0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <vector_test+0x308>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f107 0410 	add.w	r4, r7, #16
 8000f20:	f107 0214 	add.w	r2, r7, #20
 8000f24:	f107 0118 	add.w	r1, r7, #24
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4623      	mov	r3, r4
 8000f36:	f7ff fe13 	bl	8000b60 <test_size>

		gc_vector_clear(vector);
 8000f3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000f3c:	f003 fe01 	bl	8004b42 <gc_vector_clear>
        __asm volatile
 8000f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f44:	f383 8811 	msr	BASEPRI, r3
 8000f48:	f3bf 8f6f 	isb	sy
 8000f4c:	f3bf 8f4f 	dsb	sy
 8000f50:	61fb      	str	r3, [r7, #28]
    }
 8000f52:	bf00      	nop
		debug("[vector] clear");
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <vector_test+0x30c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68d8      	ldr	r0, [r3, #12]
 8000f5a:	f240 1393 	movw	r3, #403	; 0x193
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <vector_test+0x310>)
 8000f60:	4915      	ldr	r1, [pc, #84]	; (8000fb8 <vector_test+0x338>)
 8000f62:	f006 ff9b 	bl	8007e9c <fiprintf>
 8000f66:	e029      	b.n	8000fbc <vector_test+0x33c>
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	3ff00000 	.word	0x3ff00000
 8000f70:	00000000 	.word	0x00000000
 8000f74:	40000000 	.word	0x40000000
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40080000 	.word	0x40080000
 8000f80:	00000000 	.word	0x00000000
 8000f84:	401c0000 	.word	0x401c0000
 8000f88:	20012e20 	.word	0x20012e20
 8000f8c:	20000014 	.word	0x20000014
 8000f90:	0800943c 	.word	0x0800943c
 8000f94:	08009450 	.word	0x08009450
 8000f98:	08009474 	.word	0x08009474
 8000f9c:	20012e1c 	.word	0x20012e1c
 8000fa0:	0800949c 	.word	0x0800949c
 8000fa4:	080094bc 	.word	0x080094bc
 8000fa8:	080094dc 	.word	0x080094dc
 8000fac:	2000009c 	.word	0x2000009c
 8000fb0:	08000c41 	.word	0x08000c41
 8000fb4:	080094fc 	.word	0x080094fc
 8000fb8:	0800950c 	.word	0x0800950c
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
        __asm volatile
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	f383 8811 	msr	BASEPRI, r3
    }
 8000fc6:	bf00      	nop

		count = 0;
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <vector_test+0x440>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
		Vector_each(vector, count_iter);
 8000fce:	493d      	ldr	r1, [pc, #244]	; (80010c4 <vector_test+0x444>)
 8000fd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fd2:	f006 fac1 	bl	8007558 <Vector_each>
		printf("count = %d\r\n", count);
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <vector_test+0x440>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	483a      	ldr	r0, [pc, #232]	; (80010c8 <vector_test+0x448>)
 8000fde:	f007 fb61 	bl	80086a4 <iprintf>

		Number_new(heap, 7);
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <vector_test+0x44c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80010b8 <vector_test+0x438>
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 f878 	bl	80050e0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <vector_test+0x44c>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f107 0410 	add.w	r4, r7, #16
 8000ff8:	f107 0214 	add.w	r2, r7, #20
 8000ffc:	f107 0118 	add.w	r1, r7, #24
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4623      	mov	r3, r4
 800100e:	f7ff fda7 	bl	8000b60 <test_size>
		Number_new(heap, 7);
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <vector_test+0x44c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	ed9f 0b28 	vldr	d0, [pc, #160]	; 80010b8 <vector_test+0x438>
 800101a:	4618      	mov	r0, r3
 800101c:	f004 f860 	bl	80050e0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <vector_test+0x44c>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f107 0410 	add.w	r4, r7, #16
 8001028:	f107 0214 	add.w	r2, r7, #20
 800102c:	f107 0118 	add.w	r1, r7, #24
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4623      	mov	r3, r4
 800103e:	f7ff fd8f 	bl	8000b60 <test_size>
		Number_new(heap, 7);
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <vector_test+0x44c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80010b8 <vector_test+0x438>
 800104a:	4618      	mov	r0, r3
 800104c:	f004 f848 	bl	80050e0 <Number_new>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <vector_test+0x44c>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 0410 	add.w	r4, r7, #16
 8001058:	f107 0214 	add.w	r2, r7, #20
 800105c:	f107 0118 	add.w	r1, r7, #24
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4623      	mov	r3, r4
 800106e:	f7ff fd77 	bl	8000b60 <test_size>

		Object_delete_root(vector, state);
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <vector_test+0x450>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800107a:	f004 f965 	bl	8005348 <Object_delete_root>
        __asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001090:	bf00      	nop
		debug("[vector] delete vector");
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <vector_test+0x454>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68d8      	ldr	r0, [r3, #12]
 8001098:	f240 13a1 	movw	r3, #417	; 0x1a1
 800109c:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <vector_test+0x458>)
 800109e:	490f      	ldr	r1, [pc, #60]	; (80010dc <vector_test+0x45c>)
 80010a0:	f006 fefc 	bl	8007e9c <fiprintf>
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010aa:	f383 8811 	msr	BASEPRI, r3
    }
 80010ae:	e000      	b.n	80010b2 <vector_test+0x432>
		if (!vector) continue;
 80010b0:	bf00      	nop
	while (1) {
 80010b2:	e5e9      	b.n	8000c88 <vector_test+0x8>
 80010b4:	f3af 8000 	nop.w
 80010b8:	00000000 	.word	0x00000000
 80010bc:	401c0000 	.word	0x401c0000
 80010c0:	2000009c 	.word	0x2000009c
 80010c4:	08000c41 	.word	0x08000c41
 80010c8:	080094fc 	.word	0x080094fc
 80010cc:	20012e20 	.word	0x20012e20
 80010d0:	20012e1c 	.word	0x20012e1c
 80010d4:	20000014 	.word	0x20000014
 80010d8:	0800943c 	.word	0x0800943c
 80010dc:	0800952c 	.word	0x0800952c

080010e0 <hashmap_test>:
//		State_destroy(state);
	}
}


void  hashmap_test(void *pvParameters) {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b0a3      	sub	sp, #140	; 0x8c
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]

	while (1) {
//		State *state = State_new();
//		TmHeap *heap = new_heap(state, 3, 4);

		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 80010e8:	4bb5      	ldr	r3, [pc, #724]	; (80013c0 <hashmap_test+0x2e0>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 0414 	add.w	r4, r7, #20
 80010f0:	f107 0218 	add.w	r2, r7, #24
 80010f4:	f107 011c 	add.w	r1, r7, #28
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4623      	mov	r3, r4
 8001106:	f7ff fd2b 	bl	8000b60 <test_size>
        __asm volatile
 800110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	673b      	str	r3, [r7, #112]	; 0x70
    }
 800111c:	bf00      	nop
		debug("[hashmap] map task");
 800111e:	4ba9      	ldr	r3, [pc, #676]	; (80013c4 <hashmap_test+0x2e4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68d8      	ldr	r0, [r3, #12]
 8001124:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8001128:	4aa7      	ldr	r2, [pc, #668]	; (80013c8 <hashmap_test+0x2e8>)
 800112a:	49a8      	ldr	r1, [pc, #672]	; (80013cc <hashmap_test+0x2ec>)
 800112c:	f006 feb6 	bl	8007e9c <fiprintf>
 8001130:	2300      	movs	r3, #0
 8001132:	677b      	str	r3, [r7, #116]	; 0x74
        __asm volatile
 8001134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001136:	f383 8811 	msr	BASEPRI, r3
    }
 800113a:	bf00      	nop
		Object* map = Map_new(heap);
 800113c:	4ba0      	ldr	r3, [pc, #640]	; (80013c0 <hashmap_test+0x2e0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f004 f813 	bl	800516c <Map_new>
 8001146:	67f8      	str	r0, [r7, #124]	; 0x7c
		if (!map) continue;
 8001148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8234 	beq.w	80015b8 <hashmap_test+0x4d8>
        __asm volatile
 8001150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f3bf 8f6f 	isb	sy
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	66bb      	str	r3, [r7, #104]	; 0x68
    }
 8001162:	bf00      	nop
		debug("[hashmap] create map");
 8001164:	4b97      	ldr	r3, [pc, #604]	; (80013c4 <hashmap_test+0x2e4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68d8      	ldr	r0, [r3, #12]
 800116a:	f240 13b9 	movw	r3, #441	; 0x1b9
 800116e:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <hashmap_test+0x2e8>)
 8001170:	4997      	ldr	r1, [pc, #604]	; (80013d0 <hashmap_test+0x2f0>)
 8001172:	f006 fe93 	bl	8007e9c <fiprintf>
 8001176:	2300      	movs	r3, #0
 8001178:	66fb      	str	r3, [r7, #108]	; 0x6c
        __asm volatile
 800117a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800117c:	f383 8811 	msr	BASEPRI, r3
    }
 8001180:	bf00      	nop
		Object_make_root(map, state);
 8001182:	4b94      	ldr	r3, [pc, #592]	; (80013d4 <hashmap_test+0x2f4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800118a:	f004 f821 	bl	80051d0 <Object_make_root>
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 800118e:	4b8c      	ldr	r3, [pc, #560]	; (80013c0 <hashmap_test+0x2e0>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f107 0414 	add.w	r4, r7, #20
 8001196:	f107 0218 	add.w	r2, r7, #24
 800119a:	f107 011c 	add.w	r1, r7, #28
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4623      	mov	r3, r4
 80011ac:	f7ff fcd8 	bl	8000b60 <test_size>
		// set and get
		char* result;
		if( gc_Hashmap_set(heap, map, "test data 1", "THE OBJECT 1") == 0) {
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <hashmap_test+0x2e0>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <hashmap_test+0x2f8>)
 80011b6:	4a89      	ldr	r2, [pc, #548]	; (80013dc <hashmap_test+0x2fc>)
 80011b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80011ba:	f003 f9cb 	bl	8004554 <gc_Hashmap_set>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d12e      	bne.n	8001222 <hashmap_test+0x142>
        __asm volatile
 80011c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c8:	f383 8811 	msr	BASEPRI, r3
 80011cc:	f3bf 8f6f 	isb	sy
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	663b      	str	r3, [r7, #96]	; 0x60
    }
 80011d6:	bf00      	nop
			debug("[hashmap] map set 1");
 80011d8:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <hashmap_test+0x2e4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d8      	ldr	r0, [r3, #12]
 80011de:	f240 13bf 	movw	r3, #447	; 0x1bf
 80011e2:	4a79      	ldr	r2, [pc, #484]	; (80013c8 <hashmap_test+0x2e8>)
 80011e4:	497e      	ldr	r1, [pc, #504]	; (80013e0 <hashmap_test+0x300>)
 80011e6:	f006 fe59 	bl	8007e9c <fiprintf>
 80011ea:	2300      	movs	r3, #0
 80011ec:	667b      	str	r3, [r7, #100]	; 0x64
        __asm volatile
 80011ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011f0:	f383 8811 	msr	BASEPRI, r3
    }
 80011f4:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 1");
 80011f6:	4979      	ldr	r1, [pc, #484]	; (80013dc <hashmap_test+0x2fc>)
 80011f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80011fa:	f003 faf3 	bl	80047e4 <gc_Hashmap_get>
 80011fe:	67b8      	str	r0, [r7, #120]	; 0x78
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001200:	4b6f      	ldr	r3, [pc, #444]	; (80013c0 <hashmap_test+0x2e0>)
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f107 0414 	add.w	r4, r7, #20
 8001208:	f107 0218 	add.w	r2, r7, #24
 800120c:	f107 011c 	add.w	r1, r7, #28
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	4623      	mov	r3, r4
 800121e:	f7ff fc9f 	bl	8000b60 <test_size>
		}
		if( gc_Hashmap_set(heap, map, "test data 2", "THE OBJECT 2") == 0) { // flip
 8001222:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <hashmap_test+0x2e0>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <hashmap_test+0x304>)
 8001228:	4a6f      	ldr	r2, [pc, #444]	; (80013e8 <hashmap_test+0x308>)
 800122a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800122c:	f003 f992 	bl	8004554 <gc_Hashmap_set>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d12e      	bne.n	8001294 <hashmap_test+0x1b4>
        __asm volatile
 8001236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123a:	f383 8811 	msr	BASEPRI, r3
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	f3bf 8f4f 	dsb	sy
 8001246:	65bb      	str	r3, [r7, #88]	; 0x58
    }
 8001248:	bf00      	nop
			debug("[hashmap] map set 2");
 800124a:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <hashmap_test+0x2e4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68d8      	ldr	r0, [r3, #12]
 8001250:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8001254:	4a5c      	ldr	r2, [pc, #368]	; (80013c8 <hashmap_test+0x2e8>)
 8001256:	4965      	ldr	r1, [pc, #404]	; (80013ec <hashmap_test+0x30c>)
 8001258:	f006 fe20 	bl	8007e9c <fiprintf>
 800125c:	2300      	movs	r3, #0
 800125e:	65fb      	str	r3, [r7, #92]	; 0x5c
        __asm volatile
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	f383 8811 	msr	BASEPRI, r3
    }
 8001266:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 2");
 8001268:	495f      	ldr	r1, [pc, #380]	; (80013e8 <hashmap_test+0x308>)
 800126a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800126c:	f003 faba 	bl	80047e4 <gc_Hashmap_get>
 8001270:	67b8      	str	r0, [r7, #120]	; 0x78
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <hashmap_test+0x2e0>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f107 0414 	add.w	r4, r7, #20
 800127a:	f107 0218 	add.w	r2, r7, #24
 800127e:	f107 011c 	add.w	r1, r7, #28
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4623      	mov	r3, r4
 8001290:	f7ff fc66 	bl	8000b60 <test_size>
//		gc_Hashmap_delete(map, "test data 1");
//		result = gc_Hashmap_get(map, "test data 1");
//		debug("[hashmap] map delete 1");
//		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);

		if( gc_Hashmap_set(heap, map, "test data 3", "THE OBJECT 3") == 0) {
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <hashmap_test+0x2e0>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <hashmap_test+0x310>)
 800129a:	4a56      	ldr	r2, [pc, #344]	; (80013f4 <hashmap_test+0x314>)
 800129c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800129e:	f003 f959 	bl	8004554 <gc_Hashmap_set>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12e      	bne.n	8001306 <hashmap_test+0x226>
        __asm volatile
 80012a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ac:	f383 8811 	msr	BASEPRI, r3
 80012b0:	f3bf 8f6f 	isb	sy
 80012b4:	f3bf 8f4f 	dsb	sy
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
    }
 80012ba:	bf00      	nop
			debug("[hashmap] map set 3");
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <hashmap_test+0x2e4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68d8      	ldr	r0, [r3, #12]
 80012c2:	f240 13cf 	movw	r3, #463	; 0x1cf
 80012c6:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <hashmap_test+0x2e8>)
 80012c8:	494b      	ldr	r1, [pc, #300]	; (80013f8 <hashmap_test+0x318>)
 80012ca:	f006 fde7 	bl	8007e9c <fiprintf>
 80012ce:	2300      	movs	r3, #0
 80012d0:	657b      	str	r3, [r7, #84]	; 0x54
        __asm volatile
 80012d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d4:	f383 8811 	msr	BASEPRI, r3
    }
 80012d8:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 3");
 80012da:	4946      	ldr	r1, [pc, #280]	; (80013f4 <hashmap_test+0x314>)
 80012dc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80012de:	f003 fa81 	bl	80047e4 <gc_Hashmap_get>
 80012e2:	67b8      	str	r0, [r7, #120]	; 0x78
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <hashmap_test+0x2e0>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	f107 0414 	add.w	r4, r7, #20
 80012ec:	f107 0218 	add.w	r2, r7, #24
 80012f0:	f107 011c 	add.w	r1, r7, #28
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4623      	mov	r3, r4
 8001302:	f7ff fc2d 	bl	8000b60 <test_size>
		}
		if( gc_Hashmap_set(heap, map, "test data 4", "THE OBJECT 4") == 0) {
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <hashmap_test+0x2e0>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <hashmap_test+0x31c>)
 800130c:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <hashmap_test+0x320>)
 800130e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001310:	f003 f920 	bl	8004554 <gc_Hashmap_set>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d13d      	bne.n	8001396 <hashmap_test+0x2b6>
        __asm volatile
 800131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 800132c:	bf00      	nop
			debug("[hashmap] map set 4");
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <hashmap_test+0x2e4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d8      	ldr	r0, [r3, #12]
 8001334:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <hashmap_test+0x2e8>)
 800133a:	4932      	ldr	r1, [pc, #200]	; (8001404 <hashmap_test+0x324>)
 800133c:	f006 fdae 	bl	8007e9c <fiprintf>
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
        __asm volatile
 8001344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001346:	f383 8811 	msr	BASEPRI, r3
    }
 800134a:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 1");
 800134c:	4923      	ldr	r1, [pc, #140]	; (80013dc <hashmap_test+0x2fc>)
 800134e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001350:	f003 fa48 	bl	80047e4 <gc_Hashmap_get>
 8001354:	67b8      	str	r0, [r7, #120]	; 0x78
			result = gc_Hashmap_get(map, "test data 2");
 8001356:	4924      	ldr	r1, [pc, #144]	; (80013e8 <hashmap_test+0x308>)
 8001358:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800135a:	f003 fa43 	bl	80047e4 <gc_Hashmap_get>
 800135e:	67b8      	str	r0, [r7, #120]	; 0x78
			result = gc_Hashmap_get(map, "test data 3");
 8001360:	4924      	ldr	r1, [pc, #144]	; (80013f4 <hashmap_test+0x314>)
 8001362:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001364:	f003 fa3e 	bl	80047e4 <gc_Hashmap_get>
 8001368:	67b8      	str	r0, [r7, #120]	; 0x78
			result = gc_Hashmap_get(map, "test data 4");
 800136a:	4925      	ldr	r1, [pc, #148]	; (8001400 <hashmap_test+0x320>)
 800136c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800136e:	f003 fa39 	bl	80047e4 <gc_Hashmap_get>
 8001372:	67b8      	str	r0, [r7, #120]	; 0x78
			test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <hashmap_test+0x2e0>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 0414 	add.w	r4, r7, #20
 800137c:	f107 0218 	add.w	r2, r7, #24
 8001380:	f107 011c 	add.w	r1, r7, #28
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4623      	mov	r3, r4
 8001392:	f7ff fbe5 	bl	8000b60 <test_size>
		}
		// delete
		gc_Hashmap_delete(map, "test data 1");
 8001396:	4911      	ldr	r1, [pc, #68]	; (80013dc <hashmap_test+0x2fc>)
 8001398:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800139a:	f003 fa91 	bl	80048c0 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 1");
 800139e:	490f      	ldr	r1, [pc, #60]	; (80013dc <hashmap_test+0x2fc>)
 80013a0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80013a2:	f003 fa1f 	bl	80047e4 <gc_Hashmap_get>
 80013a6:	67b8      	str	r0, [r7, #120]	; 0x78
        __asm volatile
 80013a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ac:	f383 8811 	msr	BASEPRI, r3
 80013b0:	f3bf 8f6f 	isb	sy
 80013b4:	f3bf 8f4f 	dsb	sy
 80013b8:	623b      	str	r3, [r7, #32]
    }
 80013ba:	bf00      	nop
 80013bc:	e024      	b.n	8001408 <hashmap_test+0x328>
 80013be:	bf00      	nop
 80013c0:	20012e20 	.word	0x20012e20
 80013c4:	20000014 	.word	0x20000014
 80013c8:	0800943c 	.word	0x0800943c
 80013cc:	08009554 	.word	0x08009554
 80013d0:	08009578 	.word	0x08009578
 80013d4:	20012e1c 	.word	0x20012e1c
 80013d8:	0800959c 	.word	0x0800959c
 80013dc:	080095ac 	.word	0x080095ac
 80013e0:	080095b8 	.word	0x080095b8
 80013e4:	080095dc 	.word	0x080095dc
 80013e8:	080095ec 	.word	0x080095ec
 80013ec:	080095f8 	.word	0x080095f8
 80013f0:	0800961c 	.word	0x0800961c
 80013f4:	0800962c 	.word	0x0800962c
 80013f8:	08009638 	.word	0x08009638
 80013fc:	0800965c 	.word	0x0800965c
 8001400:	0800966c 	.word	0x0800966c
 8001404:	08009678 	.word	0x08009678
		debug("[hashmap] map delete 1");
 8001408:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <hashmap_test+0x4dc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68d8      	ldr	r0, [r3, #12]
 800140e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8001412:	4a6b      	ldr	r2, [pc, #428]	; (80015c0 <hashmap_test+0x4e0>)
 8001414:	496b      	ldr	r1, [pc, #428]	; (80015c4 <hashmap_test+0x4e4>)
 8001416:	f006 fd41 	bl	8007e9c <fiprintf>
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f383 8811 	msr	BASEPRI, r3
    }
 8001424:	bf00      	nop
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <hashmap_test+0x4e8>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	f107 0414 	add.w	r4, r7, #20
 800142e:	f107 0218 	add.w	r2, r7, #24
 8001432:	f107 011c 	add.w	r1, r7, #28
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4623      	mov	r3, r4
 8001444:	f7ff fb8c 	bl	8000b60 <test_size>

		gc_Hashmap_delete(map, "test data 2");
 8001448:	4960      	ldr	r1, [pc, #384]	; (80015cc <hashmap_test+0x4ec>)
 800144a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800144c:	f003 fa38 	bl	80048c0 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 2");
 8001450:	495e      	ldr	r1, [pc, #376]	; (80015cc <hashmap_test+0x4ec>)
 8001452:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001454:	f003 f9c6 	bl	80047e4 <gc_Hashmap_get>
 8001458:	67b8      	str	r0, [r7, #120]	; 0x78
        __asm volatile
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800146c:	bf00      	nop
		debug("[hashmap] map delete 2");
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <hashmap_test+0x4dc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68d8      	ldr	r0, [r3, #12]
 8001474:	f240 13e3 	movw	r3, #483	; 0x1e3
 8001478:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <hashmap_test+0x4e0>)
 800147a:	4955      	ldr	r1, [pc, #340]	; (80015d0 <hashmap_test+0x4f0>)
 800147c:	f006 fd0e 	bl	8007e9c <fiprintf>
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
        __asm volatile
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	f383 8811 	msr	BASEPRI, r3
    }
 800148a:	bf00      	nop
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 800148c:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <hashmap_test+0x4e8>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	f107 0414 	add.w	r4, r7, #20
 8001494:	f107 0218 	add.w	r2, r7, #24
 8001498:	f107 011c 	add.w	r1, r7, #28
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4623      	mov	r3, r4
 80014aa:	f7ff fb59 	bl	8000b60 <test_size>

		gc_Hashmap_delete(map, "test data 3");
 80014ae:	4949      	ldr	r1, [pc, #292]	; (80015d4 <hashmap_test+0x4f4>)
 80014b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80014b2:	f003 fa05 	bl	80048c0 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 3");
 80014b6:	4947      	ldr	r1, [pc, #284]	; (80015d4 <hashmap_test+0x4f4>)
 80014b8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80014ba:	f003 f993 	bl	80047e4 <gc_Hashmap_get>
 80014be:	67b8      	str	r0, [r7, #120]	; 0x78
        __asm volatile
 80014c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c4:	f383 8811 	msr	BASEPRI, r3
 80014c8:	f3bf 8f6f 	isb	sy
 80014cc:	f3bf 8f4f 	dsb	sy
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
    }
 80014d2:	bf00      	nop
		debug("[hashmap] map delete 3");
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <hashmap_test+0x4dc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d8      	ldr	r0, [r3, #12]
 80014da:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <hashmap_test+0x4e0>)
 80014e0:	493d      	ldr	r1, [pc, #244]	; (80015d8 <hashmap_test+0x4f8>)
 80014e2:	f006 fcdb 	bl	8007e9c <fiprintf>
 80014e6:	2300      	movs	r3, #0
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
        __asm volatile
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	f383 8811 	msr	BASEPRI, r3
    }
 80014f0:	bf00      	nop
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <hashmap_test+0x4e8>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f107 0414 	add.w	r4, r7, #20
 80014fa:	f107 0218 	add.w	r2, r7, #24
 80014fe:	f107 011c 	add.w	r1, r7, #28
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4623      	mov	r3, r4
 8001510:	f7ff fb26 	bl	8000b60 <test_size>

		gc_Hashmap_delete(map, "test data 4");
 8001514:	4931      	ldr	r1, [pc, #196]	; (80015dc <hashmap_test+0x4fc>)
 8001516:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001518:	f003 f9d2 	bl	80048c0 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 4");
 800151c:	492f      	ldr	r1, [pc, #188]	; (80015dc <hashmap_test+0x4fc>)
 800151e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001520:	f003 f960 	bl	80047e4 <gc_Hashmap_get>
 8001524:	67b8      	str	r0, [r7, #120]	; 0x78
        __asm volatile
 8001526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8001538:	bf00      	nop
		debug("[hashmap] map delete 4");
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <hashmap_test+0x4dc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68d8      	ldr	r0, [r3, #12]
 8001540:	f240 13ed 	movw	r3, #493	; 0x1ed
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <hashmap_test+0x4e0>)
 8001546:	4926      	ldr	r1, [pc, #152]	; (80015e0 <hashmap_test+0x500>)
 8001548:	f006 fca8 	bl	8007e9c <fiprintf>
 800154c:	2300      	movs	r3, #0
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
        __asm volatile
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	f383 8811 	msr	BASEPRI, r3
    }
 8001556:	bf00      	nop
		test_size(heap, &heap_size, &white_size, &ecru_size, &grey_size, &black_size);
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <hashmap_test+0x4e8>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f107 0414 	add.w	r4, r7, #20
 8001560:	f107 0218 	add.w	r2, r7, #24
 8001564:	f107 011c 	add.w	r1, r7, #28
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	f7ff faf3 	bl	8000b60 <test_size>

		Object_delete_root(map, state);
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <hashmap_test+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001582:	f003 fee1 	bl	8005348 <Object_delete_root>
        __asm volatile
 8001586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
    }
 8001598:	bf00      	nop
		debug("[hashmap] delete map");
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <hashmap_test+0x4dc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68d8      	ldr	r0, [r3, #12]
 80015a0:	f240 13f1 	movw	r3, #497	; 0x1f1
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <hashmap_test+0x4e0>)
 80015a6:	4910      	ldr	r1, [pc, #64]	; (80015e8 <hashmap_test+0x508>)
 80015a8:	f006 fc78 	bl	8007e9c <fiprintf>
 80015ac:	2300      	movs	r3, #0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
        __asm volatile
 80015b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b2:	f383 8811 	msr	BASEPRI, r3
    }
 80015b6:	e000      	b.n	80015ba <hashmap_test+0x4da>
		if (!map) continue;
 80015b8:	bf00      	nop
	while (1) {
 80015ba:	e595      	b.n	80010e8 <hashmap_test+0x8>
 80015bc:	20000014 	.word	0x20000014
 80015c0:	0800943c 	.word	0x0800943c
 80015c4:	0800969c 	.word	0x0800969c
 80015c8:	20012e20 	.word	0x20012e20
 80015cc:	080095ec 	.word	0x080095ec
 80015d0:	080096c4 	.word	0x080096c4
 80015d4:	0800962c 	.word	0x0800962c
 80015d8:	080096ec 	.word	0x080096ec
 80015dc:	0800966c 	.word	0x0800966c
 80015e0:	08009714 	.word	0x08009714
 80015e4:	20012e1c 	.word	0x20012e1c
 80015e8:	0800973c 	.word	0x0800973c

080015ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015fe:	f000 fa11 	bl	8001a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40001400 	.word	0x40001400

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_MspInit+0x4c>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c6:	2303      	movs	r3, #3
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016d6:	2308      	movs	r3, #8
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_UART_MspInit+0x8c>)
 80016e2:	f000 faa1 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004c00 	.word	0x40004c00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2037      	movs	r0, #55	; 0x37
 8001712:	f000 fa5f 	bl	8001bd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001716:	2037      	movs	r0, #55	; 0x37
 8001718:	f000 fa78 	bl	8001c0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_InitTick+0xa0>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_InitTick+0xa0>)
 8001726:	f043 0320 	orr.w	r3, r3, #32
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_InitTick+0xa0>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001738:	f107 0210 	add.w	r2, r7, #16
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f001 f854 	bl	80027f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001748:	f001 f82a 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800174c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_InitTick+0xa4>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	3b01      	subs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_InitTick+0xa8>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_InitTick+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_InitTick+0xa8>)
 8001764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001768:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_InitTick+0xa8>)
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_InitTick+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_InitTick+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <HAL_InitTick+0xa8>)
 800177e:	f001 f869 	bl	8002854 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d104      	bne.n	8001792 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <HAL_InitTick+0xa8>)
 800178a:	f001 f8bd 	bl	8002908 <HAL_TIM_Base_Start_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3730      	adds	r7, #48	; 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	20012e68 	.word	0x20012e68
 80017a8:	40001400 	.word	0x40001400

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <TIM7_IRQHandler+0x10>)
 80017de:	f001 f903 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20012e68 	.word	0x20012e68

080017ec <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017f6:	f006 fb37 	bl	8007e68 <__errno>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2216      	movs	r2, #22
 80017fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_exit>:

void _exit (int status)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffe7 	bl	80017ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800181e:	e7fe      	b.n	800181e <_exit+0x12>

08001820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e00a      	b.n	8001848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001832:	f3af 8000 	nop.w
 8001836:	4601      	mov	r1, r0
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	b2ca      	uxtb	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf0      	blt.n	8001832 <_read+0x12>
	}

return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e009      	b.n	8001880 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f873 	bl	8000960 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf1      	blt.n	800186c <_write+0x12>
	}
	return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_close>:

int _close(int file)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	return -1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ba:	605a      	str	r2, [r3, #4]
	return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_isatty>:

int _isatty(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	return 1;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f006 fa9c 	bl	8007e68 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20020000 	.word	0x20020000
 800195c:	00000400 	.word	0x00000400
 8001960:	200000a0 	.word	0x200000a0
 8001964:	20012f08 	.word	0x20012f08

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019b6:	f7ff ffd7 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f006 fa81 	bl	8007ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7fe ffe1 	bl	8000984 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019d0:	0800a5f4 	.word	0x0800a5f4
  ldr r2, =_sbss
 80019d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019d8:	20012f04 	.word	0x20012f04

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f8d8 	bl	8001bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fe74 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fe02 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20012eb0 	.word	0x20012eb0

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20012eb0 	.word	0x20012eb0

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff4c 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be6:	f7ff ff61 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7ff ffb1 	bl	8001b58 <NVIC_EncodePriority>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff80 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff54 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e16b      	b.n	8001f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 815a 	bne.w	8001f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80b4 	beq.w	8001f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_GPIO_Init+0x314>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x318>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x216>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_GPIO_Init+0x328>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_GPIO_Init+0x32c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_GPIO_Init+0x330>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x20a>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00e      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00c      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e36:	2306      	movs	r3, #6
 8001e38:	e00a      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e92:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f ae90 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e264      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d075      	beq.n	800206a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7e:	4ba3      	ldr	r3, [pc, #652]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d00c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4ba0      	ldr	r3, [pc, #640]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d112      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f96:	4b9d      	ldr	r3, [pc, #628]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b99      	ldr	r3, [pc, #612]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05b      	beq.n	8002068 <HAL_RCC_OscConfig+0x108>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d157      	bne.n	8002068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e23f      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x74>
 8001fc6:	4b91      	ldr	r3, [pc, #580]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a90      	ldr	r2, [pc, #576]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a8a      	ldr	r2, [pc, #552]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	4b84      	ldr	r3, [pc, #528]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a83      	ldr	r2, [pc, #524]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a80      	ldr	r2, [pc, #512]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fd18 	bl	8001a4c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fd14 	bl	8001a4c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e204      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xc0>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fd04 	bl	8001a4c <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fd00 	bl	8001a4c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1f0      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b6c      	ldr	r3, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0xe8>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002076:	4b65      	ldr	r3, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x152>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c4      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b56      	ldr	r3, [pc, #344]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4952      	ldr	r1, [pc, #328]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_OscConfig+0x2b0>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7ff fcb9 	bl	8001a4c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020de:	f7ff fcb5 	bl	8001a4c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a5      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4940      	ldr	r1, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <HAL_RCC_OscConfig+0x2b0>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff fc98 	bl	8001a4c <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002120:	f7ff fc94 	bl	8001a4c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e184      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b36      	ldr	r3, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d030      	beq.n	80021ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_OscConfig+0x2b4>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7ff fc78 	bl	8001a4c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff fc74 	bl	8001a4c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e164      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x200>
 800217e:	e015      	b.n	80021ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_OscConfig+0x2b4>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff fc61 	bl	8001a4c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218e:	f7ff fc5d 	bl	8001a4c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e14d      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a0 	beq.w	80022fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x2b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d121      	bne.n	800223a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCC_OscConfig+0x2b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <HAL_RCC_OscConfig+0x2b8>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff fc23 	bl	8001a4c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e011      	b.n	800222e <HAL_RCC_OscConfig+0x2ce>
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	42470000 	.word	0x42470000
 8002214:	42470e80 	.word	0x42470e80
 8002218:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7ff fc16 	bl	8001a4c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e106      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_RCC_OscConfig+0x4e4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x2f0>
 8002242:	4b81      	ldr	r3, [pc, #516]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a80      	ldr	r2, [pc, #512]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
 800224e:	e01c      	b.n	800228a <HAL_RCC_OscConfig+0x32a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x312>
 8002258:	4b7b      	ldr	r3, [pc, #492]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a7a      	ldr	r2, [pc, #488]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	4b78      	ldr	r3, [pc, #480]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a77      	ldr	r2, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0x32a>
 8002272:	4b75      	ldr	r3, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a74      	ldr	r2, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a71      	ldr	r2, [pc, #452]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d015      	beq.n	80022be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7ff fbdb 	bl	8001a4c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7ff fbd7 	bl	8001a4c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0c5      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ee      	beq.n	800229a <HAL_RCC_OscConfig+0x33a>
 80022bc:	e014      	b.n	80022e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7ff fbc5 	bl	8001a4c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7ff fbc1 	bl	8001a4c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0af      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ee:	4b56      	ldr	r3, [pc, #344]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a55      	ldr	r2, [pc, #340]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 809b 	beq.w	800243a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002304:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d05c      	beq.n	80023ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d141      	bne.n	800239c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x4ec>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fb95 	bl	8001a4c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff fb91 	bl	8001a4c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e081      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	019b      	lsls	r3, r3, #6
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x4ec>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fb6a 	bl	8001a4c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff fb66 	bl	8001a4c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e056      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x41c>
 800239a:	e04e      	b.n	800243a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_OscConfig+0x4ec>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7ff fb53 	bl	8001a4c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff fb4f 	bl	8001a4c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e03f      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x44a>
 80023c8:	e037      	b.n	800243a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e032      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_RCC_OscConfig+0x4e8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d028      	beq.n	8002436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d121      	bne.n	8002436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d11a      	bne.n	8002436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800240c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240e:	4293      	cmp	r3, r2
 8002410:	d111      	bne.n	8002436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40007000 	.word	0x40007000
 8002448:	40023800 	.word	0x40023800
 800244c:	42470060 	.word	0x42470060

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cc      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d90c      	bls.n	800248c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d044      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d119      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e067      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4934      	ldr	r1, [pc, #208]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7ff fa84 	bl	8001a4c <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7ff fa80 	bl	8001a4c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 f821 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490a      	ldr	r1, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f880 	bl	80016fc <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00
 800260c:	40023800 	.word	0x40023800
 8002610:	08009e9c 	.word	0x08009e9c
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002622:	2100      	movs	r1, #0
 8002624:	6079      	str	r1, [r7, #4]
 8002626:	2100      	movs	r1, #0
 8002628:	60f9      	str	r1, [r7, #12]
 800262a:	2100      	movs	r1, #0
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800262e:	2100      	movs	r1, #0
 8002630:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002632:	4952      	ldr	r1, [pc, #328]	; (800277c <HAL_RCC_GetSysClockFreq+0x160>)
 8002634:	6889      	ldr	r1, [r1, #8]
 8002636:	f001 010c 	and.w	r1, r1, #12
 800263a:	2908      	cmp	r1, #8
 800263c:	d00d      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x3e>
 800263e:	2908      	cmp	r1, #8
 8002640:	f200 8094 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x150>
 8002644:	2900      	cmp	r1, #0
 8002646:	d002      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x32>
 8002648:	2904      	cmp	r1, #4
 800264a:	d003      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x38>
 800264c:	e08e      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800264e:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCC_GetSysClockFreq+0x164>)
 8002650:	60bb      	str	r3, [r7, #8]
       break;
 8002652:	e08e      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <HAL_RCC_GetSysClockFreq+0x168>)
 8002656:	60bb      	str	r3, [r7, #8]
      break;
 8002658:	e08b      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265a:	4948      	ldr	r1, [pc, #288]	; (800277c <HAL_RCC_GetSysClockFreq+0x160>)
 800265c:	6849      	ldr	r1, [r1, #4]
 800265e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002662:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002664:	4945      	ldr	r1, [pc, #276]	; (800277c <HAL_RCC_GetSysClockFreq+0x160>)
 8002666:	6849      	ldr	r1, [r1, #4]
 8002668:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800266c:	2900      	cmp	r1, #0
 800266e:	d024      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002670:	4942      	ldr	r1, [pc, #264]	; (800277c <HAL_RCC_GetSysClockFreq+0x160>)
 8002672:	6849      	ldr	r1, [r1, #4]
 8002674:	0989      	lsrs	r1, r1, #6
 8002676:	4608      	mov	r0, r1
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002680:	f04f 0500 	mov.w	r5, #0
 8002684:	ea00 0204 	and.w	r2, r0, r4
 8002688:	ea01 0305 	and.w	r3, r1, r5
 800268c:	493d      	ldr	r1, [pc, #244]	; (8002784 <HAL_RCC_GetSysClockFreq+0x168>)
 800268e:	fb01 f003 	mul.w	r0, r1, r3
 8002692:	2100      	movs	r1, #0
 8002694:	fb01 f102 	mul.w	r1, r1, r2
 8002698:	1844      	adds	r4, r0, r1
 800269a:	493a      	ldr	r1, [pc, #232]	; (8002784 <HAL_RCC_GetSysClockFreq+0x168>)
 800269c:	fba2 0101 	umull	r0, r1, r2, r1
 80026a0:	1863      	adds	r3, r4, r1
 80026a2:	4619      	mov	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f7fd ffdc 	bl	8000668 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4613      	mov	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e04a      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_GetSysClockFreq+0x160>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	461a      	mov	r2, r3
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	ea02 0400 	and.w	r4, r2, r0
 80026d2:	ea03 0501 	and.w	r5, r3, r1
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	014b      	lsls	r3, r1, #5
 80026e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026e8:	0142      	lsls	r2, r0, #5
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	1b00      	subs	r0, r0, r4
 80026f0:	eb61 0105 	sbc.w	r1, r1, r5
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	018b      	lsls	r3, r1, #6
 80026fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002702:	0182      	lsls	r2, r0, #6
 8002704:	1a12      	subs	r2, r2, r0
 8002706:	eb63 0301 	sbc.w	r3, r3, r1
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	00d9      	lsls	r1, r3, #3
 8002714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002718:	00d0      	lsls	r0, r2, #3
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	1912      	adds	r2, r2, r4
 8002720:	eb45 0303 	adc.w	r3, r5, r3
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	0299      	lsls	r1, r3, #10
 800272e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002732:	0290      	lsls	r0, r2, #10
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	f7fd ff90 	bl	8000668 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_GetSysClockFreq+0x160>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	60bb      	str	r3, [r7, #8]
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_RCC_GetSysClockFreq+0x164>)
 800276e:	60bb      	str	r3, [r7, #8]
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	68bb      	ldr	r3, [r7, #8]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bdb0      	pop	{r4, r5, r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	017d7840 	.word	0x017d7840

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08009eac 	.word	0x08009eac

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08009eac 	.word	0x08009eac

080027f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	220f      	movs	r2, #15
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetClockConfig+0x60>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0207 	and.w	r2, r3, #7
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e041      	b.n	80028ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f839 	bl	80028f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 f9d8 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d001      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04e      	b.n	80029be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_TIM_Base_Start_IT+0xc4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d022      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d01d      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d018      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x80>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d010      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e007      	b.n	80029bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40010400 	.word	0x40010400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40001800 	.word	0x40001800

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8ee 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8e0 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8f1 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0204 	mvn.w	r2, #4
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8c4 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8b6 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8c7 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0208 	mvn.w	r2, #8
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f89a 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f88c 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f89d 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f870 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f862 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f873 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10e      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0201 	mvn.w	r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe fd40 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f902 	bl	8002d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f838 	bl	8002c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0220 	mvn.w	r2, #32
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8cc 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	; (8002d60 <TIM_Base_SetConfig+0x118>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <TIM_Base_SetConfig+0x11c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <TIM_Base_SetConfig+0x120>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d027      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <TIM_Base_SetConfig+0x118>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d023      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <TIM_Base_SetConfig+0x11c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <TIM_Base_SetConfig+0x120>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <TIM_Base_SetConfig+0x128>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <TIM_Base_SetConfig+0x130>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_Base_SetConfig+0x134>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <TIM_Base_SetConfig+0x138>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40010400 	.word	0x40010400
 8002d70:	40014000 	.word	0x40014000
 8002d74:	40014400 	.word	0x40014400
 8002d78:	40014800 	.word	0x40014800
 8002d7c:	40001800 	.word	0x40001800
 8002d80:	40001c00 	.word	0x40001c00
 8002d84:	40002000 	.word	0x40002000

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e03f      	b.n	8002e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fc48 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f905 	bl	8003004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	; 0x28
 8002e4e:	af02      	add	r7, sp, #8
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d17c      	bne.n	8002f64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_UART_Transmit+0x2c>
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e075      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Transmit+0x3e>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e06e      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2221      	movs	r2, #33	; 0x21
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fdd5 	bl	8001a4c <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb8:	d108      	bne.n	8002ecc <HAL_UART_Transmit+0x82>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e003      	b.n	8002ed4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002edc:	e02a      	b.n	8002f34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f840 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e036      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	3302      	adds	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e007      	b.n	8002f26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1cf      	bne.n	8002ede <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f810 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e006      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7e:	e02c      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d028      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	f7fe fd5d 	bl	8001a4c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d21d      	bcs.n	8002fda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00f      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0c3      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003008:	b09f      	sub	sp, #124	; 0x7c
 800300a:	af00      	add	r7, sp, #0
 800300c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	68d9      	ldr	r1, [r3, #12]
 800301c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	ea40 0301 	orr.w	r3, r0, r1
 8003024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	431a      	orrs	r2, r3
 8003030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	431a      	orrs	r2, r3
 8003036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4313      	orrs	r3, r2
 800303c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003048:	f021 010c 	bic.w	r1, r1, #12
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003052:	430b      	orrs	r3, r1
 8003054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003062:	6999      	ldr	r1, [r3, #24]
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	ea40 0301 	orr.w	r3, r0, r1
 800306c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800306e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4bc5      	ldr	r3, [pc, #788]	; (8003388 <UART_SetConfig+0x384>)
 8003074:	429a      	cmp	r2, r3
 8003076:	d004      	beq.n	8003082 <UART_SetConfig+0x7e>
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4bc3      	ldr	r3, [pc, #780]	; (800338c <UART_SetConfig+0x388>)
 800307e:	429a      	cmp	r2, r3
 8003080:	d103      	bne.n	800308a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003082:	f7ff fba1 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003086:	6778      	str	r0, [r7, #116]	; 0x74
 8003088:	e002      	b.n	8003090 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800308a:	f7ff fb89 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800308e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003098:	f040 80b6 	bne.w	8003208 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800309c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309e:	461c      	mov	r4, r3
 80030a0:	f04f 0500 	mov.w	r5, #0
 80030a4:	4622      	mov	r2, r4
 80030a6:	462b      	mov	r3, r5
 80030a8:	1891      	adds	r1, r2, r2
 80030aa:	6439      	str	r1, [r7, #64]	; 0x40
 80030ac:	415b      	adcs	r3, r3
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
 80030b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030b4:	1912      	adds	r2, r2, r4
 80030b6:	eb45 0303 	adc.w	r3, r5, r3
 80030ba:	f04f 0000 	mov.w	r0, #0
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	00d9      	lsls	r1, r3, #3
 80030c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c8:	00d0      	lsls	r0, r2, #3
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	1911      	adds	r1, r2, r4
 80030d0:	6639      	str	r1, [r7, #96]	; 0x60
 80030d2:	416b      	adcs	r3, r5
 80030d4:	667b      	str	r3, [r7, #100]	; 0x64
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030e4:	415b      	adcs	r3, r3
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030f0:	f7fd faba 	bl	8000668 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4ba5      	ldr	r3, [pc, #660]	; (8003390 <UART_SetConfig+0x38c>)
 80030fa:	fba3 2302 	umull	r2, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011e      	lsls	r6, r3, #4
 8003102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003104:	461c      	mov	r4, r3
 8003106:	f04f 0500 	mov.w	r5, #0
 800310a:	4622      	mov	r2, r4
 800310c:	462b      	mov	r3, r5
 800310e:	1891      	adds	r1, r2, r2
 8003110:	6339      	str	r1, [r7, #48]	; 0x30
 8003112:	415b      	adcs	r3, r3
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
 8003116:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800311a:	1912      	adds	r2, r2, r4
 800311c:	eb45 0303 	adc.w	r3, r5, r3
 8003120:	f04f 0000 	mov.w	r0, #0
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	00d9      	lsls	r1, r3, #3
 800312a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800312e:	00d0      	lsls	r0, r2, #3
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	1911      	adds	r1, r2, r4
 8003136:	65b9      	str	r1, [r7, #88]	; 0x58
 8003138:	416b      	adcs	r3, r5
 800313a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	461a      	mov	r2, r3
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	1891      	adds	r1, r2, r2
 8003148:	62b9      	str	r1, [r7, #40]	; 0x28
 800314a:	415b      	adcs	r3, r3
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003152:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003156:	f7fd fa87 	bl	8000668 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <UART_SetConfig+0x38c>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2164      	movs	r1, #100	; 0x64
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a87      	ldr	r2, [pc, #540]	; (8003390 <UART_SetConfig+0x38c>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003180:	441e      	add	r6, r3
 8003182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003184:	4618      	mov	r0, r3
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	1894      	adds	r4, r2, r2
 8003190:	623c      	str	r4, [r7, #32]
 8003192:	415b      	adcs	r3, r3
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800319a:	1812      	adds	r2, r2, r0
 800319c:	eb41 0303 	adc.w	r3, r1, r3
 80031a0:	f04f 0400 	mov.w	r4, #0
 80031a4:	f04f 0500 	mov.w	r5, #0
 80031a8:	00dd      	lsls	r5, r3, #3
 80031aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ae:	00d4      	lsls	r4, r2, #3
 80031b0:	4622      	mov	r2, r4
 80031b2:	462b      	mov	r3, r5
 80031b4:	1814      	adds	r4, r2, r0
 80031b6:	653c      	str	r4, [r7, #80]	; 0x50
 80031b8:	414b      	adcs	r3, r1
 80031ba:	657b      	str	r3, [r7, #84]	; 0x54
 80031bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	1891      	adds	r1, r2, r2
 80031c8:	61b9      	str	r1, [r7, #24]
 80031ca:	415b      	adcs	r3, r3
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031d6:	f7fd fa47 	bl	8000668 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4b6c      	ldr	r3, [pc, #432]	; (8003390 <UART_SetConfig+0x38c>)
 80031e0:	fba3 1302 	umull	r1, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2164      	movs	r1, #100	; 0x64
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a67      	ldr	r2, [pc, #412]	; (8003390 <UART_SetConfig+0x38c>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 0207 	and.w	r2, r3, #7
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4432      	add	r2, r6
 8003204:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003206:	e0b9      	b.n	800337c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320a:	461c      	mov	r4, r3
 800320c:	f04f 0500 	mov.w	r5, #0
 8003210:	4622      	mov	r2, r4
 8003212:	462b      	mov	r3, r5
 8003214:	1891      	adds	r1, r2, r2
 8003216:	6139      	str	r1, [r7, #16]
 8003218:	415b      	adcs	r3, r3
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003220:	1912      	adds	r2, r2, r4
 8003222:	eb45 0303 	adc.w	r3, r5, r3
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	00d9      	lsls	r1, r3, #3
 8003230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003234:	00d0      	lsls	r0, r2, #3
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	eb12 0804 	adds.w	r8, r2, r4
 800323e:	eb43 0905 	adc.w	r9, r3, r5
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800325a:	0082      	lsls	r2, r0, #2
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	f7fd fa02 	bl	8000668 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4b49      	ldr	r3, [pc, #292]	; (8003390 <UART_SetConfig+0x38c>)
 800326a:	fba3 2302 	umull	r2, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	011e      	lsls	r6, r3, #4
 8003272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003274:	4618      	mov	r0, r3
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	1894      	adds	r4, r2, r2
 8003280:	60bc      	str	r4, [r7, #8]
 8003282:	415b      	adcs	r3, r3
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800328a:	1812      	adds	r2, r2, r0
 800328c:	eb41 0303 	adc.w	r3, r1, r3
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	f04f 0500 	mov.w	r5, #0
 8003298:	00dd      	lsls	r5, r3, #3
 800329a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800329e:	00d4      	lsls	r4, r2, #3
 80032a0:	4622      	mov	r2, r4
 80032a2:	462b      	mov	r3, r5
 80032a4:	1814      	adds	r4, r2, r0
 80032a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80032a8:	414b      	adcs	r3, r1
 80032aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032c4:	0082      	lsls	r2, r0, #2
 80032c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ca:	f7fd f9cd 	bl	8000668 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <UART_SetConfig+0x38c>)
 80032d4:	fba3 1302 	umull	r1, r3, r3, r2
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	2164      	movs	r1, #100	; 0x64
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	3332      	adds	r3, #50	; 0x32
 80032e6:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <UART_SetConfig+0x38c>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f2:	441e      	add	r6, r3
 80032f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f6:	4618      	mov	r0, r3
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	1894      	adds	r4, r2, r2
 8003302:	603c      	str	r4, [r7, #0]
 8003304:	415b      	adcs	r3, r3
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800330c:	1812      	adds	r2, r2, r0
 800330e:	eb41 0303 	adc.w	r3, r1, r3
 8003312:	f04f 0400 	mov.w	r4, #0
 8003316:	f04f 0500 	mov.w	r5, #0
 800331a:	00dd      	lsls	r5, r3, #3
 800331c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003320:	00d4      	lsls	r4, r2, #3
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	eb12 0a00 	adds.w	sl, r2, r0
 800332a:	eb43 0b01 	adc.w	fp, r3, r1
 800332e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4618      	mov	r0, r3
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	008b      	lsls	r3, r1, #2
 8003342:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003346:	0082      	lsls	r2, r0, #2
 8003348:	4650      	mov	r0, sl
 800334a:	4659      	mov	r1, fp
 800334c:	f7fd f98c 	bl	8000668 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <UART_SetConfig+0x38c>)
 8003356:	fba3 1302 	umull	r1, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2164      	movs	r1, #100	; 0x64
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <UART_SetConfig+0x38c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4432      	add	r2, r6
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	377c      	adds	r7, #124	; 0x7c
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	40011000 	.word	0x40011000
 800338c:	40011400 	.word	0x40011400
 8003390:	51eb851f 	.word	0x51eb851f

08003394 <Tm_DArray_remove>:
error:
  return NULL;
}

static inline void *Tm_DArray_remove(Tm_DArray *array, int i)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  void *el = array->contents[i];
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  array->contents[i] = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

  return el;
 80033ba:	68fb      	ldr	r3, [r7, #12]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <Tm_DArray_create>:
#include <treadmill/darray.h>
#include <assert.h>

Tm_DArray *Tm_DArray_create(size_t element_size, size_t initial_max)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b08d      	sub	sp, #52	; 0x34
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  Tm_DArray *array = malloc(sizeof(Tm_DArray));
 80033d2:	2014      	movs	r0, #20
 80033d4:	f004 fd98 	bl	8007f08 <malloc>
 80033d8:	4603      	mov	r3, r0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  check_mem(array);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d12f      	bne.n	8003442 <Tm_DArray_create+0x7a>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	623b      	str	r3, [r7, #32]
    }
 80033f4:	bf00      	nop
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <Tm_DArray_create+0x18c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68dc      	ldr	r4, [r3, #12]
 80033fc:	f004 fd34 	bl	8007e68 <__errno>
 8003400:	4603      	mov	r3, r0
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <Tm_DArray_create+0x52>
 8003408:	f004 fd2e 	bl	8007e68 <__errno>
 800340c:	4603      	mov	r3, r0
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f005 fb7b 	bl	8008b0c <strerror>
 8003416:	4603      	mov	r3, r0
 8003418:	e000      	b.n	800341c <Tm_DArray_create+0x54>
 800341a:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <Tm_DArray_create+0x190>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2307      	movs	r3, #7
 8003420:	4a4e      	ldr	r2, [pc, #312]	; (800355c <Tm_DArray_create+0x194>)
 8003422:	494f      	ldr	r1, [pc, #316]	; (8003560 <Tm_DArray_create+0x198>)
 8003424:	4620      	mov	r0, r4
 8003426:	f004 fd39 	bl	8007e9c <fiprintf>
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
        __asm volatile
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f383 8811 	msr	BASEPRI, r3
    }
 8003434:	bf00      	nop
 8003436:	f004 fd17 	bl	8007e68 <__errno>
 800343a:	4603      	mov	r3, r0
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e07d      	b.n	800353e <Tm_DArray_create+0x176>
  array->max = initial_max;
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	605a      	str	r2, [r3, #4]
  check(array->max > 0, "You must set an initial_max > 0.");
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	dc2f      	bgt.n	80034b0 <Tm_DArray_create+0xe8>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61bb      	str	r3, [r7, #24]
    }
 8003462:	bf00      	nop
 8003464:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <Tm_DArray_create+0x18c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68dc      	ldr	r4, [r3, #12]
 800346a:	f004 fcfd 	bl	8007e68 <__errno>
 800346e:	4603      	mov	r3, r0
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <Tm_DArray_create+0xc0>
 8003476:	f004 fcf7 	bl	8007e68 <__errno>
 800347a:	4603      	mov	r3, r0
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f005 fb44 	bl	8008b0c <strerror>
 8003484:	4603      	mov	r3, r0
 8003486:	e000      	b.n	800348a <Tm_DArray_create+0xc2>
 8003488:	4b33      	ldr	r3, [pc, #204]	; (8003558 <Tm_DArray_create+0x190>)
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2309      	movs	r3, #9
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <Tm_DArray_create+0x194>)
 8003490:	4934      	ldr	r1, [pc, #208]	; (8003564 <Tm_DArray_create+0x19c>)
 8003492:	4620      	mov	r0, r4
 8003494:	f004 fd02 	bl	8007e9c <fiprintf>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f383 8811 	msr	BASEPRI, r3
    }
 80034a2:	bf00      	nop
 80034a4:	f004 fce0 	bl	8007e68 <__errno>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e046      	b.n	800353e <Tm_DArray_create+0x176>

  array->contents = calloc(initial_max, sizeof(void *));
 80034b0:	2104      	movs	r1, #4
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	f004 fcd0 	bl	8007e58 <calloc>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	611a      	str	r2, [r3, #16]
  check_mem(array->contents);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d12f      	bne.n	8003528 <Tm_DArray_create+0x160>
        __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	613b      	str	r3, [r7, #16]
    }
 80034da:	bf00      	nop
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <Tm_DArray_create+0x18c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68dc      	ldr	r4, [r3, #12]
 80034e2:	f004 fcc1 	bl	8007e68 <__errno>
 80034e6:	4603      	mov	r3, r0
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <Tm_DArray_create+0x138>
 80034ee:	f004 fcbb 	bl	8007e68 <__errno>
 80034f2:	4603      	mov	r3, r0
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 fb08 	bl	8008b0c <strerror>
 80034fc:	4603      	mov	r3, r0
 80034fe:	e000      	b.n	8003502 <Tm_DArray_create+0x13a>
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <Tm_DArray_create+0x190>)
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	230c      	movs	r3, #12
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <Tm_DArray_create+0x194>)
 8003508:	4915      	ldr	r1, [pc, #84]	; (8003560 <Tm_DArray_create+0x198>)
 800350a:	4620      	mov	r0, r4
 800350c:	f004 fcc6 	bl	8007e9c <fiprintf>
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f383 8811 	msr	BASEPRI, r3
    }
 800351a:	bf00      	nop
 800351c:	f004 fca4 	bl	8007e68 <__errno>
 8003520:	4603      	mov	r3, r0
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e00a      	b.n	800353e <Tm_DArray_create+0x176>

  array->end = 0;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
  array->element_size = element_size;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
  array->expand_rate = DEFAULT_EXPAND_RATE;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	220a      	movs	r2, #10
 8003538:	60da      	str	r2, [r3, #12]

  return array;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	e006      	b.n	800354c <Tm_DArray_create+0x184>

error:
  if(array) free(array);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <Tm_DArray_create+0x182>
 8003544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003546:	f004 fce7 	bl	8007f18 <free>
  return NULL;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	372c      	adds	r7, #44	; 0x2c
 8003550:	46bd      	mov	sp, r7
 8003552:	bd90      	pop	{r4, r7, pc}
 8003554:	20000014 	.word	0x20000014
 8003558:	08009760 	.word	0x08009760
 800355c:	08009768 	.word	0x08009768
 8003560:	08009780 	.word	0x08009780
 8003564:	080097b0 	.word	0x080097b0

08003568 <Tm_DArray_resize>:
    }
  }
}

static inline int Tm_DArray_resize(Tm_DArray *array, size_t newsize)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b08b      	sub	sp, #44	; 0x2c
 800356c:	af02      	add	r7, sp, #8
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  array->max = newsize;
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]
  check(array->max > 0, "The newsize must be > 0.");
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	dc2f      	bgt.n	80035e0 <Tm_DArray_resize+0x78>
        __asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	61bb      	str	r3, [r7, #24]
    }
 8003592:	bf00      	nop
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <Tm_DArray_resize+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68dc      	ldr	r4, [r3, #12]
 800359a:	f004 fc65 	bl	8007e68 <__errno>
 800359e:	4603      	mov	r3, r0
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <Tm_DArray_resize+0x50>
 80035a6:	f004 fc5f 	bl	8007e68 <__errno>
 80035aa:	4603      	mov	r3, r0
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f005 faac 	bl	8008b0c <strerror>
 80035b4:	4603      	mov	r3, r0
 80035b6:	e000      	b.n	80035ba <Tm_DArray_resize+0x52>
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <Tm_DArray_resize+0x10c>)
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2328      	movs	r3, #40	; 0x28
 80035be:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <Tm_DArray_resize+0x110>)
 80035c0:	492e      	ldr	r1, [pc, #184]	; (800367c <Tm_DArray_resize+0x114>)
 80035c2:	4620      	mov	r0, r4
 80035c4:	f004 fc6a 	bl	8007e9c <fiprintf>
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
        __asm volatile
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f383 8811 	msr	BASEPRI, r3
    }
 80035d2:	bf00      	nop
 80035d4:	f004 fc48 	bl	8007e68 <__errno>
 80035d8:	4603      	mov	r3, r0
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e041      	b.n	8003664 <Tm_DArray_resize+0xfc>

  void *contents = realloc(array->contents, array->max * sizeof(void *));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f005 f871 	bl	80086d4 <realloc>
 80035f2:	61f8      	str	r0, [r7, #28]
  // check contents and assume realloc doesn't harm the original on error

  check_mem(contents);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12f      	bne.n	800365a <Tm_DArray_resize+0xf2>
        __asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	613b      	str	r3, [r7, #16]
    }
 800360c:	bf00      	nop
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <Tm_DArray_resize+0x108>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68dc      	ldr	r4, [r3, #12]
 8003614:	f004 fc28 	bl	8007e68 <__errno>
 8003618:	4603      	mov	r3, r0
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <Tm_DArray_resize+0xca>
 8003620:	f004 fc22 	bl	8007e68 <__errno>
 8003624:	4603      	mov	r3, r0
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f005 fa6f 	bl	8008b0c <strerror>
 800362e:	4603      	mov	r3, r0
 8003630:	e000      	b.n	8003634 <Tm_DArray_resize+0xcc>
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <Tm_DArray_resize+0x10c>)
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	232d      	movs	r3, #45	; 0x2d
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <Tm_DArray_resize+0x110>)
 800363a:	4911      	ldr	r1, [pc, #68]	; (8003680 <Tm_DArray_resize+0x118>)
 800363c:	4620      	mov	r0, r4
 800363e:	f004 fc2d 	bl	8007e9c <fiprintf>
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f383 8811 	msr	BASEPRI, r3
    }
 800364c:	bf00      	nop
 800364e:	f004 fc0b 	bl	8007e68 <__errno>
 8003652:	4603      	mov	r3, r0
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e004      	b.n	8003664 <Tm_DArray_resize+0xfc>

  array->contents = contents;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	611a      	str	r2, [r3, #16]

  return 0;
 8003660:	2300      	movs	r3, #0
 8003662:	e001      	b.n	8003668 <Tm_DArray_resize+0x100>
error:
  return -1;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003668:	4618      	mov	r0, r3
 800366a:	3724      	adds	r7, #36	; 0x24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	20000014 	.word	0x20000014
 8003674:	08009760 	.word	0x08009760
 8003678:	08009768 	.word	0x08009768
 800367c:	080097f0 	.word	0x080097f0
 8003680:	08009780 	.word	0x08009780

08003684 <Tm_DArray_expand>:

int Tm_DArray_expand(Tm_DArray *array)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af02      	add	r7, sp, #8
 800368a:	6078      	str	r0, [r7, #4]
  size_t old_max = array->max;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	617b      	str	r3, [r7, #20]
  check(Tm_DArray_resize(array, array->max + array->expand_rate) == 0,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4413      	add	r3, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff61 	bl	8003568 <Tm_DArray_resize>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d038      	beq.n	800371e <Tm_DArray_expand+0x9a>
        __asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	613b      	str	r3, [r7, #16]
    }
 80036be:	bf00      	nop
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <Tm_DArray_expand+0xbc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68dc      	ldr	r4, [r3, #12]
 80036c6:	f004 fbcf 	bl	8007e68 <__errno>
 80036ca:	4603      	mov	r3, r0
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <Tm_DArray_expand+0x60>
 80036d2:	f004 fbc9 	bl	8007e68 <__errno>
 80036d6:	4603      	mov	r3, r0
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fa16 	bl	8008b0c <strerror>
 80036e0:	4603      	mov	r3, r0
 80036e2:	e000      	b.n	80036e6 <Tm_DArray_expand+0x62>
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <Tm_DArray_expand+0xc0>)
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6852      	ldr	r2, [r2, #4]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68c9      	ldr	r1, [r1, #12]
 80036ee:	440a      	add	r2, r1
 80036f0:	9201      	str	r2, [sp, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2339      	movs	r3, #57	; 0x39
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <Tm_DArray_expand+0xc4>)
 80036f8:	4914      	ldr	r1, [pc, #80]	; (800374c <Tm_DArray_expand+0xc8>)
 80036fa:	4620      	mov	r0, r4
 80036fc:	f004 fbce 	bl	8007e9c <fiprintf>
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f383 8811 	msr	BASEPRI, r3
    }
 800370a:	bf00      	nop
 800370c:	f004 fbac 	bl	8007e68 <__errno>
 8003710:	4603      	mov	r3, r0
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	bf00      	nop

  memset(array->contents + old_max, 0, array->expand_rate + 1);
  return 0;

error:
  return -1;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	e00c      	b.n	8003738 <Tm_DArray_expand+0xb4>
  memset(array->contents + old_max, 0, array->expand_rate + 1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	18d0      	adds	r0, r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	461a      	mov	r2, r3
 8003730:	2100      	movs	r1, #0
 8003732:	f004 fc07 	bl	8007f44 <memset>
  return 0;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	20000014 	.word	0x20000014
 8003744:	08009760 	.word	0x08009760
 8003748:	08009768 	.word	0x08009768
 800374c:	08009828 	.word	0x08009828

08003750 <Tm_DArray_contract>:

int Tm_DArray_contract(Tm_DArray *array)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  int new_size = array->end < (int)array->expand_rate ? (int)array->expand_rate : array->end;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68d2      	ldr	r2, [r2, #12]
 8003760:	4293      	cmp	r3, r2
 8003762:	bfb8      	it	lt
 8003764:	4613      	movlt	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  return Tm_DArray_resize(array, new_size + 1);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fefa 	bl	8003568 <Tm_DArray_resize>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <Tm_DArray_destroy>:

void Tm_DArray_destroy(Tm_DArray *array)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  if(array) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <Tm_DArray_destroy+0x26>
    if(array->contents) free(array->contents);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <Tm_DArray_destroy+0x20>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fbbd 	bl	8007f18 <free>
    free(array);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f004 fbba 	bl	8007f18 <free>
  }
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <Tm_DArray_push>:
  Tm_DArray_clear(array);
  Tm_DArray_destroy(array);
}

int Tm_DArray_push(Tm_DArray *array, void *el)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  array->contents[array->end] = el;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	601a      	str	r2, [r3, #0]
  array->end++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]

  if(Tm_DArray_end(array) >= Tm_DArray_max(array)) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <Tm_DArray_push+0x30>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	e000      	b.n	80037de <Tm_DArray_push+0x32>
 80037dc:	2200      	movs	r2, #0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <Tm_DArray_push+0x3e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	e000      	b.n	80037ec <Tm_DArray_push+0x40>
 80037ea:	2300      	movs	r3, #0
 80037ec:	429a      	cmp	r2, r3
 80037ee:	db04      	blt.n	80037fa <Tm_DArray_push+0x4e>
    return Tm_DArray_expand(array);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff47 	bl	8003684 <Tm_DArray_expand>
 80037f6:	4603      	mov	r3, r0
 80037f8:	e000      	b.n	80037fc <Tm_DArray_push+0x50>
  } else {
    return 0;
 80037fa:	2300      	movs	r3, #0
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <Tm_DArray_pop>:

void *Tm_DArray_pop(Tm_DArray *array)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
  check(array->end - 1 >= 0, "Attempt to pop from empty array.");
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	dc31      	bgt.n	8003878 <Tm_DArray_pop+0x74>
        __asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	613b      	str	r3, [r7, #16]
    }
 8003826:	bf00      	nop
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <Tm_DArray_pop+0xd4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68dc      	ldr	r4, [r3, #12]
 800382e:	f004 fb1b 	bl	8007e68 <__errno>
 8003832:	4603      	mov	r3, r0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <Tm_DArray_pop+0x48>
 800383a:	f004 fb15 	bl	8007e68 <__errno>
 800383e:	4603      	mov	r3, r0
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f005 f962 	bl	8008b0c <strerror>
 8003848:	4603      	mov	r3, r0
 800384a:	e000      	b.n	800384e <Tm_DArray_pop+0x4a>
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <Tm_DArray_pop+0xd8>)
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2367      	movs	r3, #103	; 0x67
 8003852:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <Tm_DArray_pop+0xdc>)
 8003854:	4923      	ldr	r1, [pc, #140]	; (80038e4 <Tm_DArray_pop+0xe0>)
 8003856:	4620      	mov	r0, r4
 8003858:	f004 fb20 	bl	8007e9c <fiprintf>
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f383 8811 	msr	BASEPRI, r3
    }
 8003866:	bf00      	nop
 8003868:	f004 fafe 	bl	8007e68 <__errno>
 800386c:	4603      	mov	r3, r0
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	bf00      	nop
    Tm_DArray_contract(array);
  }

  return el;
error:
  return NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	e02b      	b.n	80038d0 <Tm_DArray_pop+0xcc>
  void *el = Tm_DArray_remove(array, array->end - 1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3b01      	subs	r3, #1
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fd87 	bl	8003394 <Tm_DArray_remove>
 8003886:	6178      	str	r0, [r7, #20]
  array->end--;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]
  if (Tm_DArray_end(array) > (int)array->expand_rate && Tm_DArray_end(array) % array->expand_rate) {
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <Tm_DArray_pop+0x9a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e000      	b.n	80038a0 <Tm_DArray_pop+0x9c>
 800389e:	2300      	movs	r3, #0
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68d2      	ldr	r2, [r2, #12]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	dd12      	ble.n	80038ce <Tm_DArray_pop+0xca>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <Tm_DArray_pop+0xb0>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e000      	b.n	80038b6 <Tm_DArray_pop+0xb2>
 80038b4:	2300      	movs	r3, #0
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68d2      	ldr	r2, [r2, #12]
 80038ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80038be:	fb02 f201 	mul.w	r2, r2, r1
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <Tm_DArray_pop+0xca>
    Tm_DArray_contract(array);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff41 	bl	8003750 <Tm_DArray_contract>
  return el;
 80038ce:	697b      	ldr	r3, [r7, #20]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd90      	pop	{r4, r7, pc}
 80038d8:	20000014 	.word	0x20000014
 80038dc:	08009760 	.word	0x08009760
 80038e0:	08009768 	.word	0x08009768
 80038e4:	0800986c 	.word	0x0800986c

080038e8 <Tm_DArray_set>:

void Tm_DArray_set(Tm_DArray *array, int i, void *el)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  check(i < array->max, "darray attempt to set past max");
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	db2f      	blt.n	800395e <Tm_DArray_set+0x76>
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	617b      	str	r3, [r7, #20]
    }
 8003910:	bf00      	nop
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <Tm_DArray_set+0x8c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68dc      	ldr	r4, [r3, #12]
 8003918:	f004 faa6 	bl	8007e68 <__errno>
 800391c:	4603      	mov	r3, r0
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <Tm_DArray_set+0x4e>
 8003924:	f004 faa0 	bl	8007e68 <__errno>
 8003928:	4603      	mov	r3, r0
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f005 f8ed 	bl	8008b0c <strerror>
 8003932:	4603      	mov	r3, r0
 8003934:	e000      	b.n	8003938 <Tm_DArray_set+0x50>
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <Tm_DArray_set+0x90>)
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2377      	movs	r3, #119	; 0x77
 800393c:	4a0f      	ldr	r2, [pc, #60]	; (800397c <Tm_DArray_set+0x94>)
 800393e:	4910      	ldr	r1, [pc, #64]	; (8003980 <Tm_DArray_set+0x98>)
 8003940:	4620      	mov	r0, r4
 8003942:	f004 faab 	bl	8007e9c <fiprintf>
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
        __asm volatile
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f383 8811 	msr	BASEPRI, r3
    }
 8003950:	bf00      	nop
 8003952:	f004 fa89 	bl	8007e68 <__errno>
 8003956:	4603      	mov	r3, r0
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e006      	b.n	800396c <Tm_DArray_set+0x84>
  array->contents[i] = el;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
error:
  return;
 800396c:	bf00      	nop
}
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	20000014 	.word	0x20000014
 8003978:	08009760 	.word	0x08009760
 800397c:	08009768 	.word	0x08009768
 8003980:	080098ac 	.word	0x080098ac

08003984 <unsnap>:
/*
 * -(bottom)- ECRU -(top)- GREY -(scan)- BLACK -(free)- WHITE ...
 */

static inline void
unsnap(TmHeap *heap, TmCell* self) {
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  TmCell *my_prev = self->prev;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
  TmCell *my_next = self->next;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60bb      	str	r3, [r7, #8]
  self->next = NULL;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
  self->prev = NULL;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]

  if(BOTTOM == self) BOTTOM = my_next;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d102      	bne.n	80039b6 <unsnap+0x32>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	601a      	str	r2, [r3, #0]
  if(TOP    == self) TOP    = my_next;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d102      	bne.n	80039c6 <unsnap+0x42>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	605a      	str	r2, [r3, #4]
  if(SCAN   == self) SCAN   = my_next;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d102      	bne.n	80039d6 <unsnap+0x52>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	60da      	str	r2, [r3, #12]
  if(FREE   == self) FREE   = my_next;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d102      	bne.n	80039e6 <unsnap+0x62>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	609a      	str	r2, [r3, #8]

  my_prev->next = my_next;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	601a      	str	r2, [r3, #0]
  my_next->prev = my_prev;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <insert_in>:

static inline void
insert_in(TmHeap *heap, TmCell* self, TmCell* him) {
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  if(self == him) return; // we do nothing
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d033      	beq.n	8003a7a <insert_in+0x7c>

  unsnap(heap, self);
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff ffb5 	bl	8003984 <unsnap>

  TmCell *his_prev = him->prev;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	617b      	str	r3, [r7, #20]

  his_prev->next = self;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	601a      	str	r2, [r3, #0]
  him->prev      = self;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	605a      	str	r2, [r3, #4]

  self->prev  = his_prev;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	605a      	str	r2, [r3, #4]
  self->next  = him;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]

  if(him == TOP)    TOP = self;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d102      	bne.n	8003a48 <insert_in+0x4a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	605a      	str	r2, [r3, #4]
  if(him == BOTTOM) BOTTOM = self;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d102      	bne.n	8003a58 <insert_in+0x5a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	601a      	str	r2, [r3, #0]
  if(him == SCAN)   SCAN = self;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d102      	bne.n	8003a68 <insert_in+0x6a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	60da      	str	r2, [r3, #12]
  if(him == FREE)   FREE = self;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d104      	bne.n	8003a7c <insert_in+0x7e>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	e000      	b.n	8003a7c <insert_in+0x7e>
  if(self == him) return; // we do nothing
 8003a7a:	bf00      	nop
}
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <make_ecru>:

//static inline void
void
make_ecru(TmHeap *heap, TmCell *self)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
  if(self == BOTTOM) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d11b      	bne.n	8003ace <make_ecru+0x4c>
    if (self == TOP)  TOP  = self->next;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d103      	bne.n	8003aa8 <make_ecru+0x26>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
    if (self == SCAN) SCAN = self->next;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d103      	bne.n	8003aba <make_ecru+0x38>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60da      	str	r2, [r3, #12]
    if (self == FREE) FREE = self->next;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d10b      	bne.n	8003adc <make_ecru+0x5a>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e006      	b.n	8003adc <make_ecru+0x5a>
  } else {
    insert_in(heap, self, BOTTOM);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff91 	bl	80039fe <insert_in>
  }
  self->ecru = 1;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	731a      	strb	r2, [r3, #12]
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <make_grey>:

//static inline void
void
make_grey(TmHeap *heap, TmCell *self)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  insert_in(heap, self, TOP);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	461a      	mov	r2, r3
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff7e 	bl	80039fe <insert_in>
  self->ecru = 0;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	731a      	strb	r2, [r3, #12]

  if (self == SCAN) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d103      	bne.n	8003b1a <make_grey+0x30>
    SCAN = self->next;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]
  }
  if (self == FREE) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d103      	bne.n	8003b2c <make_grey+0x42>
    FREE = self->next;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <TmHeap_new>:
  int growth_rate,
  int scan_every,
  size_t object_size,
  TmReleaseFn release_fn,
  TmScanPointersFn scan_pointers_fn)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  TmHeap *heap = calloc(1, sizeof(TmHeap));
 8003b42:	2130      	movs	r1, #48	; 0x30
 8003b44:	2001      	movs	r0, #1
 8003b46:	f004 f987 	bl	8007e58 <calloc>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24

  heap->state  = state;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
  heap->chunks = Tm_DArray_create(sizeof(TmCell*), 100);
 8003b54:	2164      	movs	r1, #100	; 0x64
 8003b56:	2004      	movs	r0, #4
 8003b58:	f7ff fc36 	bl	80033c8 <Tm_DArray_create>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c

  TmChunk chunk = TmChunk_new(size + 1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f95f 	bl	8003e30 <TmChunk_new>
  TmCell *head = chunk.head;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	623b      	str	r3, [r7, #32]
  TmCell *tail = chunk.tail;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	61fb      	str	r3, [r7, #28]

  // Save a reference to the chunk to deallocate it later
  Tm_DArray_push(heap->chunks, head);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	6a39      	ldr	r1, [r7, #32]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fe13 	bl	80037ac <Tm_DArray_push>

  heap->growth_rate   = growth_rate;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]
  heap->release       = release_fn;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b90:	621a      	str	r2, [r3, #32]
  heap->scan_pointers = scan_pointers_fn;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
  heap->object_size   = object_size;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9c:	61da      	str	r2, [r3, #28]
  heap->allocs        = 0;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	615a      	str	r2, [r3, #20]
  heap->scan_every    = scan_every;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	619a      	str	r2, [r3, #24]

  FREE   = head;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	609a      	str	r2, [r3, #8]
  BOTTOM = head;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	6a3a      	ldr	r2, [r7, #32]
 8003bb4:	601a      	str	r2, [r3, #0]
  TOP    = head;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	605a      	str	r2, [r3, #4]
  SCAN   = head;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	60da      	str	r2, [r3, #12]

  // Close the circle.
  tail->next = head;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	601a      	str	r2, [r3, #0]
  head->prev = tail;
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	605a      	str	r2, [r3, #4]

  return heap;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <TmHeap_grow>:
  printf("[END HEAP]\n");
}

void
TmHeap_grow(TmHeap *heap, int size)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  if(size < 1) return;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	dd40      	ble.n	8003c6a <TmHeap_grow+0x92>

  TmChunk chunk = TmChunk_new(size);
 8003be8:	f107 0308 	add.w	r3, r7, #8
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f91e 	bl	8003e30 <TmChunk_new>
  TmCell *head = chunk.head;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	61fb      	str	r3, [r7, #28]
  TmCell *tail = chunk.tail;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	61bb      	str	r3, [r7, #24]

  // Save a reference to the chunk to deallocate it later
  Tm_DArray_push(heap->chunks, head);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	69f9      	ldr	r1, [r7, #28]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fdd2 	bl	80037ac <Tm_DArray_push>

  // Put the new chunk before the current free.
  TmCell *oldfree  = FREE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	617b      	str	r3, [r7, #20]
  TmCell *previous = oldfree->prev;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	613b      	str	r3, [r7, #16]

  // Attach tail
  oldfree->prev = tail;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	605a      	str	r2, [r3, #4]
  tail->next    = oldfree;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]

  // Attach head
  previous->next = head;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	601a      	str	r2, [r3, #0]
  head->prev     = previous;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  if(BOTTOM == FREE) BOTTOM = head;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d102      	bne.n	8003c3e <TmHeap_grow+0x66>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	601a      	str	r2, [r3, #0]
  if(TOP    == FREE) TOP = head;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d102      	bne.n	8003c50 <TmHeap_grow+0x78>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	605a      	str	r2, [r3, #4]
  if(SCAN   == FREE) SCAN = head;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d102      	bne.n	8003c62 <TmHeap_grow+0x8a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	60da      	str	r2, [r3, #12]
  FREE = head;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e000      	b.n	8003c6c <TmHeap_grow+0x94>
  if(size < 1) return;
 8003c6a:	bf00      	nop
}
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <TmHeap_distance_between>:

static inline int
TmHeap_distance_between(TmCell *a, TmCell *b)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  int count = 1;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
  TmCell *ptr = a;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60bb      	str	r3, [r7, #8]
  while((ptr = ptr->next) && ptr != b) count++;
 8003c84:	e002      	b.n	8003c8c <TmHeap_distance_between+0x1a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <TmHeap_distance_between+0x2e>
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1f2      	bne.n	8003c86 <TmHeap_distance_between+0x14>

  return count;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TmHeap_size>:


double
TmHeap_size(TmHeap *heap)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  return TmHeap_distance_between(TOP, TOP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff ffd6 	bl	8003c72 <TmHeap_distance_between>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fc3b 	bl	8000544 <__aeabi_i2d>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8003cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8003cda:	eef0 0a67 	vmov.f32	s1, s15
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <TmHeap_white_size>:

double
TmHeap_white_size(TmHeap *heap)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if(FREE == BOTTOM &&
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d111      	bne.n	8003d1c <TmHeap_white_size+0x38>
     FREE == TOP &&
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
  if(FREE == BOTTOM &&
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d10b      	bne.n	8003d1c <TmHeap_white_size+0x38>
     FREE == SCAN) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
     FREE == TOP &&
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d105      	bne.n	8003d1c <TmHeap_white_size+0x38>
    return TmHeap_size(heap);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ffcc 	bl	8003cae <TmHeap_size>
 8003d16:	ec53 2b10 	vmov	r2, r3, d0
 8003d1a:	e00d      	b.n	8003d38 <TmHeap_white_size+0x54>
  }

  return TmHeap_distance_between(FREE, BOTTOM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7ff ffa3 	bl	8003c72 <TmHeap_distance_between>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fc08 	bl	8000544 <__aeabi_i2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d40:	eef0 0a67 	vmov.f32	s1, s15
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <TmHeap_ecru_size>:

double
TmHeap_ecru_size(TmHeap *heap)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  if(BOTTOM == TOP) return 0;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d104      	bne.n	8003d68 <TmHeap_ecru_size+0x1e>
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e00d      	b.n	8003d84 <TmHeap_ecru_size+0x3a>
  return TmHeap_distance_between(BOTTOM, TOP);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f7ff ff7d 	bl	8003c72 <TmHeap_distance_between>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc fbe2 	bl	8000544 <__aeabi_i2d>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d88:	eeb0 0a47 	vmov.f32	s0, s14
 8003d8c:	eef0 0a67 	vmov.f32	s1, s15
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <TmHeap_grey_size>:

double
TmHeap_grey_size(TmHeap *heap)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  if(TOP == SCAN) return 0;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d104      	bne.n	8003db4 <TmHeap_grey_size+0x1e>
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e00d      	b.n	8003dd0 <TmHeap_grey_size+0x3a>
  return TmHeap_distance_between(TOP, SCAN);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7ff ff57 	bl	8003c72 <TmHeap_distance_between>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fbbc 	bl	8000544 <__aeabi_i2d>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8003dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8003dd8:	eef0 0a67 	vmov.f32	s1, s15
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <TmHeap_black_size>:

double
TmHeap_black_size(TmHeap *heap)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  if(SCAN == FREE) return 0;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d104      	bne.n	8003e00 <TmHeap_black_size+0x1e>
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e00d      	b.n	8003e1c <TmHeap_black_size+0x3a>
  return TmHeap_distance_between(SCAN, FREE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7ff ff31 	bl	8003c72 <TmHeap_distance_between>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fb96 	bl	8000544 <__aeabi_i2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e20:	eeb0 0a47 	vmov.f32	s0, s14
 8003e24:	eef0 0a67 	vmov.f32	s1, s15
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <TmChunk_new>:
  free(heap);
}

TmChunk
TmChunk_new(int size)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b08f      	sub	sp, #60	; 0x3c
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  TmCell *memory = calloc(size, sizeof(TmCell));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 f80a 	bl	8007e58 <calloc>
 8003e44:	4603      	mov	r3, r0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
  check_mem(memory);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d133      	bne.n	8003eb6 <TmChunk_new+0x86>
        __asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	617b      	str	r3, [r7, #20]
    }
 8003e60:	bf00      	nop
 8003e62:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <TmChunk_new+0x108>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68dc      	ldr	r4, [r3, #12]
 8003e68:	f003 fffe 	bl	8007e68 <__errno>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <TmChunk_new+0x56>
 8003e74:	f003 fff8 	bl	8007e68 <__errno>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f004 fe45 	bl	8008b0c <strerror>
 8003e82:	4603      	mov	r3, r0
 8003e84:	e000      	b.n	8003e88 <TmChunk_new+0x58>
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <TmChunk_new+0x10c>)
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003e8e:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <TmChunk_new+0x110>)
 8003e90:	492c      	ldr	r1, [pc, #176]	; (8003f44 <TmChunk_new+0x114>)
 8003e92:	4620      	mov	r0, r4
 8003e94:	f004 f802 	bl	8007e9c <fiprintf>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f383 8811 	msr	BASEPRI, r3
    }
 8003ea2:	bf00      	nop
 8003ea4:	f003 ffe0 	bl	8007e68 <__errno>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	bf00      	nop

  TmChunk chunk = { .head = memory, .tail = tail };
  return chunk;

error:
  exit(EXIT_FAILURE);
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f003 ffdf 	bl	8007e74 <exit>
  TmCell *ptr    = memory;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=0; i < size; i++) {
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebe:	e01c      	b.n	8003efa <TmChunk_new+0xca>
    if(i>0) {
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dd07      	ble.n	8003ed6 <TmChunk_new+0xa6>
      TmCell *prev = ptr; prev--;
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b10      	subs	r3, #16
 8003ece:	61fb      	str	r3, [r7, #28]
      ptr->prev = prev;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	605a      	str	r2, [r3, #4]
    if(i<size) {
 8003ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	da07      	bge.n	8003eee <TmChunk_new+0xbe>
      TmCell *next = ptr; next++;
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	61bb      	str	r3, [r7, #24]
      ptr->next = next;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	601a      	str	r2, [r3, #0]
    ptr++;
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=0; i < size; i++) {
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	dbde      	blt.n	8003ec0 <TmChunk_new+0x90>
  TmCell *tail = --ptr;
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	3b10      	subs	r3, #16
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	623b      	str	r3, [r7, #32]
  memory->prev = NULL;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	2200      	movs	r2, #0
 8003f10:	605a      	str	r2, [r3, #4]
  tail->next   = NULL;
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
  TmChunk chunk = { .head = memory, .tail = tail };
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	60fb      	str	r3, [r7, #12]
  return chunk;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f107 0308 	add.w	r3, r7, #8
 8003f28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f2c:	e882 0003 	stmia.w	r2, {r0, r1}

}
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	3734      	adds	r7, #52	; 0x34
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}
 8003f38:	20000014 	.word	0x20000014
 8003f3c:	08009994 	.word	0x08009994
 8003f40:	08009958 	.word	0x08009958
 8003f44:	0800999c 	.word	0x0800999c

08003f48 <make_grey_if_ecru>:

static inline void
make_grey_if_ecru(TmHeap *heap, TmObjectHeader *o)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  TmCell *cell = o->cell;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
  if(cell->ecru) {
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	7b1b      	ldrb	r3, [r3, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <make_grey_if_ecru+0x20>
    // Unsnap the cell from the ecru area,
    // and put it in the gray area.
    make_grey(heap, cell);
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fdc1 	bl	8003aea <make_grey>
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <Tm_scan>:

void
Tm_scan(TmHeap *heap)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
        __asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60bb      	str	r3, [r7, #8]
    }
 8003f8a:	bf00      	nop
  debug("[GC] Scan");
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <Tm_scan+0x6c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68d8      	ldr	r0, [r3, #12]
 8003f92:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <Tm_scan+0x70>)
 8003f98:	4912      	ldr	r1, [pc, #72]	; (8003fe4 <Tm_scan+0x74>)
 8003f9a:	f003 ff7f 	bl	8007e9c <fiprintf>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f383 8811 	msr	BASEPRI, r3
    }
 8003fa8:	bf00      	nop
  // If scan == top, the collection has finished
  if(SCAN == TOP) return;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d00d      	beq.n	8003fd2 <Tm_scan+0x62>

  // Move the scan pointer backwards, converting the scanned grey cell into a
  // black cell.
  SCAN = SCAN->prev;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]
  heap->scan_pointers(heap, SCAN->value, make_grey_if_ecru);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68d2      	ldr	r2, [r2, #12]
 8003fc8:	6891      	ldr	r1, [r2, #8]
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <Tm_scan+0x78>)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e000      	b.n	8003fd4 <Tm_scan+0x64>
  if(SCAN == TOP) return;
 8003fd2:	bf00      	nop
}
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000014 	.word	0x20000014
 8003fe0:	08009958 	.word	0x08009958
 8003fe4:	080099cc 	.word	0x080099cc
 8003fe8:	08003f49 	.word	0x08003f49

08003fec <Tm_flip>:

void
Tm_flip(TmHeap *heap)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b090      	sub	sp, #64	; 0x40
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	6078      	str	r0, [r7, #4]
        __asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	617b      	str	r3, [r7, #20]
    }
 8004006:	bf00      	nop
  debug("[GC] Flip");
 8004008:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <Tm_flip+0x148>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68d8      	ldr	r0, [r3, #12]
 800400e:	f240 1349 	movw	r3, #329	; 0x149
 8004012:	4a49      	ldr	r2, [pc, #292]	; (8004138 <Tm_flip+0x14c>)
 8004014:	4949      	ldr	r1, [pc, #292]	; (800413c <Tm_flip+0x150>)
 8004016:	f003 ff41 	bl	8007e9c <fiprintf>
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
        __asm volatile
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f383 8811 	msr	BASEPRI, r3
    }
 8004024:	bf00      	nop
  // Scan all the grey cells before flipping.
  while(SCAN != TOP)
 8004026:	e002      	b.n	800402e <Tm_flip+0x42>
	  Tm_scan(heap);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ffa1 	bl	8003f70 <Tm_scan>
  while(SCAN != TOP)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	d1f6      	bne.n	8004028 <Tm_flip+0x3c>

  TmCell *ptr = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	637b      	str	r3, [r7, #52]	; 0x34

  // Make all the ecru into white and release them
  ITERATE(BOTTOM, TOP, ptr) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
 8004044:	e00b      	b.n	800405e <Tm_flip+0x72>
    ptr->ecru = 0;
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	2200      	movs	r2, #0
 800404a:	731a      	strb	r2, [r3, #12]
    RELEASE(ptr->value);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004052:	6892      	ldr	r2, [r2, #8]
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
    ptr = ptr->next;
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
  ITERATE(BOTTOM, TOP, ptr) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004064:	429a      	cmp	r2, r3
 8004066:	d1ee      	bne.n	8004046 <Tm_flip+0x5a>
  }
  BOTTOM = TOP;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]

  TmHeap_grow(heap, heap->growth_rate);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fdae 	bl	8003bd8 <TmHeap_grow>

  // Make all black into ecru.
  ITERATE(SCAN, FREE, ptr) {
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
 8004082:	e008      	b.n	8004096 <Tm_flip+0xaa>
    TmCell *next = ptr->next;
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61fb      	str	r3, [r7, #28]
    make_ecru(heap, ptr);
 800408a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fcf8 	bl	8003a82 <make_ecru>
    ptr = next;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
  ITERATE(SCAN, FREE, ptr) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	429a      	cmp	r2, r3
 800409e:	d1f1      	bne.n	8004084 <Tm_flip+0x98>
  }

  // Add all the rootset into the grey set.
  Tm_DArray *rootset = heap->state->rootset_fn(heap->state);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040aa:	4610      	mov	r0, r2
 80040ac:	4798      	blx	r3
 80040ae:	62f8      	str	r0, [r7, #44]	; 0x2c

  int count = Tm_DArray_count(rootset);
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <Tm_flip+0xd0>
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	e000      	b.n	80040be <Tm_flip+0xd2>
 80040bc:	2300      	movs	r3, #0
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
    }
 80040d2:	bf00      	nop
  debug("[GC] Adding rootset (%i)", count);
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <Tm_flip+0x148>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68d8      	ldr	r0, [r3, #12]
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f240 1365 	movw	r3, #357	; 0x165
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <Tm_flip+0x14c>)
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <Tm_flip+0x154>)
 80040e6:	f003 fed9 	bl	8007e9c <fiprintf>
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
        __asm volatile
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f383 8811 	msr	BASEPRI, r3
    }
 80040f4:	bf00      	nop
  for(int i=0; i < count; i++) {
 80040f6:	2300      	movs	r3, #0
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
 80040fa:	e010      	b.n	800411e <Tm_flip+0x132>
    TmObjectHeader *o = (TmObjectHeader*)(rootset->contents[i]);
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
    TmCell *cell = o->cell;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	623b      	str	r3, [r7, #32]
    make_grey(heap, cell);
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fce9 	bl	8003aea <make_grey>
  for(int i=0; i < count; i++) {
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	3301      	adds	r3, #1
 800411c:	633b      	str	r3, [r7, #48]	; 0x30
 800411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	429a      	cmp	r2, r3
 8004124:	dbea      	blt.n	80040fc <Tm_flip+0x110>
  }

  Tm_DArray_destroy(rootset);
 8004126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004128:	f7ff fb29 	bl	800377e <Tm_DArray_destroy>
}
 800412c:	bf00      	nop
 800412e:	3738      	adds	r7, #56	; 0x38
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000014 	.word	0x20000014
 8004138:	08009958 	.word	0x08009958
 800413c:	080099e8 	.word	0x080099e8
 8004140:	08009a04 	.word	0x08009a04

08004144 <Tm_allocate>:

TmObjectHeader*
Tm_allocate(TmHeap *heap)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b08b      	sub	sp, #44	; 0x2c
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  if(heap->allocs >= heap->scan_every) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	db05      	blt.n	8004164 <Tm_allocate+0x20>
    heap->allocs = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	615a      	str	r2, [r3, #20]
    Tm_scan(heap);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff06 	bl	8003f70 <Tm_scan>

  /*
   * If there are no slots in the white list,
   * force a collection.
   */
  if(FREE->next == BOTTOM) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d139      	bne.n	80041e6 <Tm_allocate+0xa2>
    Tm_flip(heap);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff3a 	bl	8003fec <Tm_flip>
    check(FREE != BOTTOM, "Heap full.");
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d130      	bne.n	80041e6 <Tm_allocate+0xa2>
        __asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	617b      	str	r3, [r7, #20]
    }
 8004196:	bf00      	nop
 8004198:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <Tm_allocate+0x154>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68dc      	ldr	r4, [r3, #12]
 800419e:	f003 fe63 	bl	8007e68 <__errno>
 80041a2:	4603      	mov	r3, r0
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <Tm_allocate+0x78>
 80041aa:	f003 fe5d 	bl	8007e68 <__errno>
 80041ae:	4603      	mov	r3, r0
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f004 fcaa 	bl	8008b0c <strerror>
 80041b8:	4603      	mov	r3, r0
 80041ba:	e000      	b.n	80041be <Tm_allocate+0x7a>
 80041bc:	4b37      	ldr	r3, [pc, #220]	; (800429c <Tm_allocate+0x158>)
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f240 137d 	movw	r3, #381	; 0x17d
 80041c4:	4a36      	ldr	r2, [pc, #216]	; (80042a0 <Tm_allocate+0x15c>)
 80041c6:	4937      	ldr	r1, [pc, #220]	; (80042a4 <Tm_allocate+0x160>)
 80041c8:	4620      	mov	r0, r4
 80041ca:	f003 fe67 	bl	8007e9c <fiprintf>
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
        __asm volatile
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f383 8811 	msr	BASEPRI, r3
    }
 80041d8:	bf00      	nop
 80041da:	f003 fe45 	bl	8007e68 <__errno>
 80041de:	4603      	mov	r3, r0
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e051      	b.n	800428a <Tm_allocate+0x146>
  }

  TmObjectHeader *header = calloc(1, heap->object_size);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4619      	mov	r1, r3
 80041ec:	2001      	movs	r0, #1
 80041ee:	f003 fe33 	bl	8007e58 <calloc>
 80041f2:	4603      	mov	r3, r0
 80041f4:	61fb      	str	r3, [r7, #28]
  check(header, "Out of memory.");
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d130      	bne.n	800425e <Tm_allocate+0x11a>
        __asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60fb      	str	r3, [r7, #12]
    }
 800420e:	bf00      	nop
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <Tm_allocate+0x154>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68dc      	ldr	r4, [r3, #12]
 8004216:	f003 fe27 	bl	8007e68 <__errno>
 800421a:	4603      	mov	r3, r0
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <Tm_allocate+0xf0>
 8004222:	f003 fe21 	bl	8007e68 <__errno>
 8004226:	4603      	mov	r3, r0
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fc6e 	bl	8008b0c <strerror>
 8004230:	4603      	mov	r3, r0
 8004232:	e000      	b.n	8004236 <Tm_allocate+0xf2>
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <Tm_allocate+0x158>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f240 1381 	movw	r3, #385	; 0x181
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <Tm_allocate+0x15c>)
 800423e:	491a      	ldr	r1, [pc, #104]	; (80042a8 <Tm_allocate+0x164>)
 8004240:	4620      	mov	r0, r4
 8004242:	f003 fe2b 	bl	8007e9c <fiprintf>
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f383 8811 	msr	BASEPRI, r3
    }
 8004250:	bf00      	nop
 8004252:	f003 fe09 	bl	8007e68 <__errno>
 8004256:	4603      	mov	r3, r0
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e015      	b.n	800428a <Tm_allocate+0x146>

  TmCell *free = FREE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	61bb      	str	r3, [r7, #24]
  header->cell = free;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	601a      	str	r2, [r3, #0]
  header->cell->value = header;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	609a      	str	r2, [r3, #8]

  FREE = FREE->next;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]

  heap->allocs++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	615a      	str	r2, [r3, #20]

  return header;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	e002      	b.n	8004290 <Tm_allocate+0x14c>
error:
  exit(EXIT_FAILURE);
 800428a:	2001      	movs	r0, #1
 800428c:	f003 fdf2 	bl	8007e74 <exit>
  return NULL;
}
 8004290:	4618      	mov	r0, r3
 8004292:	3724      	adds	r7, #36	; 0x24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	20000014 	.word	0x20000014
 800429c:	08009994 	.word	0x08009994
 80042a0:	08009958 	.word	0x08009958
 80042a4:	08009a2c 	.word	0x08009a2c
 80042a8:	08009a54 	.word	0x08009a54

080042ac <Tm_DArray_get>:
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  check(i < array->max, "darray attempt to get past max");
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	db31      	blt.n	8004324 <Tm_DArray_get+0x78>
        __asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
    }
 80042d2:	bf00      	nop
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <Tm_DArray_get+0x8c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68dc      	ldr	r4, [r3, #12]
 80042da:	f003 fdc5 	bl	8007e68 <__errno>
 80042de:	4603      	mov	r3, r0
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <Tm_DArray_get+0x4c>
 80042e6:	f003 fdbf 	bl	8007e68 <__errno>
 80042ea:	4603      	mov	r3, r0
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 fc0c 	bl	8008b0c <strerror>
 80042f4:	4603      	mov	r3, r0
 80042f6:	e000      	b.n	80042fa <Tm_DArray_get+0x4e>
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <Tm_DArray_get+0x90>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2326      	movs	r3, #38	; 0x26
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <Tm_DArray_get+0x94>)
 8004300:	4910      	ldr	r1, [pc, #64]	; (8004344 <Tm_DArray_get+0x98>)
 8004302:	4620      	mov	r0, r4
 8004304:	f003 fdca 	bl	8007e9c <fiprintf>
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f383 8811 	msr	BASEPRI, r3
    }
 8004312:	bf00      	nop
 8004314:	f003 fda8 	bl	8007e68 <__errno>
 8004318:	4603      	mov	r3, r0
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	bf00      	nop
  return NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	e005      	b.n	8004330 <Tm_DArray_get+0x84>
  return array->contents[i];
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bd90      	pop	{r4, r7, pc}
 8004338:	20000014 	.word	0x20000014
 800433c:	08009a80 	.word	0x08009a80
 8004340:	08009a88 	.word	0x08009a88
 8004344:	08009af0 	.word	0x08009af0

08004348 <Hashmap_node_create>:
#include <treadmill/gc_hashmap.h>
#include <treadmill/_dbg.h>


static inline HashmapNode *Hashmap_node_create(int hash, Object *obj_key, Object *obj_data)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b08b      	sub	sp, #44	; 0x2c
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  HashmapNode *node = calloc(1, sizeof(HashmapNode));
 8004354:	210c      	movs	r1, #12
 8004356:	2001      	movs	r0, #1
 8004358:	f003 fd7e 	bl	8007e58 <calloc>
 800435c:	4603      	mov	r3, r0
 800435e:	61fb      	str	r3, [r7, #28]
  check_mem(node);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d131      	bne.n	80043ca <Hashmap_node_create+0x82>
        __asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	61bb      	str	r3, [r7, #24]
    }
 8004378:	bf00      	nop
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <Hashmap_node_create+0xa0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68dc      	ldr	r4, [r3, #12]
 8004380:	f003 fd72 	bl	8007e68 <__errno>
 8004384:	4603      	mov	r3, r0
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <Hashmap_node_create+0x56>
 800438c:	f003 fd6c 	bl	8007e68 <__errno>
 8004390:	4603      	mov	r3, r0
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f004 fbb9 	bl	8008b0c <strerror>
 800439a:	4603      	mov	r3, r0
 800439c:	e000      	b.n	80043a0 <Hashmap_node_create+0x58>
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <Hashmap_node_create+0xa4>)
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2318      	movs	r3, #24
 80043a4:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <Hashmap_node_create+0xa8>)
 80043a6:	4913      	ldr	r1, [pc, #76]	; (80043f4 <Hashmap_node_create+0xac>)
 80043a8:	4620      	mov	r0, r4
 80043aa:	f003 fd77 	bl	8007e9c <fiprintf>
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f383 8811 	msr	BASEPRI, r3
    }
 80043b8:	bf00      	nop
 80043ba:	f003 fd55 	bl	8007e68 <__errno>
 80043be:	4603      	mov	r3, r0
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	bf00      	nop
  node->hash = hash;

  return node;

error:
  return NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e009      	b.n	80043de <Hashmap_node_create+0x96>
  node->key = obj_key;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	601a      	str	r2, [r3, #0]
  node->data = obj_data;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	605a      	str	r2, [r3, #4]
  node->hash = hash;
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	609a      	str	r2, [r3, #8]
  return node;
 80043dc:	69fb      	ldr	r3, [r7, #28]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000014 	.word	0x20000014
 80043ec:	08009a80 	.word	0x08009a80
 80043f0:	08009b2c 	.word	0x08009b2c
 80043f4:	08009b48 	.word	0x08009b48

080043f8 <Hashmap_find_bucket>:

static inline Tm_DArray *Hashmap_find_bucket(Hashmap *map, void *key,
  int create, uint32_t *hash_out)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b08f      	sub	sp, #60	; 0x3c
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  uint32_t hash = map->hash(key);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	68b8      	ldr	r0, [r7, #8]
 800440c:	4798      	blx	r3
 800440e:	62b8      	str	r0, [r7, #40]	; 0x28
  int bucket_n = hash % DEFAULT_NUMBER_OF_BUCKETS;
 8004410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <Hashmap_find_bucket+0x144>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2164      	movs	r1, #100	; 0x64
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
  check(bucket_n >= 0, "Invalid bucket found: %d", bucket_n);
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	da31      	bge.n	800448e <Hashmap_find_bucket+0x96>
        __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	623b      	str	r3, [r7, #32]
    }
 800443c:	bf00      	nop
 800443e:	4b40      	ldr	r3, [pc, #256]	; (8004540 <Hashmap_find_bucket+0x148>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68dc      	ldr	r4, [r3, #12]
 8004444:	f003 fd10 	bl	8007e68 <__errno>
 8004448:	4603      	mov	r3, r0
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <Hashmap_find_bucket+0x6a>
 8004450:	f003 fd0a 	bl	8007e68 <__errno>
 8004454:	4603      	mov	r3, r0
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f004 fb57 	bl	8008b0c <strerror>
 800445e:	4603      	mov	r3, r0
 8004460:	e000      	b.n	8004464 <Hashmap_find_bucket+0x6c>
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <Hashmap_find_bucket+0x14c>)
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	9201      	str	r2, [sp, #4]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2329      	movs	r3, #41	; 0x29
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <Hashmap_find_bucket+0x150>)
 800446e:	4937      	ldr	r1, [pc, #220]	; (800454c <Hashmap_find_bucket+0x154>)
 8004470:	4620      	mov	r0, r4
 8004472:	f003 fd13 	bl	8007e9c <fiprintf>
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
        __asm volatile
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f383 8811 	msr	BASEPRI, r3
    }
 8004480:	bf00      	nop
 8004482:	f003 fcf1 	bl	8007e68 <__errno>
 8004486:	4603      	mov	r3, r0
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e050      	b.n	8004530 <Hashmap_find_bucket+0x138>
  *hash_out = hash;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004492:	601a      	str	r2, [r3, #0]

  Tm_DArray *bucket = Tm_DArray_get(map->buckets, bucket_n);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ff06 	bl	80042ac <Tm_DArray_get>
 80044a0:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (!bucket && create) {
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d141      	bne.n	800452c <Hashmap_find_bucket+0x134>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d03e      	beq.n	800452c <Hashmap_find_bucket+0x134>
    bucket = Tm_DArray_create(sizeof(HashmapNode *), DEFAULT_NUMBER_OF_BUCKETS);
 80044ae:	2164      	movs	r1, #100	; 0x64
 80044b0:	2004      	movs	r0, #4
 80044b2:	f7fe ff89 	bl	80033c8 <Tm_DArray_create>
 80044b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    check_mem(bucket);
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12f      	bne.n	800451e <Hashmap_find_bucket+0x126>
        __asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	61bb      	str	r3, [r7, #24]
    }
 80044d0:	bf00      	nop
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <Hashmap_find_bucket+0x148>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68dc      	ldr	r4, [r3, #12]
 80044d8:	f003 fcc6 	bl	8007e68 <__errno>
 80044dc:	4603      	mov	r3, r0
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <Hashmap_find_bucket+0xfe>
 80044e4:	f003 fcc0 	bl	8007e68 <__errno>
 80044e8:	4603      	mov	r3, r0
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 fb0d 	bl	8008b0c <strerror>
 80044f2:	4603      	mov	r3, r0
 80044f4:	e000      	b.n	80044f8 <Hashmap_find_bucket+0x100>
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <Hashmap_find_bucket+0x14c>)
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	2330      	movs	r3, #48	; 0x30
 80044fc:	4a12      	ldr	r2, [pc, #72]	; (8004548 <Hashmap_find_bucket+0x150>)
 80044fe:	4914      	ldr	r1, [pc, #80]	; (8004550 <Hashmap_find_bucket+0x158>)
 8004500:	4620      	mov	r0, r4
 8004502:	f003 fccb 	bl	8007e9c <fiprintf>
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
        __asm volatile
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f383 8811 	msr	BASEPRI, r3
    }
 8004510:	bf00      	nop
 8004512:	f003 fca9 	bl	8007e68 <__errno>
 8004516:	4603      	mov	r3, r0
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e008      	b.n	8004530 <Hashmap_find_bucket+0x138>
    Tm_DArray_set(map->buckets, bucket_n, bucket);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f9de 	bl	80038e8 <Tm_DArray_set>
  }

  return bucket;
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	e000      	b.n	8004532 <Hashmap_find_bucket+0x13a>

error:
  return NULL;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3734      	adds	r7, #52	; 0x34
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}
 800453a:	bf00      	nop
 800453c:	51eb851f 	.word	0x51eb851f
 8004540:	20000014 	.word	0x20000014
 8004544:	08009a80 	.word	0x08009a80
 8004548:	08009b2c 	.word	0x08009b2c
 800454c:	08009b78 	.word	0x08009b78
 8004550:	08009b48 	.word	0x08009b48

08004554 <gc_Hashmap_set>:

int gc_Hashmap_set(TmHeap *heap, Object *obj_map, char *key, char *data)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b095      	sub	sp, #84	; 0x54
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  Hashmap *map = OBJ2HASH(obj_map);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	647b      	str	r3, [r7, #68]	; 0x44

  uint32_t hash = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
  Tm_DArray *bucket = Hashmap_find_bucket(map, key, 1, &hash);
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	2201      	movs	r2, #1
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004576:	f7ff ff3f 	bl	80043f8 <Hashmap_find_bucket>
 800457a:	6438      	str	r0, [r7, #64]	; 0x40
  check(bucket, "Error can't create bucket.");
 800457c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d12f      	bne.n	80045e2 <gc_Hashmap_set+0x8e>
        __asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8004594:	bf00      	nop
 8004596:	4b72      	ldr	r3, [pc, #456]	; (8004760 <gc_Hashmap_set+0x20c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68dc      	ldr	r4, [r3, #12]
 800459c:	f003 fc64 	bl	8007e68 <__errno>
 80045a0:	4603      	mov	r3, r0
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <gc_Hashmap_set+0x66>
 80045a8:	f003 fc5e 	bl	8007e68 <__errno>
 80045ac:	4603      	mov	r3, r0
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 faab 	bl	8008b0c <strerror>
 80045b6:	4603      	mov	r3, r0
 80045b8:	e000      	b.n	80045bc <gc_Hashmap_set+0x68>
 80045ba:	4b6a      	ldr	r3, [pc, #424]	; (8004764 <gc_Hashmap_set+0x210>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	2340      	movs	r3, #64	; 0x40
 80045c0:	4a69      	ldr	r2, [pc, #420]	; (8004768 <gc_Hashmap_set+0x214>)
 80045c2:	496a      	ldr	r1, [pc, #424]	; (800476c <gc_Hashmap_set+0x218>)
 80045c4:	4620      	mov	r0, r4
 80045c6:	f003 fc69 	bl	8007e9c <fiprintf>
 80045ca:	2300      	movs	r3, #0
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        __asm volatile
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	f383 8811 	msr	BASEPRI, r3
    }
 80045d4:	bf00      	nop
 80045d6:	f003 fc47 	bl	8007e68 <__errno>
 80045da:	4603      	mov	r3, r0
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e0b7      	b.n	8004752 <gc_Hashmap_set+0x1fe>

  Object *obj_key = String_new(heap, key);
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fd90 	bl	800510a <String_new>
 80045ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  check(obj_key, "Error can't create obj_key.");
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d12f      	bne.n	8004652 <gc_Hashmap_set+0xfe>
        __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004604:	bf00      	nop
 8004606:	4b56      	ldr	r3, [pc, #344]	; (8004760 <gc_Hashmap_set+0x20c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68dc      	ldr	r4, [r3, #12]
 800460c:	f003 fc2c 	bl	8007e68 <__errno>
 8004610:	4603      	mov	r3, r0
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <gc_Hashmap_set+0xd6>
 8004618:	f003 fc26 	bl	8007e68 <__errno>
 800461c:	4603      	mov	r3, r0
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f004 fa73 	bl	8008b0c <strerror>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <gc_Hashmap_set+0xd8>
 800462a:	4b4e      	ldr	r3, [pc, #312]	; (8004764 <gc_Hashmap_set+0x210>)
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	2343      	movs	r3, #67	; 0x43
 8004630:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <gc_Hashmap_set+0x214>)
 8004632:	494f      	ldr	r1, [pc, #316]	; (8004770 <gc_Hashmap_set+0x21c>)
 8004634:	4620      	mov	r0, r4
 8004636:	f003 fc31 	bl	8007e9c <fiprintf>
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	f383 8811 	msr	BASEPRI, r3
    }
 8004644:	bf00      	nop
 8004646:	f003 fc0f 	bl	8007e68 <__errno>
 800464a:	4603      	mov	r3, r0
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e07f      	b.n	8004752 <gc_Hashmap_set+0x1fe>
  Object *obj_data = String_new(heap, data);
 8004652:	6839      	ldr	r1, [r7, #0]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fd58 	bl	800510a <String_new>
 800465a:	63b8      	str	r0, [r7, #56]	; 0x38
  check(obj_data, "Error can't create obj_data.");
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	2b00      	cmp	r3, #0
 8004660:	d12f      	bne.n	80046c2 <gc_Hashmap_set+0x16e>
        __asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	623b      	str	r3, [r7, #32]
    }
 8004674:	bf00      	nop
 8004676:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <gc_Hashmap_set+0x20c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68dc      	ldr	r4, [r3, #12]
 800467c:	f003 fbf4 	bl	8007e68 <__errno>
 8004680:	4603      	mov	r3, r0
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <gc_Hashmap_set+0x146>
 8004688:	f003 fbee 	bl	8007e68 <__errno>
 800468c:	4603      	mov	r3, r0
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f004 fa3b 	bl	8008b0c <strerror>
 8004696:	4603      	mov	r3, r0
 8004698:	e000      	b.n	800469c <gc_Hashmap_set+0x148>
 800469a:	4b32      	ldr	r3, [pc, #200]	; (8004764 <gc_Hashmap_set+0x210>)
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2345      	movs	r3, #69	; 0x45
 80046a0:	4a31      	ldr	r2, [pc, #196]	; (8004768 <gc_Hashmap_set+0x214>)
 80046a2:	4934      	ldr	r1, [pc, #208]	; (8004774 <gc_Hashmap_set+0x220>)
 80046a4:	4620      	mov	r0, r4
 80046a6:	f003 fbf9 	bl	8007e9c <fiprintf>
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
        __asm volatile
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f383 8811 	msr	BASEPRI, r3
    }
 80046b4:	bf00      	nop
 80046b6:	f003 fbd7 	bl	8007e68 <__errno>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e047      	b.n	8004752 <gc_Hashmap_set+0x1fe>
  HashmapNode *node = Hashmap_node_create(hash, obj_key, obj_data);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fe3d 	bl	8004348 <Hashmap_node_create>
 80046ce:	6378      	str	r0, [r7, #52]	; 0x34
  check_mem(node);
 80046d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d12f      	bne.n	8004736 <gc_Hashmap_set+0x1e2>
        __asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	61bb      	str	r3, [r7, #24]
    }
 80046e8:	bf00      	nop
 80046ea:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <gc_Hashmap_set+0x20c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68dc      	ldr	r4, [r3, #12]
 80046f0:	f003 fbba 	bl	8007e68 <__errno>
 80046f4:	4603      	mov	r3, r0
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <gc_Hashmap_set+0x1ba>
 80046fc:	f003 fbb4 	bl	8007e68 <__errno>
 8004700:	4603      	mov	r3, r0
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f004 fa01 	bl	8008b0c <strerror>
 800470a:	4603      	mov	r3, r0
 800470c:	e000      	b.n	8004710 <gc_Hashmap_set+0x1bc>
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <gc_Hashmap_set+0x210>)
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2347      	movs	r3, #71	; 0x47
 8004714:	4a14      	ldr	r2, [pc, #80]	; (8004768 <gc_Hashmap_set+0x214>)
 8004716:	4918      	ldr	r1, [pc, #96]	; (8004778 <gc_Hashmap_set+0x224>)
 8004718:	4620      	mov	r0, r4
 800471a:	f003 fbbf 	bl	8007e9c <fiprintf>
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f383 8811 	msr	BASEPRI, r3
    }
 8004728:	bf00      	nop
 800472a:	f003 fb9d 	bl	8007e68 <__errno>
 800472e:	4603      	mov	r3, r0
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e00d      	b.n	8004752 <gc_Hashmap_set+0x1fe>

  Tm_DArray_push(bucket, node);
 8004736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004738:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800473a:	f7ff f837 	bl	80037ac <Tm_DArray_push>

  Object_relate(obj_key, obj_data);
 800473e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004740:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004742:	f000 fd28 	bl	8005196 <Object_relate>
  Object_relate(obj_map, obj_key);
 8004746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f000 fd24 	bl	8005196 <Object_relate>

  return 0;
 800474e:	2300      	movs	r3, #0
 8004750:	e001      	b.n	8004756 <gc_Hashmap_set+0x202>

error:
  return -1;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004756:	4618      	mov	r0, r3
 8004758:	374c      	adds	r7, #76	; 0x4c
 800475a:	46bd      	mov	sp, r7
 800475c:	bd90      	pop	{r4, r7, pc}
 800475e:	bf00      	nop
 8004760:	20000014 	.word	0x20000014
 8004764:	08009a80 	.word	0x08009a80
 8004768:	08009b2c 	.word	0x08009b2c
 800476c:	08009bb0 	.word	0x08009bb0
 8004770:	08009be8 	.word	0x08009be8
 8004774:	08009c24 	.word	0x08009c24
 8004778:	08009b48 	.word	0x08009b48

0800477c <Hashmap_get_node>:

static inline int Hashmap_get_node(Hashmap *map, uint32_t hash, Tm_DArray *bucket, char *key)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  for(int i = 0; i < Tm_DArray_end(bucket); i++) {
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e019      	b.n	80047c4 <Hashmap_get_node+0x48>
    HashmapNode *node = Tm_DArray_get(bucket, i);
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fd8a 	bl	80042ac <Tm_DArray_get>
 8004798:	6138      	str	r0, [r7, #16]
    if(node->hash == hash && map->compare(OBJ2STR(node->key), key) == 0) {
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d10c      	bne.n	80047be <Hashmap_get_node+0x42>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	6892      	ldr	r2, [r2, #8]
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	4610      	mov	r0, r2
 80047b2:	4798      	blx	r3
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <Hashmap_get_node+0x42>
      return i;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	e00e      	b.n	80047dc <Hashmap_get_node+0x60>
  for(int i = 0; i < Tm_DArray_end(bucket); i++) {
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3301      	adds	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <Hashmap_get_node+0x54>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	e000      	b.n	80047d2 <Hashmap_get_node+0x56>
 80047d0:	2300      	movs	r3, #0
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	dcdb      	bgt.n	8004790 <Hashmap_get_node+0x14>
    }
  }

  return -1;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <gc_Hashmap_get>:

void *gc_Hashmap_get(Object *obj_map, char *key)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b08d      	sub	sp, #52	; 0x34
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  Hashmap *map = OBJ2HASH(obj_map);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t hash = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  Tm_DArray *bucket = Hashmap_find_bucket(map, key, 0, &hash);
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	2200      	movs	r2, #0
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004802:	f7ff fdf9 	bl	80043f8 <Hashmap_find_bucket>
 8004806:	6238      	str	r0, [r7, #32]
  if(!bucket) return NULL;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <gc_Hashmap_get+0x2e>
 800480e:	2300      	movs	r3, #0
 8004810:	e049      	b.n	80048a6 <gc_Hashmap_get+0xc2>

  int i = Hashmap_get_node(map, hash, bucket, key);
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6a3a      	ldr	r2, [r7, #32]
 8004818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800481a:	f7ff ffaf 	bl	800477c <Hashmap_get_node>
 800481e:	61f8      	str	r0, [r7, #28]
  if(i == -1) return NULL;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d101      	bne.n	800482c <gc_Hashmap_get+0x48>
 8004828:	2300      	movs	r3, #0
 800482a:	e03c      	b.n	80048a6 <gc_Hashmap_get+0xc2>

  HashmapNode *node = Tm_DArray_get(bucket, i);
 800482c:	69f9      	ldr	r1, [r7, #28]
 800482e:	6a38      	ldr	r0, [r7, #32]
 8004830:	f7ff fd3c 	bl	80042ac <Tm_DArray_get>
 8004834:	61b8      	str	r0, [r7, #24]
  check(node != NULL, "Failed to get node from bucket when it should exist.");
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d131      	bne.n	80048a0 <gc_Hashmap_get+0xbc>
        __asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	617b      	str	r3, [r7, #20]
    }
 800484e:	bf00      	nop
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <gc_Hashmap_get+0xcc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68dc      	ldr	r4, [r3, #12]
 8004856:	f003 fb07 	bl	8007e68 <__errno>
 800485a:	4603      	mov	r3, r0
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <gc_Hashmap_get+0x90>
 8004862:	f003 fb01 	bl	8007e68 <__errno>
 8004866:	4603      	mov	r3, r0
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f004 f94e 	bl	8008b0c <strerror>
 8004870:	4603      	mov	r3, r0
 8004872:	e000      	b.n	8004876 <gc_Hashmap_get+0x92>
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <gc_Hashmap_get+0xd0>)
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	236c      	movs	r3, #108	; 0x6c
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <gc_Hashmap_get+0xd4>)
 800487c:	490f      	ldr	r1, [pc, #60]	; (80048bc <gc_Hashmap_get+0xd8>)
 800487e:	4620      	mov	r0, r4
 8004880:	f003 fb0c 	bl	8007e9c <fiprintf>
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f383 8811 	msr	BASEPRI, r3
    }
 800488e:	bf00      	nop
 8004890:	f003 faea 	bl	8007e68 <__errno>
 8004894:	4603      	mov	r3, r0
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	bf00      	nop

  return OBJ2STR(node->data);

error:
  return NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	e002      	b.n	80048a6 <gc_Hashmap_get+0xc2>
  return OBJ2STR(node->data);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	372c      	adds	r7, #44	; 0x2c
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000014 	.word	0x20000014
 80048b4:	08009a80 	.word	0x08009a80
 80048b8:	08009b2c 	.word	0x08009b2c
 80048bc:	08009c60 	.word	0x08009c60

080048c0 <gc_Hashmap_delete>:


void gc_Hashmap_delete(Object *obj_map, char *key)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  Hashmap *map = OBJ2HASH(obj_map);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t hash = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  Tm_DArray *bucket = Hashmap_find_bucket(map, key, 0, &hash);
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	2200      	movs	r2, #0
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048de:	f7ff fd8b 	bl	80043f8 <Hashmap_find_bucket>
 80048e2:	6238      	str	r0, [r7, #32]
  if(!bucket) return;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d027      	beq.n	800493a <gc_Hashmap_delete+0x7a>

  int i = Hashmap_get_node(map, hash, bucket, key);
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f2:	f7ff ff43 	bl	800477c <Hashmap_get_node>
 80048f6:	61f8      	str	r0, [r7, #28]
  if(i == -1) return;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d01e      	beq.n	800493e <gc_Hashmap_delete+0x7e>

  HashmapNode *node = Tm_DArray_get(bucket, i);
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	6a38      	ldr	r0, [r7, #32]
 8004904:	f7ff fcd2 	bl	80042ac <Tm_DArray_get>
 8004908:	61b8      	str	r0, [r7, #24]
  Object *obj_key = node->key;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]

  Object_unrelate(obj_map, obj_key);
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fc6b 	bl	80051ee <Object_unrelate>
  free(node);
 8004918:	69b8      	ldr	r0, [r7, #24]
 800491a:	f003 fafd 	bl	8007f18 <free>

  HashmapNode *ending = Tm_DArray_pop(bucket);
 800491e:	6a38      	ldr	r0, [r7, #32]
 8004920:	f7fe ff70 	bl	8003804 <Tm_DArray_pop>
 8004924:	6138      	str	r0, [r7, #16]
  if(ending != node) {
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	429a      	cmp	r2, r3
 800492c:	d008      	beq.n	8004940 <gc_Hashmap_delete+0x80>
    Tm_DArray_set(bucket, i, ending);
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	6a38      	ldr	r0, [r7, #32]
 8004934:	f7fe ffd8 	bl	80038e8 <Tm_DArray_set>
 8004938:	e002      	b.n	8004940 <gc_Hashmap_delete+0x80>
  if(!bucket) return;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <gc_Hashmap_delete+0x80>
  if(i == -1) return;
 800493e:	bf00      	nop
  }

}
 8004940:	3728      	adds	r7, #40	; 0x28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <test_rootset>:
#include <treadmill/object.h>
#include "string.h"

Tm_DArray*
test_rootset(TmStateHeader *state_h)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  Tm_DArray *rootset = Tm_DArray_create(sizeof(TmObjectHeader*), 10);
 800494e:	210a      	movs	r1, #10
 8004950:	2004      	movs	r0, #4
 8004952:	f7fe fd39 	bl	80033c8 <Tm_DArray_create>
 8004956:	6138      	str	r0, [r7, #16]
  State *state = (State*)state_h;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60fb      	str	r3, [r7, #12]
  for(int i=0; i<Tm_DArray_count(state->rootset);i++) {
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e00d      	b.n	800497e <test_rootset+0x38>
    Tm_DArray_push(rootset, state->rootset->contents[i]);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	6938      	ldr	r0, [r7, #16]
 8004974:	f7fe ff1a 	bl	80037ac <Tm_DArray_push>
  for(int i=0; i<Tm_DArray_count(state->rootset);i++) {
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <test_rootset+0x48>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	e000      	b.n	8004990 <test_rootset+0x4a>
 800498e:	2300      	movs	r3, #0
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4293      	cmp	r3, r2
 8004994:	dce5      	bgt.n	8004962 <test_rootset+0x1c>
  }

  return rootset;
 8004996:	693b      	ldr	r3, [r7, #16]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <test_scan_pointers>:

void
test_scan_pointers(TmHeap *heap, TmObjectHeader *object, TmCallbackFn callback)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  Object *self = (Object*)object;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61bb      	str	r3, [r7, #24]
  for(int i=0; i < Tm_DArray_count(self->children); i++) {
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e00e      	b.n	80049d4 <test_scan_pointers+0x34>
//    TmObjectHeader *o = (TmObjectHeader*)Tm_DArray_at(self->children, i);
	TmObjectHeader *o = (TmObjectHeader*)(self->children->contents[i]);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	617b      	str	r3, [r7, #20]
    callback(heap, o);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6979      	ldr	r1, [r7, #20]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	4798      	blx	r3
  for(int i=0; i < Tm_DArray_count(self->children); i++) {
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <test_scan_pointers+0x44>
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	e000      	b.n	80049e6 <test_scan_pointers+0x46>
 80049e4:	2300      	movs	r3, #0
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	dce4      	bgt.n	80049b6 <test_scan_pointers+0x16>
  }
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <test_release>:

void
test_release(void *value)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  Object_destroy((Object*)value);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fc57 	bl	80052b2 <Object_destroy>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <State_new>:

State*
State_new()
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
  State *state = calloc(1, sizeof(State));
 8004a12:	2108      	movs	r1, #8
 8004a14:	2001      	movs	r0, #1
 8004a16:	f003 fa1f 	bl	8007e58 <calloc>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	607b      	str	r3, [r7, #4]
  state->gc.rootset_fn = test_rootset;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <State_new+0x30>)
 8004a22:	601a      	str	r2, [r3, #0]
  state->rootset = Tm_DArray_create(sizeof(Object*), 10);
 8004a24:	210a      	movs	r1, #10
 8004a26:	2004      	movs	r0, #4
 8004a28:	f7fe fcce 	bl	80033c8 <Tm_DArray_create>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	605a      	str	r2, [r3, #4]
  return state;
 8004a32:	687b      	ldr	r3, [r7, #4]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08004947 	.word	0x08004947

08004a40 <new_heap>:

TmHeap*
new_heap(State *state, int size, int growth_rate)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af04      	add	r7, sp, #16
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  return TmHeap_new(
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <new_heap+0x30>)
 8004a4e:	9302      	str	r3, [sp, #8]
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <new_heap+0x34>)
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	2318      	movs	r3, #24
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2305      	movs	r3, #5
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff f868 	bl	8003b34 <TmHeap_new>
 8004a64:	4603      	mov	r3, r0
    5,
    sizeof(Object),
    test_release,
    test_scan_pointers
    );
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	080049a1 	.word	0x080049a1
 8004a74:	080049f7 	.word	0x080049f7

08004a78 <gc_vector_push>:
 */

#include <treadmill/gc_vector.h>


int gc_vector_push(TmHeap *heap, Object *obj_vector, double num) {
 8004a78:	b590      	push	{r4, r7, lr}
 8004a7a:	b08b      	sub	sp, #44	; 0x2c
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	ed87 0b00 	vstr	d0, [r7]

	Object *obj_num = Number_new(heap, num);
 8004a86:	ed97 0b00 	vldr	d0, [r7]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fb28 	bl	80050e0 <Number_new>
 8004a90:	61f8      	str	r0, [r7, #28]
	check(obj_num, "Error can't create obj_num.");
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d132      	bne.n	8004afe <gc_vector_push+0x86>
        __asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	61bb      	str	r3, [r7, #24]
    }
 8004aaa:	bf00      	nop
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <gc_vector_push+0x98>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68dc      	ldr	r4, [r3, #12]
 8004ab2:	f003 f9d9 	bl	8007e68 <__errno>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <gc_vector_push+0x58>
 8004abe:	f003 f9d3 	bl	8007e68 <__errno>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f004 f820 	bl	8008b0c <strerror>
 8004acc:	4603      	mov	r3, r0
 8004ace:	e000      	b.n	8004ad2 <gc_vector_push+0x5a>
 8004ad0:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <gc_vector_push+0x9c>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	230e      	movs	r3, #14
 8004ad6:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <gc_vector_push+0xa0>)
 8004ad8:	4910      	ldr	r1, [pc, #64]	; (8004b1c <gc_vector_push+0xa4>)
 8004ada:	4620      	mov	r0, r4
 8004adc:	f003 f9de 	bl	8007e9c <fiprintf>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f383 8811 	msr	BASEPRI, r3
    }
 8004aea:	bf00      	nop
 8004aec:	f003 f9bc 	bl	8007e68 <__errno>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	bf00      	nop
	Object_relate(obj_vector, obj_num);

	return 0;
error:
	return -1;
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
 8004afc:	e004      	b.n	8004b08 <gc_vector_push+0x90>
	Object_relate(obj_vector, obj_num);
 8004afe:	69f9      	ldr	r1, [r7, #28]
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f000 fb48 	bl	8005196 <Object_relate>
	return 0;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3724      	adds	r7, #36	; 0x24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}
 8004b10:	20000014 	.word	0x20000014
 8004b14:	08009cb4 	.word	0x08009cb4
 8004b18:	08009cbc 	.word	0x08009cbc
 8004b1c:	08009cd4 	.word	0x08009cd4

08004b20 <gc_vector_pop>:


void gc_vector_pop(Object *obj_vector) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	Object *obj_num = Tm_DArray_pop(OBJ2ARY(obj_vector));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fe69 	bl	8003804 <Tm_DArray_pop>
 8004b32:	60f8      	str	r0, [r7, #12]
	obj_num->parent = NULL;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <gc_vector_clear>:

void gc_vector_clear(Object *obj_vector) {
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]

	Tm_DArray *vector = OBJ2ARY(obj_vector);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

	for(int i = Tm_DArray_end(vector); i > 0; --i) {
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <gc_vector_clear+0x1a>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	e000      	b.n	8004b5e <gc_vector_clear+0x1c>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e005      	b.n	8004b6e <gc_vector_clear+0x2c>
		gc_vector_pop(obj_vector);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ffdc 	bl	8004b20 <gc_vector_pop>
	for(int i = Tm_DArray_end(vector); i > 0; --i) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dcf6      	bgt.n	8004b62 <gc_vector_clear+0x20>
	}
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <Tm_DArray_get>:
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  check(i < array->max, "darray attempt to get past max");
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	db31      	blt.n	8004bf8 <Tm_DArray_get+0x78>
        __asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
    }
 8004ba6:	bf00      	nop
 8004ba8:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <Tm_DArray_get+0x8c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68dc      	ldr	r4, [r3, #12]
 8004bae:	f003 f95b 	bl	8007e68 <__errno>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <Tm_DArray_get+0x4c>
 8004bba:	f003 f955 	bl	8007e68 <__errno>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 ffa2 	bl	8008b0c <strerror>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	e000      	b.n	8004bce <Tm_DArray_get+0x4e>
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <Tm_DArray_get+0x90>)
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2326      	movs	r3, #38	; 0x26
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <Tm_DArray_get+0x94>)
 8004bd4:	4910      	ldr	r1, [pc, #64]	; (8004c18 <Tm_DArray_get+0x98>)
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f003 f960 	bl	8007e9c <fiprintf>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f383 8811 	msr	BASEPRI, r3
    }
 8004be6:	bf00      	nop
 8004be8:	f003 f93e 	bl	8007e68 <__errno>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	bf00      	nop
  return NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e005      	b.n	8004c04 <Tm_DArray_get+0x84>
  return array->contents[i];
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	20000014 	.word	0x20000014
 8004c10:	08009d10 	.word	0x08009d10
 8004c14:	08009d18 	.word	0x08009d18
 8004c18:	08009d80 	.word	0x08009d80

08004c1c <default_compare>:
{
  return strcmp((const char *)b, (const char *)a);
}

static int default_compare(void *a, void *b)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  return strcmp((const char *)a, (const char *)b);
 8004c26:	6839      	ldr	r1, [r7, #0]
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fb fad1 	bl	80001d0 <strcmp>
 8004c2e:	4603      	mov	r3, r0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <default_hash>:

static uint32_t default_hash(void *a)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  size_t len = strlen((const char *)a);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fb facf 	bl	80001e4 <strlen>
 8004c46:	60f8      	str	r0, [r7, #12]
  char *key = (const char *)a;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60bb      	str	r3, [r7, #8]
  uint32_t hash = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]

  // Jenkins hash function
  for(hash = i = 0; i < len; ++i)
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e014      	b.n	8004c88 <default_hash+0x50>
  {
    hash += key[i];
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
    hash += (hash << 10);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	029b      	lsls	r3, r3, #10
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    hash ^= (hash >> 6);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4053      	eors	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
  for(hash = i = 0; i < len; ++i)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3301      	adds	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3e6      	bcc.n	8004c5e <default_hash+0x26>
  }

  hash += (hash << 3);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4413      	add	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  hash ^= (hash >> 11);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0adb      	lsrs	r3, r3, #11
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4053      	eors	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
  hash += (hash << 15);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	03db      	lsls	r3, r3, #15
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  return hash;
 8004cae:	697b      	ldr	r3, [r7, #20]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <Hashmap_create>:

Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash hash)
{
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b08b      	sub	sp, #44	; 0x2c
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  Hashmap *map = calloc(1, sizeof(Hashmap));
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f003 f8c7 	bl	8007e58 <calloc>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	61fb      	str	r3, [r7, #28]
  check_mem(map);
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d12f      	bne.n	8004d34 <Hashmap_create+0x7c>
        __asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	61bb      	str	r3, [r7, #24]
    }
 8004ce6:	bf00      	nop
 8004ce8:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <Hashmap_create+0x138>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68dc      	ldr	r4, [r3, #12]
 8004cee:	f003 f8bb 	bl	8007e68 <__errno>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <Hashmap_create+0x54>
 8004cfa:	f003 f8b5 	bl	8007e68 <__errno>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 ff02 	bl	8008b0c <strerror>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	e000      	b.n	8004d0e <Hashmap_create+0x56>
 8004d0c:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <Hashmap_create+0x13c>)
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	232f      	movs	r3, #47	; 0x2f
 8004d12:	4a39      	ldr	r2, [pc, #228]	; (8004df8 <Hashmap_create+0x140>)
 8004d14:	4939      	ldr	r1, [pc, #228]	; (8004dfc <Hashmap_create+0x144>)
 8004d16:	4620      	mov	r0, r4
 8004d18:	f003 f8c0 	bl	8007e9c <fiprintf>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f383 8811 	msr	BASEPRI, r3
    }
 8004d26:	bf00      	nop
 8004d28:	f003 f89e 	bl	8007e68 <__errno>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e052      	b.n	8004dda <Hashmap_create+0x122>

  map->compare = compare == NULL ? default_compare : compare;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <Hashmap_create+0x86>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	e000      	b.n	8004d40 <Hashmap_create+0x88>
 8004d3e:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <Hashmap_create+0x148>)
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	6053      	str	r3, [r2, #4]
  map->hash = hash == NULL ? default_hash : hash;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <Hashmap_create+0x96>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	e000      	b.n	8004d50 <Hashmap_create+0x98>
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <Hashmap_create+0x14c>)
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	6093      	str	r3, [r2, #8]
  map->buckets = Tm_DArray_create(sizeof(Tm_DArray *), DEFAULT_NUMBER_OF_BUCKETS);
 8004d54:	2164      	movs	r1, #100	; 0x64
 8004d56:	2004      	movs	r0, #4
 8004d58:	f7fe fb36 	bl	80033c8 <Tm_DArray_create>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	601a      	str	r2, [r3, #0]
  map->buckets->end = map->buckets->max;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6852      	ldr	r2, [r2, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
  check_mem(map->buckets);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d12f      	bne.n	8004dd6 <Hashmap_create+0x11e>
        __asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	613b      	str	r3, [r7, #16]
    }
 8004d88:	bf00      	nop
 8004d8a:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <Hashmap_create+0x138>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68dc      	ldr	r4, [r3, #12]
 8004d90:	f003 f86a 	bl	8007e68 <__errno>
 8004d94:	4603      	mov	r3, r0
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <Hashmap_create+0xf6>
 8004d9c:	f003 f864 	bl	8007e68 <__errno>
 8004da0:	4603      	mov	r3, r0
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f003 feb1 	bl	8008b0c <strerror>
 8004daa:	4603      	mov	r3, r0
 8004dac:	e000      	b.n	8004db0 <Hashmap_create+0xf8>
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <Hashmap_create+0x13c>)
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2335      	movs	r3, #53	; 0x35
 8004db4:	4a10      	ldr	r2, [pc, #64]	; (8004df8 <Hashmap_create+0x140>)
 8004db6:	4911      	ldr	r1, [pc, #68]	; (8004dfc <Hashmap_create+0x144>)
 8004db8:	4620      	mov	r0, r4
 8004dba:	f003 f86f 	bl	8007e9c <fiprintf>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f383 8811 	msr	BASEPRI, r3
    }
 8004dc8:	bf00      	nop
 8004dca:	f003 f84d 	bl	8007e68 <__errno>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e001      	b.n	8004dda <Hashmap_create+0x122>

  return map;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	e006      	b.n	8004de8 <Hashmap_create+0x130>

error:
  if(map) {
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <Hashmap_create+0x12e>
    Hashmap_destroy(map);
 8004de0:	69f8      	ldr	r0, [r7, #28]
 8004de2:	f000 f811 	bl	8004e08 <Hashmap_destroy>
  }

  return NULL;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3724      	adds	r7, #36	; 0x24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}
 8004df0:	20000014 	.word	0x20000014
 8004df4:	08009d10 	.word	0x08009d10
 8004df8:	08009dbc 	.word	0x08009dbc
 8004dfc:	08009dd4 	.word	0x08009dd4
 8004e00:	08004c1d 	.word	0x08004c1d
 8004e04:	08004c39 	.word	0x08004c39

08004e08 <Hashmap_destroy>:

void Hashmap_destroy(Hashmap *map)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  if(map) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d042      	beq.n	8004e9c <Hashmap_destroy+0x94>
    if(map->buckets) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d03b      	beq.n	8004e96 <Hashmap_destroy+0x8e>
      for(int i = 0; i < Tm_DArray_count(map->buckets); i++) {
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e027      	b.n	8004e74 <Hashmap_destroy+0x6c>
        Tm_DArray *bucket = Tm_DArray_get(map->buckets, i);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fea8 	bl	8004b80 <Tm_DArray_get>
 8004e30:	60f8      	str	r0, [r7, #12]
        if(bucket) {
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01a      	beq.n	8004e6e <Hashmap_destroy+0x66>
          for(int j = 0; j < Tm_DArray_count(bucket); j++) {
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e00a      	b.n	8004e54 <Hashmap_destroy+0x4c>
            free(Tm_DArray_get(bucket, j));
 8004e3e:	6939      	ldr	r1, [r7, #16]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fe9d 	bl	8004b80 <Tm_DArray_get>
 8004e46:	4603      	mov	r3, r0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f003 f865 	bl	8007f18 <free>
          for(int j = 0; j < Tm_DArray_count(bucket); j++) {
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	3301      	adds	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <Hashmap_destroy+0x58>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	e000      	b.n	8004e62 <Hashmap_destroy+0x5a>
 8004e60:	2300      	movs	r3, #0
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	dcea      	bgt.n	8004e3e <Hashmap_destroy+0x36>
          }
          Tm_DArray_destroy(bucket);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7fe fc88 	bl	800377e <Tm_DArray_destroy>
      for(int i = 0; i < Tm_DArray_count(map->buckets); i++) {
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <Hashmap_destroy+0x7c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	e000      	b.n	8004e86 <Hashmap_destroy+0x7e>
 8004e84:	2300      	movs	r3, #0
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	dccb      	bgt.n	8004e24 <Hashmap_destroy+0x1c>
        }
      }
      Tm_DArray_destroy(map->buckets);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fc74 	bl	800377e <Tm_DArray_destroy>
    }

    free(map);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f003 f83e 	bl	8007f18 <free>
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f103 0208 	add.w	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f103 0208 	add.w	r2, r3, #8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f103 0208 	add.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d103      	bne.n	8004f66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e00c      	b.n	8004f80 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e002      	b.n	8004f74 <vListInsert+0x2e>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d2f6      	bcs.n	8004f6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	601a      	str	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6892      	ldr	r2, [r2, #8]
 8004fce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6852      	ldr	r2, [r2, #4]
 8004fd8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d103      	bne.n	8004fec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <Object_new>:

#include "string.h"

Object*
Object_new(TmHeap *heap, ValueType type)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  Object *obj = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  if (xSemaphoreTake( xSemaphore, ( TickType_t ) 10 ) == pdTRUE ) {
 800501c:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <Object_new+0xc0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	210a      	movs	r1, #10
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fd8c 	bl	8005b40 <xQueueSemaphoreTake>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d115      	bne.n	800505a <Object_new+0x4e>
	  obj = (Object*)Tm_allocate(heap);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff f888 	bl	8004144 <Tm_allocate>
 8005034:	6178      	str	r0, [r7, #20]
	  xSemaphoreGive( xSemaphore );
 8005036:	4b25      	ldr	r3, [pc, #148]	; (80050cc <Object_new+0xc0>)
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	2300      	movs	r3, #0
 800503c:	2200      	movs	r2, #0
 800503e:	2100      	movs	r1, #0
 8005040:	f000 faf6 	bl	8005630 <xQueueGenericSend>

	  obj->type = type;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	711a      	strb	r2, [r3, #4]
	  obj->parent = NULL;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
	  obj->children = NULL;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2200      	movs	r2, #0
 8005054:	615a      	str	r2, [r3, #20]
	  return obj;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	e034      	b.n	80050c4 <Object_new+0xb8>
  }
  check(obj, "Error can't create obj.");
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d12f      	bne.n	80050c0 <Object_new+0xb4>
        __asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
    }
 8005072:	bf00      	nop
 8005074:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <Object_new+0xc4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68dc      	ldr	r4, [r3, #12]
 800507a:	f002 fef5 	bl	8007e68 <__errno>
 800507e:	4603      	mov	r3, r0
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <Object_new+0x8c>
 8005086:	f002 feef 	bl	8007e68 <__errno>
 800508a:	4603      	mov	r3, r0
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f003 fd3c 	bl	8008b0c <strerror>
 8005094:	4603      	mov	r3, r0
 8005096:	e000      	b.n	800509a <Object_new+0x8e>
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <Object_new+0xc8>)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2319      	movs	r3, #25
 800509e:	4a0e      	ldr	r2, [pc, #56]	; (80050d8 <Object_new+0xcc>)
 80050a0:	490e      	ldr	r1, [pc, #56]	; (80050dc <Object_new+0xd0>)
 80050a2:	4620      	mov	r0, r4
 80050a4:	f002 fefa 	bl	8007e9c <fiprintf>
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f383 8811 	msr	BASEPRI, r3
    }
 80050b2:	bf00      	nop
 80050b4:	f002 fed8 	bl	8007e68 <__errno>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e000      	b.n	80050c2 <Object_new+0xb6>
error:
 80050c0:	bf00      	nop
  return NULL;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd90      	pop	{r4, r7, pc}
 80050cc:	20012e18 	.word	0x20012e18
 80050d0:	20000014 	.word	0x20000014
 80050d4:	08009e04 	.word	0x08009e04
 80050d8:	08009e0c 	.word	0x08009e0c
 80050dc:	08009e24 	.word	0x08009e24

080050e0 <Number_new>:
  printf("#<Object %p @cell=%p, @children=%i>\n", self, self->gc.cell, Tm_DArray_count(self->children));
}

Object*
Number_new(TmHeap *heap, double num)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	ed87 0b00 	vstr	d0, [r7]
  Object* obj = Object_new(heap, NumberType);
 80050ec:	2100      	movs	r1, #0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff8c 	bl	800500c <Object_new>
 80050f4:	6178      	str	r0, [r7, #20]
  obj->data.as_num = num;
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return obj;
 8005100:	697b      	ldr	r3, [r7, #20]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <String_new>:

Object*
String_new(TmHeap *heap, char* value)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  Object* obj = Object_new(heap, StringType);
 8005114:	2102      	movs	r1, #2
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff ff78 	bl	800500c <Object_new>
 800511c:	60f8      	str	r0, [r7, #12]
  obj->data.as_str = strdup(value);
 800511e:	6838      	ldr	r0, [r7, #0]
 8005120:	f003 faf0 	bl	8008704 <strdup>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
  return obj;
 800512c:	68fb      	ldr	r3, [r7, #12]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <Vector_new>:

Object*
Vector_new(TmHeap *heap, int vector_size)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  Object* obj = Object_new(heap, VectorType);
 8005140:	2103      	movs	r1, #3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff62 	bl	800500c <Object_new>
 8005148:	60f8      	str	r0, [r7, #12]
  Tm_DArray *array = Tm_DArray_create(sizeof(Object*), vector_size);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	2004      	movs	r0, #4
 8005150:	f7fe f93a 	bl	80033c8 <Tm_DArray_create>
 8005154:	60b8      	str	r0, [r7, #8]
  obj->data.as_data = array;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  obj->children = array;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	615a      	str	r2, [r3, #20]

  return obj;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <Map_new>:

Object*
Map_new(TmHeap *heap)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  Object* obj = Object_new(heap, MapType);
 8005174:	2104      	movs	r1, #4
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ff48 	bl	800500c <Object_new>
 800517c:	60f8      	str	r0, [r7, #12]
  obj->data.as_data = Hashmap_create(NULL, NULL);
 800517e:	2100      	movs	r1, #0
 8005180:	2000      	movs	r0, #0
 8005182:	f7ff fd99 	bl	8004cb8 <Hashmap_create>
 8005186:	4602      	mov	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]

  return obj;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <Object_relate>:

void
Object_relate(Object* parent, Object* child)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  if (!parent->children)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <Object_relate+0x20>
	  parent->children = Tm_DArray_create(sizeof(Object*), 10);
 80051a8:	210a      	movs	r1, #10
 80051aa:	2004      	movs	r0, #4
 80051ac:	f7fe f90c 	bl	80033c8 <Tm_DArray_create>
 80051b0:	4602      	mov	r2, r0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	615a      	str	r2, [r3, #20]

  Tm_DArray_push(parent->children, child);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe faf5 	bl	80037ac <Tm_DArray_push>
  child->parent = parent;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	611a      	str	r2, [r3, #16]
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <Object_make_root>:

void
Object_make_root(Object *self, State *state)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  Tm_DArray_push(state->rootset, self);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fae3 	bl	80037ac <Tm_DArray_push>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <Object_unrelate>:

void Object_unrelate(Object* parent, Object* child) {
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]

	if (child->parent != parent) return;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d14f      	bne.n	80052a2 <Object_unrelate+0xb4>

	int child_i = -1;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	617b      	str	r3, [r7, #20]
	for (int i= 0; i < Tm_DArray_end(parent->children); ++i) {
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	e014      	b.n	8005238 <Object_unrelate+0x4a>
		if ((parent->children->contents[i]) == child) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d107      	bne.n	8005232 <Object_unrelate+0x44>
			child_i = i;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	617b      	str	r3, [r7, #20]
			--(parent->children->end);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	3a01      	subs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]
			break;
 8005230:	e00e      	b.n	8005250 <Object_unrelate+0x62>
	for (int i= 0; i < Tm_DArray_end(parent->children); ++i) {
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3301      	adds	r3, #1
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <Object_unrelate+0x5a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	e000      	b.n	800524a <Object_unrelate+0x5c>
 8005248:	2300      	movs	r3, #0
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4293      	cmp	r3, r2
 800524e:	dcde      	bgt.n	800520e <Object_unrelate+0x20>
		}
	}

	if (child_i == -1) return;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d026      	beq.n	80052a6 <Object_unrelate+0xb8>

	for (int i = child_i; i < Tm_DArray_end(parent->children); ++i)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e011      	b.n	8005282 <Object_unrelate+0x94>
		parent->children->contents[i] = parent->children->contents[i+1];
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	601a      	str	r2, [r3, #0]
	for (int i = child_i; i < Tm_DArray_end(parent->children); ++i)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <Object_unrelate+0xa4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	e000      	b.n	8005294 <Object_unrelate+0xa6>
 8005292:	2300      	movs	r3, #0
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4293      	cmp	r3, r2
 8005298:	dce1      	bgt.n	800525e <Object_unrelate+0x70>

	child->parent = NULL;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	611a      	str	r2, [r3, #16]
 80052a0:	e002      	b.n	80052a8 <Object_unrelate+0xba>
	if (child->parent != parent) return;
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <Object_unrelate+0xba>
	if (child_i == -1) return;
 80052a6:	bf00      	nop
}
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <Object_destroy>:

void
Object_destroy(Object *self)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  if (self->parent)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <Object_destroy+0x1c>
	Object_unrelate(self->parent, self);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff90 	bl	80051ee <Object_unrelate>

  if (self->children) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01c      	beq.n	8005310 <Object_destroy+0x5e>
	  for (int i = 0; i < Tm_DArray_end(self->children); ++i) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e00d      	b.n	80052f8 <Object_destroy+0x46>
		  Object *child = self->children->contents[i];
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]
		  child->parent = NULL;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	611a      	str	r2, [r3, #16]
	  for (int i = 0; i < Tm_DArray_end(self->children); ++i) {
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <Object_destroy+0x56>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	e000      	b.n	800530a <Object_destroy+0x58>
 8005308:	2300      	movs	r3, #0
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4293      	cmp	r3, r2
 800530e:	dce5      	bgt.n	80052dc <Object_destroy+0x2a>
	  }
  }
  Tm_DArray_destroy(self->children);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fa32 	bl	800377e <Tm_DArray_destroy>

  if (self && self->type == StringType) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00c      	beq.n	800533a <Object_destroy+0x88>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	791b      	ldrb	r3, [r3, #4]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d108      	bne.n	800533a <Object_destroy+0x88>
	  if (self->data.as_str)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <Object_destroy+0x88>
		  free(self->data.as_str);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f002 fdef 	bl	8007f18 <free>
  }
  free(self);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f002 fdec 	bl	8007f18 <free>
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <Object_delete_root>:

void
Object_delete_root(Object *self, State *state) {
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]

	int root_i = -1;
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < Tm_DArray_end(state->rootset); ++i) {
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	e014      	b.n	8005388 <Object_delete_root+0x40>
		if ((state->rootset->contents[i]) == self) {
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d107      	bne.n	8005382 <Object_delete_root+0x3a>
			root_i = i;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	617b      	str	r3, [r7, #20]
			--(state->rootset->end);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	3a01      	subs	r2, #1
 800537e:	601a      	str	r2, [r3, #0]
			break;
 8005380:	e00e      	b.n	80053a0 <Object_delete_root+0x58>
	for(int i = 0; i < Tm_DArray_end(state->rootset); ++i) {
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3301      	adds	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <Object_delete_root+0x50>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	e000      	b.n	800539a <Object_delete_root+0x52>
 8005398:	2300      	movs	r3, #0
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4293      	cmp	r3, r2
 800539e:	dcde      	bgt.n	800535e <Object_delete_root+0x16>
		}
	}

	if (root_i == -1) return;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d021      	beq.n	80053ec <Object_delete_root+0xa4>

	for (int i = root_i; i < Tm_DArray_end(state->rootset); ++i)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e011      	b.n	80053d2 <Object_delete_root+0x8a>
		state->rootset->contents[i] = state->rootset->contents[i+1];
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	6919      	ldr	r1, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	601a      	str	r2, [r3, #0]
	for (int i = root_i; i < Tm_DArray_end(state->rootset); ++i)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <Object_delete_root+0x9a>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	e000      	b.n	80053e4 <Object_delete_root+0x9c>
 80053e2:	2300      	movs	r3, #0
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4293      	cmp	r3, r2
 80053e8:	dce1      	bgt.n	80053ae <Object_delete_root+0x66>
 80053ea:	e000      	b.n	80053ee <Object_delete_root+0xa6>
	if (root_i == -1) return;
 80053ec:	bf00      	nop
}
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xQueueGenericReset+0x2a>
        __asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	60bb      	str	r3, [r7, #8]
    }
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005422:	f002 f9f9 	bl	8007818 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	441a      	add	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	3b01      	subs	r3, #1
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	; 0xff
 800546e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d114      	bne.n	80054a2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01a      	beq.n	80054b6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3310      	adds	r3, #16
 8005484:	4618      	mov	r0, r3
 8005486:	f001 f9a3 	bl	80067d0 <xTaskRemoveFromEventList>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d012      	beq.n	80054b6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <xQueueGenericReset+0xcc>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	e009      	b.n	80054b6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3310      	adds	r3, #16
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fcfc 	bl	8004ea4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fcf7 	bl	8004ea4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80054b6:	f002 f9df 	bl	8007878 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80054ba:	2301      	movs	r3, #1
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	; 0x30
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	61bb      	str	r3, [r7, #24]
    }
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <xQueueGenericCreate+0x48>
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	429a      	cmp	r2, r3
 800550e:	d101      	bne.n	8005514 <xQueueGenericCreate+0x4c>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <xQueueGenericCreate+0x4e>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <xQueueGenericCreate+0x68>
        __asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	617b      	str	r3, [r7, #20]
    }
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005536:	d90a      	bls.n	800554e <xQueueGenericCreate+0x86>
        __asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	613b      	str	r3, [r7, #16]
    }
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	3350      	adds	r3, #80	; 0x50
 8005552:	4618      	mov	r0, r3
 8005554:	f002 fa82 	bl	8007a5c <pvPortMalloc>
 8005558:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3350      	adds	r3, #80	; 0x50
 8005568:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800556a:	79fa      	ldrb	r2, [r7, #7]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f805 	bl	8005586 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800557c:	6a3b      	ldr	r3, [r7, #32]
    }
 800557e:	4618      	mov	r0, r3
 8005580:	3728      	adds	r7, #40	; 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e002      	b.n	80055a8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055b4:	2101      	movs	r1, #1
 80055b6:	69b8      	ldr	r0, [r7, #24]
 80055b8:	f7ff ff1e 	bl	80053f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055ec:	2300      	movs	r3, #0
 80055ee:	2200      	movs	r2, #0
 80055f0:	2100      	movs	r1, #0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f81c 	bl	8005630 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800560a:	2301      	movs	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	461a      	mov	r2, r3
 8005616:	6939      	ldr	r1, [r7, #16]
 8005618:	6978      	ldr	r0, [r7, #20]
 800561a:	f7ff ff55 	bl	80054c8 <xQueueGenericCreate>
 800561e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ffd3 	bl	80055cc <prvInitialiseMutex>

        return xNewQueue;
 8005626:	68fb      	ldr	r3, [r7, #12]
    }
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08e      	sub	sp, #56	; 0x38
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800563e:	2300      	movs	r3, #0
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueGenericSend+0x32>
        __asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <xQueueGenericSend+0x40>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <xQueueGenericSend+0x44>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <xQueueGenericSend+0x46>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xQueueGenericSend+0x60>
        __asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d103      	bne.n	800569e <xQueueGenericSend+0x6e>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <xQueueGenericSend+0x72>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueGenericSend+0x74>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueGenericSend+0x8e>
        __asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	623b      	str	r3, [r7, #32]
    }
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056be:	f001 fa23 	bl	8006b08 <xTaskGetSchedulerState>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <xQueueGenericSend+0x9e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <xQueueGenericSend+0xa2>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueGenericSend+0xa4>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericSend+0xbe>
        __asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61fb      	str	r3, [r7, #28]
    }
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80056ee:	f002 f893 	bl	8007818 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <xQueueGenericSend+0xd4>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d129      	bne.n	8005758 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 fb3d 	bl	8005d88 <prvCopyDataToQueue>
 800570e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f857 	bl	80067d0 <xTaskRemoveFromEventList>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005728:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <xQueueGenericSend+0x1f8>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	e00a      	b.n	8005750 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005740:	4b39      	ldr	r3, [pc, #228]	; (8005828 <xQueueGenericSend+0x1f8>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005750:	f002 f892 	bl	8007878 <vPortExitCritical>
                return pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	e063      	b.n	8005820 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800575e:	f002 f88b 	bl	8007878 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005762:	2300      	movs	r3, #0
 8005764:	e05c      	b.n	8005820 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800576c:	f107 0314 	add.w	r3, r7, #20
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f88f 	bl	8006894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800577a:	f002 f87d 	bl	8007878 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800577e:	f000 fe09 	bl	8006394 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005782:	f002 f849 	bl	8007818 <vPortEnterCritical>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <xQueueGenericSend+0x16c>
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d103      	bne.n	80057b2 <xQueueGenericSend+0x182>
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b2:	f002 f861 	bl	8007878 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b6:	1d3a      	adds	r2, r7, #4
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f87e 	bl	80068c0 <xTaskCheckForTimeOut>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d124      	bne.n	8005814 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057cc:	f000 fbd4 	bl	8005f78 <prvIsQueueFull>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	3310      	adds	r3, #16
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 ffa6 	bl	8006730 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80057e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e6:	f000 fb5f 	bl	8005ea8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80057ea:	f000 fde1 	bl	80063b0 <xTaskResumeAll>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f47f af7c 	bne.w	80056ee <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <xQueueGenericSend+0x1f8>)
 80057f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	e772      	b.n	80056ee <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580a:	f000 fb4d 	bl	8005ea8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800580e:	f000 fdcf 	bl	80063b0 <xTaskResumeAll>
 8005812:	e76c      	b.n	80056ee <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005816:	f000 fb47 	bl	8005ea8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800581a:	f000 fdc9 	bl	80063b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800581e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005820:	4618      	mov	r0, r3
 8005822:	3738      	adds	r7, #56	; 0x38
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b090      	sub	sp, #64	; 0x40
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <xQueueGenericSendFromISR+0x3c>
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <xQueueGenericSendFromISR+0x40>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <xQueueGenericSendFromISR+0x42>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d103      	bne.n	8005896 <xQueueGenericSendFromISR+0x6a>
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <xQueueGenericSendFromISR+0x6e>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <xQueueGenericSendFromISR+0x70>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
    }
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058b6:	f002 f891 	bl	80079dc <vPortValidateInterruptPriority>
        __asm volatile
 80058ba:	f3ef 8211 	mrs	r2, BASEPRI
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	61fa      	str	r2, [r7, #28]
 80058d0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80058d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <xQueueGenericSendFromISR+0xbc>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d13e      	bne.n	8005966 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058fe:	f000 fa43 	bl	8005d88 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005902:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d112      	bne.n	8005932 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d025      	beq.n	8005960 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff59 	bl	80067d0 <xTaskRemoveFromEventList>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01d      	beq.n	8005960 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01a      	beq.n	8005960 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e016      	b.n	8005960 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005936:	2b7f      	cmp	r3, #127	; 0x7f
 8005938:	d10a      	bne.n	8005950 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	617b      	str	r3, [r7, #20]
    }
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005954:	3301      	adds	r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	b25a      	sxtb	r2, r3
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005960:	2301      	movs	r3, #1
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005964:	e001      	b.n	800596a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005966:	2300      	movs	r3, #0
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f383 8811 	msr	BASEPRI, r3
    }
 8005974:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005978:	4618      	mov	r0, r3
 800597a:	3740      	adds	r7, #64	; 0x40
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08c      	sub	sp, #48	; 0x30
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <xQueueReceive+0x30>
        __asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	623b      	str	r3, [r7, #32]
    }
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <xQueueReceive+0x3e>
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <xQueueReceive+0x42>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <xQueueReceive+0x44>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueReceive+0x5e>
        __asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	61fb      	str	r3, [r7, #28]
    }
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059de:	f001 f893 	bl	8006b08 <xTaskGetSchedulerState>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <xQueueReceive+0x6e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <xQueueReceive+0x72>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueReceive+0x74>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueReceive+0x8e>
        __asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	61bb      	str	r3, [r7, #24]
    }
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005a0e:	f001 ff03 	bl	8007818 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01f      	beq.n	8005a5e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a22:	f000 fa1b 	bl	8005e5c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00f      	beq.n	8005a56 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	3310      	adds	r3, #16
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fec8 	bl	80067d0 <xTaskRemoveFromEventList>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005a46:	4b3d      	ldr	r3, [pc, #244]	; (8005b3c <xQueueReceive+0x1bc>)
 8005a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005a56:	f001 ff0f 	bl	8007878 <vPortExitCritical>
                return pdPASS;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e069      	b.n	8005b32 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005a64:	f001 ff08 	bl	8007878 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e062      	b.n	8005b32 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005a72:	f107 0310 	add.w	r3, r7, #16
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 ff0c 	bl	8006894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005a80:	f001 fefa 	bl	8007878 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005a84:	f000 fc86 	bl	8006394 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005a88:	f001 fec6 	bl	8007818 <vPortEnterCritical>
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a92:	b25b      	sxtb	r3, r3
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d103      	bne.n	8005aa2 <xQueueReceive+0x122>
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d103      	bne.n	8005ab8 <xQueueReceive+0x138>
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab8:	f001 fede 	bl	8007878 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005abc:	1d3a      	adds	r2, r7, #4
 8005abe:	f107 0310 	add.w	r3, r7, #16
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fefb 	bl	80068c0 <xTaskCheckForTimeOut>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d123      	bne.n	8005b18 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f000 fa3b 	bl	8005f4c <prvIsQueueEmpty>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d017      	beq.n	8005b0c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fe23 	bl	8006730 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aec:	f000 f9dc 	bl	8005ea8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005af0:	f000 fc5e 	bl	80063b0 <xTaskResumeAll>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d189      	bne.n	8005a0e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <xQueueReceive+0x1bc>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	e780      	b.n	8005a0e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 f9cb 	bl	8005ea8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005b12:	f000 fc4d 	bl	80063b0 <xTaskResumeAll>
 8005b16:	e77a      	b.n	8005a0e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1a:	f000 f9c5 	bl	8005ea8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005b1e:	f000 fc47 	bl	80063b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b24:	f000 fa12 	bl	8005f4c <prvIsQueueEmpty>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f43f af6f 	beq.w	8005a0e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005b30:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3730      	adds	r7, #48	; 0x30
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	; 0x38
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	623b      	str	r3, [r7, #32]
    }
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	61fb      	str	r3, [r7, #28]
    }
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b90:	f000 ffba 	bl	8006b08 <xTaskGetSchedulerState>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <xQueueSemaphoreTake+0x60>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <xQueueSemaphoreTake+0x64>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <xQueueSemaphoreTake+0x66>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61bb      	str	r3, [r7, #24]
    }
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005bc0:	f001 fe2a 	bl	8007818 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d024      	beq.n	8005c1a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005be0:	f001 f92e 	bl	8006e40 <pvTaskIncrementMutexHeldCount>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00f      	beq.n	8005c12 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	3310      	adds	r3, #16
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fdea 	bl	80067d0 <xTaskRemoveFromEventList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005c02:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <xQueueSemaphoreTake+0x214>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005c12:	f001 fe31 	bl	8007878 <vPortExitCritical>
                return pdPASS;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e097      	b.n	8005d4a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d111      	bne.n	8005c44 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	617b      	str	r3, [r7, #20]
    }
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005c3c:	f001 fe1c 	bl	8007878 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e082      	b.n	8005d4a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fe20 	bl	8006894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005c58:	f001 fe0e 	bl	8007878 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005c5c:	f000 fb9a 	bl	8006394 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005c60:	f001 fdda 	bl	8007818 <vPortEnterCritical>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d103      	bne.n	8005c7a <xQueueSemaphoreTake+0x13a>
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d103      	bne.n	8005c90 <xQueueSemaphoreTake+0x150>
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c90:	f001 fdf2 	bl	8007878 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c94:	463a      	mov	r2, r7
 8005c96:	f107 030c 	add.w	r3, r7, #12
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fe0f 	bl	80068c0 <xTaskCheckForTimeOut>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d132      	bne.n	8005d0e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005caa:	f000 f94f 	bl	8005f4c <prvIsQueueEmpty>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d026      	beq.n	8005d02 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8005cbc:	f001 fdac 	bl	8007818 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 ff3d 	bl	8006b44 <xTaskPriorityInherit>
 8005cca:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8005ccc:	f001 fdd4 	bl	8007878 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	3324      	adds	r3, #36	; 0x24
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fd29 	bl	8006730 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce0:	f000 f8e2 	bl	8005ea8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005ce4:	f000 fb64 	bl	80063b0 <xTaskResumeAll>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f47f af68 	bne.w	8005bc0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8005cf0:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <xQueueSemaphoreTake+0x214>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	e75e      	b.n	8005bc0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d04:	f000 f8d0 	bl	8005ea8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005d08:	f000 fb52 	bl	80063b0 <xTaskResumeAll>
 8005d0c:	e758      	b.n	8005bc0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8005d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d10:	f000 f8ca 	bl	8005ea8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005d14:	f000 fb4c 	bl	80063b0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d1a:	f000 f917 	bl	8005f4c <prvIsQueueEmpty>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f43f af4d 	beq.w	8005bc0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8005d2c:	f001 fd74 	bl	8007818 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d32:	f000 f811 	bl	8005d58 <prvGetDisinheritPriorityAfterTimeout>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fff0 	bl	8006d24 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8005d44:	f001 fd98 	bl	8007878 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005d48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3738      	adds	r7, #56	; 0x38
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d006      	beq.n	8005d76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1c3 0305 	rsb	r3, r3, #5
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e001      	b.n	8005d7a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
    }
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10d      	bne.n	8005dc2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d14d      	bne.n	8005e4a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 ff3c 	bl	8006c30 <xTaskPriorityDisinherit>
 8005db8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	e043      	b.n	8005e4a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d119      	bne.n	8005dfc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6858      	ldr	r0, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	f002 f8a8 	bl	8007f28 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	441a      	add	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d32b      	bcc.n	8005e4a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	e026      	b.n	8005e4a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68d8      	ldr	r0, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	461a      	mov	r2, r3
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	f002 f88e 	bl	8007f28 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	425b      	negs	r3, r3
 8005e16:	441a      	add	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d207      	bcs.n	8005e38 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	425b      	negs	r3, r3
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d105      	bne.n	8005e4a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005e52:	697b      	ldr	r3, [r7, #20]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	441a      	add	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d303      	bcc.n	8005e90 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68d9      	ldr	r1, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6838      	ldr	r0, [r7, #0]
 8005e9c:	f002 f844 	bl	8007f28 <memcpy>
    }
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005eb0:	f001 fcb2 	bl	8007818 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ebc:	e011      	b.n	8005ee2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d012      	beq.n	8005eec <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3324      	adds	r3, #36	; 0x24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fc80 	bl	80067d0 <xTaskRemoveFromEventList>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005ed6:	f000 fd59 	bl	800698c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dce9      	bgt.n	8005ebe <prvUnlockQueue+0x16>
 8005eea:	e000      	b.n	8005eee <prvUnlockQueue+0x46>
                        break;
 8005eec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	22ff      	movs	r2, #255	; 0xff
 8005ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005ef6:	f001 fcbf 	bl	8007878 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005efa:	f001 fc8d 	bl	8007818 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f04:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f06:	e011      	b.n	8005f2c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d012      	beq.n	8005f36 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3310      	adds	r3, #16
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fc5b 	bl	80067d0 <xTaskRemoveFromEventList>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005f20:	f000 fd34 	bl	800698c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	dce9      	bgt.n	8005f08 <prvUnlockQueue+0x60>
 8005f34:	e000      	b.n	8005f38 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005f36:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	22ff      	movs	r2, #255	; 0xff
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005f40:	f001 fc9a 	bl	8007878 <vPortExitCritical>
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005f54:	f001 fc60 	bl	8007818 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e001      	b.n	8005f6a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005f6a:	f001 fc85 	bl	8007878 <vPortExitCritical>

    return xReturn;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005f80:	f001 fc4a 	bl	8007818 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d102      	bne.n	8005f96 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e001      	b.n	8005f9a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005f9a:	f001 fc6d 	bl	8007878 <vPortExitCritical>

    return xReturn;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e014      	b.n	8005fe2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <vQueueAddToRegistry+0x50>)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fc4:	490c      	ldr	r1, [pc, #48]	; (8005ff8 <vQueueAddToRegistry+0x50>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <vQueueAddToRegistry+0x50>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005fda:	e006      	b.n	8005fea <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b07      	cmp	r3, #7
 8005fe6:	d9e7      	bls.n	8005fb8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20012eb4 	.word	0x20012eb4

08005ffc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800600c:	f001 fc04 	bl	8007818 <vPortEnterCritical>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006016:	b25b      	sxtb	r3, r3
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d103      	bne.n	8006026 <vQueueWaitForMessageRestricted+0x2a>
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800602c:	b25b      	sxtb	r3, r3
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d103      	bne.n	800603c <vQueueWaitForMessageRestricted+0x40>
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800603c:	f001 fc1c 	bl	8007878 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	3324      	adds	r3, #36	; 0x24
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fb91 	bl	8006778 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006056:	6978      	ldr	r0, [r7, #20]
 8006058:	f7ff ff26 	bl	8005ea8 <prvUnlockQueue>
    }
 800605c:	bf00      	nop
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006064:	b580      	push	{r7, lr}
 8006066:	b08c      	sub	sp, #48	; 0x30
 8006068:	af04      	add	r7, sp, #16
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4618      	mov	r0, r3
 800607a:	f001 fcef 	bl	8007a5c <pvPortMalloc>
 800607e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00e      	beq.n	80060a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006086:	2058      	movs	r0, #88	; 0x58
 8006088:	f001 fce8 	bl	8007a5c <pvPortMalloc>
 800608c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
 800609a:	e005      	b.n	80060a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800609c:	6978      	ldr	r0, [r7, #20]
 800609e:	f001 fdbd 	bl	8007c1c <vPortFree>
 80060a2:	e001      	b.n	80060a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9303      	str	r3, [sp, #12]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	9302      	str	r3, [sp, #8]
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f80e 	bl	80060e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80060ca:	69f8      	ldr	r0, [r7, #28]
 80060cc:	f000 f8a2 	bl	8006214 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80060d0:	2301      	movs	r3, #1
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	e002      	b.n	80060dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80060dc:	69bb      	ldr	r3, [r7, #24]
    }
 80060de:	4618      	mov	r0, r3
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b088      	sub	sp, #32
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	461a      	mov	r2, r3
 80060fe:	21a5      	movs	r1, #165	; 0xa5
 8006100:	f001 ff20 	bl	8007f44 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800610e:	3b01      	subs	r3, #1
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f023 0307 	bic.w	r3, r3, #7
 800611c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <prvInitialiseNewTask+0x58>
        __asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	617b      	str	r3, [r7, #20]
    }
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01f      	beq.n	8006184 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e012      	b.n	8006170 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	7819      	ldrb	r1, [r3, #0]
 8006152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	3334      	adds	r3, #52	; 0x34
 800615a:	460a      	mov	r2, r1
 800615c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b09      	cmp	r3, #9
 8006174:	d9e9      	bls.n	800614a <prvInitialiseNewTask+0x64>
 8006176:	e000      	b.n	800617a <prvInitialiseNewTask+0x94>
            {
                break;
 8006178:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006182:	e003      	b.n	800618c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b04      	cmp	r3, #4
 8006190:	d901      	bls.n	8006196 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006192:	2304      	movs	r3, #4
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fe99 	bl	8004ee4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fe94 	bl	8004ee4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	f1c3 0205 	rsb	r2, r3, #5
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	3350      	adds	r3, #80	; 0x50
 80061d6:	2204      	movs	r2, #4
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 feb2 	bl	8007f44 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	3354      	adds	r3, #84	; 0x54
 80061e4:	2201      	movs	r2, #1
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 feab 	bl	8007f44 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	69b8      	ldr	r0, [r7, #24]
 80061f4:	f001 f9de 	bl	80075b4 <pxPortInitialiseStack>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006208:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800620a:	bf00      	nop
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800621c:	f001 fafc 	bl	8007818 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006220:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <prvAddNewTaskToReadyList+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a2b      	ldr	r2, [pc, #172]	; (80062d4 <prvAddNewTaskToReadyList+0xc0>)
 8006228:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800622a:	4b2b      	ldr	r3, [pc, #172]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006232:	4a29      	ldr	r2, [pc, #164]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006238:	4b26      	ldr	r3, [pc, #152]	; (80062d4 <prvAddNewTaskToReadyList+0xc0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d110      	bne.n	8006262 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006240:	f000 fbc8 	bl	80069d4 <prvInitialiseTaskLists>
 8006244:	e00d      	b.n	8006262 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006246:	4b25      	ldr	r3, [pc, #148]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	429a      	cmp	r2, r3
 800625a:	d802      	bhi.n	8006262 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800625c:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006262:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 800626a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800626c:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <prvAddNewTaskToReadyList+0xcc>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	2201      	movs	r2, #1
 800627a:	409a      	lsls	r2, r3
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4313      	orrs	r3, r2
 8006282:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <prvAddNewTaskToReadyList+0xd0>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <prvAddNewTaskToReadyList+0xd4>)
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f7fe fe2e 	bl	8004efe <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80062a2:	f001 fae9 	bl	8007878 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80062a6:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <prvAddNewTaskToReadyList+0xc8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <prvAddNewTaskToReadyList+0xc4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d207      	bcs.n	80062cc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <prvAddNewTaskToReadyList+0xd8>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	2000017c 	.word	0x2000017c
 80062d8:	200000a4 	.word	0x200000a4
 80062dc:	20000188 	.word	0x20000188
 80062e0:	20000198 	.word	0x20000198
 80062e4:	20000184 	.word	0x20000184
 80062e8:	200000a8 	.word	0x200000a8
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80062f6:	4b20      	ldr	r3, [pc, #128]	; (8006378 <vTaskStartScheduler+0x88>)
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	2300      	movs	r3, #0
 8006300:	2282      	movs	r2, #130	; 0x82
 8006302:	491e      	ldr	r1, [pc, #120]	; (800637c <vTaskStartScheduler+0x8c>)
 8006304:	481e      	ldr	r0, [pc, #120]	; (8006380 <vTaskStartScheduler+0x90>)
 8006306:	f7ff fead 	bl	8006064 <xTaskCreate>
 800630a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d102      	bne.n	8006318 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006312:	f000 fe0f 	bl	8006f34 <xTimerCreateTimerTask>
 8006316:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d116      	bne.n	800634c <vTaskStartScheduler+0x5c>
        __asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60bb      	str	r3, [r7, #8]
    }
 8006330:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <vTaskStartScheduler+0x94>)
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800633a:	4b13      	ldr	r3, [pc, #76]	; (8006388 <vTaskStartScheduler+0x98>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <vTaskStartScheduler+0x9c>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006346:	f001 f9c5 	bl	80076d4 <xPortStartScheduler>
 800634a:	e00e      	b.n	800636a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d10a      	bne.n	800636a <vTaskStartScheduler+0x7a>
        __asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	607b      	str	r3, [r7, #4]
    }
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <vTaskStartScheduler+0xa0>)
 800636c:	681b      	ldr	r3, [r3, #0]
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200001a0 	.word	0x200001a0
 800637c:	08009e84 	.word	0x08009e84
 8006380:	080069a5 	.word	0x080069a5
 8006384:	2000019c 	.word	0x2000019c
 8006388:	20000188 	.word	0x20000188
 800638c:	20000180 	.word	0x20000180
 8006390:	2000000c 	.word	0x2000000c

08006394 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <vTaskSuspendAll+0x18>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a03      	ldr	r2, [pc, #12]	; (80063ac <vTaskSuspendAll+0x18>)
 80063a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	200001a4 	.word	0x200001a4

080063b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80063be:	4b41      	ldr	r3, [pc, #260]	; (80064c4 <xTaskResumeAll+0x114>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xTaskResumeAll+0x2c>
        __asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	603b      	str	r3, [r7, #0]
    }
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80063dc:	f001 fa1c 	bl	8007818 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80063e0:	4b38      	ldr	r3, [pc, #224]	; (80064c4 <xTaskResumeAll+0x114>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4a37      	ldr	r2, [pc, #220]	; (80064c4 <xTaskResumeAll+0x114>)
 80063e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b36      	ldr	r3, [pc, #216]	; (80064c4 <xTaskResumeAll+0x114>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d161      	bne.n	80064b6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063f2:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <xTaskResumeAll+0x118>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d05d      	beq.n	80064b6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063fa:	e02e      	b.n	800645a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fc:	4b33      	ldr	r3, [pc, #204]	; (80064cc <xTaskResumeAll+0x11c>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3318      	adds	r3, #24
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fdd5 	bl	8004fb8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fdd0 	bl	8004fb8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	2201      	movs	r2, #1
 800641e:	409a      	lsls	r2, r3
 8006420:	4b2b      	ldr	r3, [pc, #172]	; (80064d0 <xTaskResumeAll+0x120>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4313      	orrs	r3, r2
 8006426:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <xTaskResumeAll+0x120>)
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <xTaskResumeAll+0x124>)
 8006438:	441a      	add	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f7fe fd5c 	bl	8004efe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <xTaskResumeAll+0x128>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d302      	bcc.n	800645a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006454:	4b21      	ldr	r3, [pc, #132]	; (80064dc <xTaskResumeAll+0x12c>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645a:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <xTaskResumeAll+0x11c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1cc      	bne.n	80063fc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006468:	f000 fb32 	bl	8006ad0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800646c:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <xTaskResumeAll+0x130>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d010      	beq.n	800649a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006478:	f000 f846 	bl	8006508 <xTaskIncrementTick>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <xTaskResumeAll+0x12c>)
 8006484:	2201      	movs	r2, #1
 8006486:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3b01      	subs	r3, #1
 800648c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1f1      	bne.n	8006478 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8006494:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <xTaskResumeAll+0x130>)
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <xTaskResumeAll+0x12c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80064a6:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <xTaskResumeAll+0x134>)
 80064a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80064b6:	f001 f9df 	bl	8007878 <vPortExitCritical>

    return xAlreadyYielded;
 80064ba:	68bb      	ldr	r3, [r7, #8]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	200001a4 	.word	0x200001a4
 80064c8:	2000017c 	.word	0x2000017c
 80064cc:	2000013c 	.word	0x2000013c
 80064d0:	20000184 	.word	0x20000184
 80064d4:	200000a8 	.word	0x200000a8
 80064d8:	200000a4 	.word	0x200000a4
 80064dc:	20000190 	.word	0x20000190
 80064e0:	2000018c 	.word	0x2000018c
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <xTaskGetTickCount+0x1c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80064f4:	687b      	ldr	r3, [r7, #4]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000180 	.word	0x20000180

08006508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006512:	4b4e      	ldr	r3, [pc, #312]	; (800664c <xTaskIncrementTick+0x144>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 808e 	bne.w	8006638 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800651c:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <xTaskIncrementTick+0x148>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3301      	adds	r3, #1
 8006522:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006524:	4a4a      	ldr	r2, [pc, #296]	; (8006650 <xTaskIncrementTick+0x148>)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d120      	bne.n	8006572 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006530:	4b48      	ldr	r3, [pc, #288]	; (8006654 <xTaskIncrementTick+0x14c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <xTaskIncrementTick+0x48>
        __asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	603b      	str	r3, [r7, #0]
    }
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xTaskIncrementTick+0x46>
 8006550:	4b40      	ldr	r3, [pc, #256]	; (8006654 <xTaskIncrementTick+0x14c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	4b40      	ldr	r3, [pc, #256]	; (8006658 <xTaskIncrementTick+0x150>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3e      	ldr	r2, [pc, #248]	; (8006654 <xTaskIncrementTick+0x14c>)
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4a3e      	ldr	r2, [pc, #248]	; (8006658 <xTaskIncrementTick+0x150>)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	4b3d      	ldr	r3, [pc, #244]	; (800665c <xTaskIncrementTick+0x154>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a3c      	ldr	r2, [pc, #240]	; (800665c <xTaskIncrementTick+0x154>)
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	f000 faaf 	bl	8006ad0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006572:	4b3b      	ldr	r3, [pc, #236]	; (8006660 <xTaskIncrementTick+0x158>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	429a      	cmp	r2, r3
 800657a:	d348      	bcc.n	800660e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800657c:	4b35      	ldr	r3, [pc, #212]	; (8006654 <xTaskIncrementTick+0x14c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006586:	4b36      	ldr	r3, [pc, #216]	; (8006660 <xTaskIncrementTick+0x158>)
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	601a      	str	r2, [r3, #0]
                    break;
 800658e:	e03e      	b.n	800660e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b30      	ldr	r3, [pc, #192]	; (8006654 <xTaskIncrementTick+0x14c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d203      	bcs.n	80065b0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80065a8:	4a2d      	ldr	r2, [pc, #180]	; (8006660 <xTaskIncrementTick+0x158>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065ae:	e02e      	b.n	800660e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fcff 	bl	8004fb8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	3318      	adds	r3, #24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fcf6 	bl	8004fb8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	2201      	movs	r2, #1
 80065d2:	409a      	lsls	r2, r3
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <xTaskIncrementTick+0x15c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4313      	orrs	r3, r2
 80065da:	4a22      	ldr	r2, [pc, #136]	; (8006664 <xTaskIncrementTick+0x15c>)
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <xTaskIncrementTick+0x160>)
 80065ec:	441a      	add	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f7fe fc82 	bl	8004efe <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <xTaskIncrementTick+0x164>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	429a      	cmp	r2, r3
 8006606:	d3b9      	bcc.n	800657c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660c:	e7b6      	b.n	800657c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <xTaskIncrementTick+0x164>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	4914      	ldr	r1, [pc, #80]	; (8006668 <xTaskIncrementTick+0x160>)
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d901      	bls.n	800662a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006626:	2301      	movs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800662a:	4b11      	ldr	r3, [pc, #68]	; (8006670 <xTaskIncrementTick+0x168>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	e004      	b.n	8006642 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006638:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <xTaskIncrementTick+0x16c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3301      	adds	r3, #1
 800663e:	4a0d      	ldr	r2, [pc, #52]	; (8006674 <xTaskIncrementTick+0x16c>)
 8006640:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006642:	697b      	ldr	r3, [r7, #20]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200001a4 	.word	0x200001a4
 8006650:	20000180 	.word	0x20000180
 8006654:	20000134 	.word	0x20000134
 8006658:	20000138 	.word	0x20000138
 800665c:	20000194 	.word	0x20000194
 8006660:	2000019c 	.word	0x2000019c
 8006664:	20000184 	.word	0x20000184
 8006668:	200000a8 	.word	0x200000a8
 800666c:	200000a4 	.word	0x200000a4
 8006670:	20000190 	.word	0x20000190
 8006674:	2000018c 	.word	0x2000018c

08006678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800667e:	4b27      	ldr	r3, [pc, #156]	; (800671c <vTaskSwitchContext+0xa4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006686:	4b26      	ldr	r3, [pc, #152]	; (8006720 <vTaskSwitchContext+0xa8>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800668c:	e03f      	b.n	800670e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800668e:	4b24      	ldr	r3, [pc, #144]	; (8006720 <vTaskSwitchContext+0xa8>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006694:	4b23      	ldr	r3, [pc, #140]	; (8006724 <vTaskSwitchContext+0xac>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	fab3 f383 	clz	r3, r3
 80066a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	f1c3 031f 	rsb	r3, r3, #31
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	491f      	ldr	r1, [pc, #124]	; (8006728 <vTaskSwitchContext+0xb0>)
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
    }
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <vTaskSwitchContext+0x5a>
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4a12      	ldr	r2, [pc, #72]	; (8006728 <vTaskSwitchContext+0xb0>)
 80066e0:	4413      	add	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	605a      	str	r2, [r3, #4]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3308      	adds	r3, #8
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d104      	bne.n	8006704 <vTaskSwitchContext+0x8c>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	605a      	str	r2, [r3, #4]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	4a08      	ldr	r2, [pc, #32]	; (800672c <vTaskSwitchContext+0xb4>)
 800670c:	6013      	str	r3, [r2, #0]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	200001a4 	.word	0x200001a4
 8006720:	20000190 	.word	0x20000190
 8006724:	20000184 	.word	0x20000184
 8006728:	200000a8 	.word	0x200000a8
 800672c:	200000a4 	.word	0x200000a4

08006730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
    }
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <vTaskPlaceOnEventList+0x44>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3318      	adds	r3, #24
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fe fbf1 	bl	8004f46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006764:	2101      	movs	r1, #1
 8006766:	6838      	ldr	r0, [r7, #0]
 8006768:	f000 fb7e 	bl	8006e68 <prvAddCurrentTaskToDelayedList>
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200000a4 	.word	0x200000a4

08006778 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	617b      	str	r3, [r7, #20]
    }
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <vTaskPlaceOnEventListRestricted+0x54>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3318      	adds	r3, #24
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7fe fba8 	bl	8004efe <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	68b8      	ldr	r0, [r7, #8]
 80067be:	f000 fb53 	bl	8006e68 <prvAddCurrentTaskToDelayedList>
    }
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	200000a4 	.word	0x200000a4

080067d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
    }
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	3318      	adds	r3, #24
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fbd9 	bl	8004fb8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006806:	4b1d      	ldr	r3, [pc, #116]	; (800687c <xTaskRemoveFromEventList+0xac>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11c      	bne.n	8006848 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	3304      	adds	r3, #4
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fbd0 	bl	8004fb8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2201      	movs	r2, #1
 800681e:	409a      	lsls	r2, r3
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <xTaskRemoveFromEventList+0xb0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4313      	orrs	r3, r2
 8006826:	4a16      	ldr	r2, [pc, #88]	; (8006880 <xTaskRemoveFromEventList+0xb0>)
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a13      	ldr	r2, [pc, #76]	; (8006884 <xTaskRemoveFromEventList+0xb4>)
 8006838:	441a      	add	r2, r3
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe fb5c 	bl	8004efe <vListInsertEnd>
 8006846:	e005      	b.n	8006854 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3318      	adds	r3, #24
 800684c:	4619      	mov	r1, r3
 800684e:	480e      	ldr	r0, [pc, #56]	; (8006888 <xTaskRemoveFromEventList+0xb8>)
 8006850:	f7fe fb55 	bl	8004efe <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <xTaskRemoveFromEventList+0xbc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	429a      	cmp	r2, r3
 8006860:	d905      	bls.n	800686e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <xTaskRemoveFromEventList+0xc0>)
 8006868:	2201      	movs	r2, #1
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	e001      	b.n	8006872 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006872:	697b      	ldr	r3, [r7, #20]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200001a4 	.word	0x200001a4
 8006880:	20000184 	.word	0x20000184
 8006884:	200000a8 	.word	0x200000a8
 8006888:	2000013c 	.word	0x2000013c
 800688c:	200000a4 	.word	0x200000a4
 8006890:	20000190 	.word	0x20000190

08006894 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <vTaskInternalSetTimeOutState+0x24>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <vTaskInternalSetTimeOutState+0x28>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	605a      	str	r2, [r3, #4]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000194 	.word	0x20000194
 80068bc:	20000180 	.word	0x20000180

080068c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	613b      	str	r3, [r7, #16]
    }
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60fb      	str	r3, [r7, #12]
    }
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006902:	f000 ff89 	bl	8007818 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006906:	4b1f      	ldr	r3, [pc, #124]	; (8006984 <xTaskCheckForTimeOut+0xc4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d102      	bne.n	8006926 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e026      	b.n	8006974 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b17      	ldr	r3, [pc, #92]	; (8006988 <xTaskCheckForTimeOut+0xc8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d00a      	beq.n	8006948 <xTaskCheckForTimeOut+0x88>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	429a      	cmp	r2, r3
 800693a:	d305      	bcc.n	8006948 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e015      	b.n	8006974 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d20b      	bcs.n	800696a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	1ad2      	subs	r2, r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff ff98 	bl	8006894 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	e004      	b.n	8006974 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006970:	2301      	movs	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006974:	f000 ff80 	bl	8007878 <vPortExitCritical>

    return xReturn;
 8006978:	69fb      	ldr	r3, [r7, #28]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000180 	.word	0x20000180
 8006988:	20000194 	.word	0x20000194

0800698c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006990:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <vTaskMissedYield+0x14>)
 8006992:	2201      	movs	r2, #1
 8006994:	601a      	str	r2, [r3, #0]
}
 8006996:	bf00      	nop
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000190 	.word	0x20000190

080069a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80069ac:	f000 f852 	bl	8006a54 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <prvIdleTask+0x28>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d9f9      	bls.n	80069ac <prvIdleTask+0x8>
                {
                    taskYIELD();
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <prvIdleTask+0x2c>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80069c8:	e7f0      	b.n	80069ac <prvIdleTask+0x8>
 80069ca:	bf00      	nop
 80069cc:	200000a8 	.word	0x200000a8
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
 80069de:	e00c      	b.n	80069fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <prvInitialiseTaskLists+0x60>)
 80069ec:	4413      	add	r3, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fa58 	bl	8004ea4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3301      	adds	r3, #1
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d9ef      	bls.n	80069e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006a00:	480d      	ldr	r0, [pc, #52]	; (8006a38 <prvInitialiseTaskLists+0x64>)
 8006a02:	f7fe fa4f 	bl	8004ea4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006a06:	480d      	ldr	r0, [pc, #52]	; (8006a3c <prvInitialiseTaskLists+0x68>)
 8006a08:	f7fe fa4c 	bl	8004ea4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006a0c:	480c      	ldr	r0, [pc, #48]	; (8006a40 <prvInitialiseTaskLists+0x6c>)
 8006a0e:	f7fe fa49 	bl	8004ea4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006a12:	480c      	ldr	r0, [pc, #48]	; (8006a44 <prvInitialiseTaskLists+0x70>)
 8006a14:	f7fe fa46 	bl	8004ea4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006a18:	480b      	ldr	r0, [pc, #44]	; (8006a48 <prvInitialiseTaskLists+0x74>)
 8006a1a:	f7fe fa43 	bl	8004ea4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <prvInitialiseTaskLists+0x78>)
 8006a20:	4a05      	ldr	r2, [pc, #20]	; (8006a38 <prvInitialiseTaskLists+0x64>)
 8006a22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <prvInitialiseTaskLists+0x7c>)
 8006a26:	4a05      	ldr	r2, [pc, #20]	; (8006a3c <prvInitialiseTaskLists+0x68>)
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	200000a8 	.word	0x200000a8
 8006a38:	2000010c 	.word	0x2000010c
 8006a3c:	20000120 	.word	0x20000120
 8006a40:	2000013c 	.word	0x2000013c
 8006a44:	20000150 	.word	0x20000150
 8006a48:	20000168 	.word	0x20000168
 8006a4c:	20000134 	.word	0x20000134
 8006a50:	20000138 	.word	0x20000138

08006a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a5a:	e019      	b.n	8006a90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006a5c:	f000 fedc 	bl	8007818 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a60:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <prvCheckTasksWaitingTermination+0x50>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe faa3 	bl	8004fb8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <prvCheckTasksWaitingTermination+0x54>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <prvCheckTasksWaitingTermination+0x54>)
 8006a7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <prvCheckTasksWaitingTermination+0x58>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <prvCheckTasksWaitingTermination+0x58>)
 8006a84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006a86:	f000 fef7 	bl	8007878 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f810 	bl	8006ab0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <prvCheckTasksWaitingTermination+0x58>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e1      	bne.n	8006a5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000150 	.word	0x20000150
 8006aa8:	2000017c 	.word	0x2000017c
 8006aac:	20000164 	.word	0x20000164

08006ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f8ad 	bl	8007c1c <vPortFree>
                vPortFree( pxTCB );
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f8aa 	bl	8007c1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <prvResetNextTaskUnblockTime+0x30>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <prvResetNextTaskUnblockTime+0x34>)
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006ae6:	e005      	b.n	8006af4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <prvResetNextTaskUnblockTime+0x30>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a04      	ldr	r2, [pc, #16]	; (8006b04 <prvResetNextTaskUnblockTime+0x34>)
 8006af2:	6013      	str	r3, [r2, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20000134 	.word	0x20000134
 8006b04:	2000019c 	.word	0x2000019c

08006b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006b0e:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <xTaskGetSchedulerState+0x34>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006b16:	2301      	movs	r3, #1
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	e008      	b.n	8006b2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1c:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <xTaskGetSchedulerState+0x38>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006b24:	2302      	movs	r3, #2
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	e001      	b.n	8006b2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006b2e:	687b      	ldr	r3, [r7, #4]
    }
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20000188 	.word	0x20000188
 8006b40:	200001a4 	.word	0x200001a4

08006b44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d05e      	beq.n	8006c18 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5e:	4b31      	ldr	r3, [pc, #196]	; (8006c24 <xTaskPriorityInherit+0xe0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d24e      	bcs.n	8006c06 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	db06      	blt.n	8006b7e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b70:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <xTaskPriorityInherit+0xe0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	f1c3 0205 	rsb	r2, r3, #5
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6959      	ldr	r1, [r3, #20]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <xTaskPriorityInherit+0xe4>)
 8006b90:	4413      	add	r3, r2
 8006b92:	4299      	cmp	r1, r3
 8006b94:	d12f      	bne.n	8006bf6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fa0c 	bl	8004fb8 <uxListRemove>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	2201      	movs	r2, #1
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	43da      	mvns	r2, r3
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <xTaskPriorityInherit+0xe8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <xTaskPriorityInherit+0xe8>)
 8006bba:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bbc:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <xTaskPriorityInherit+0xe0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	2201      	movs	r2, #1
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <xTaskPriorityInherit+0xe8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <xTaskPriorityInherit+0xe8>)
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <xTaskPriorityInherit+0xe4>)
 8006be6:	441a      	add	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f7fe f985 	bl	8004efe <vListInsertEnd>
 8006bf4:	e004      	b.n	8006c00 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bf6:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <xTaskPriorityInherit+0xe0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e008      	b.n	8006c18 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c0a:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <xTaskPriorityInherit+0xe0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d201      	bcs.n	8006c18 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006c18:	68fb      	ldr	r3, [r7, #12]
    }
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	200000a4 	.word	0x200000a4
 8006c28:	200000a8 	.word	0x200000a8
 8006c2c:	20000184 	.word	0x20000184

08006c30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d063      	beq.n	8006d0e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006c46:	4b34      	ldr	r3, [pc, #208]	; (8006d18 <xTaskPriorityDisinherit+0xe8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d00a      	beq.n	8006c66 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
    }
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	60bb      	str	r3, [r7, #8]
    }
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d039      	beq.n	8006d0e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d135      	bne.n	8006d0e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe f986 	bl	8004fb8 <uxListRemove>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	43da      	mvns	r2, r3
 8006cbe:	4b17      	ldr	r3, [pc, #92]	; (8006d1c <xTaskPriorityDisinherit+0xec>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <xTaskPriorityDisinherit+0xec>)
 8006cc6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	f1c3 0205 	rsb	r2, r3, #5
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <xTaskPriorityDisinherit+0xec>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	4a0c      	ldr	r2, [pc, #48]	; (8006d1c <xTaskPriorityDisinherit+0xec>)
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <xTaskPriorityDisinherit+0xf0>)
 8006cfc:	441a      	add	r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f7fe f8fa 	bl	8004efe <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006d0e:	697b      	ldr	r3, [r7, #20]
    }
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	200000a4 	.word	0x200000a4
 8006d1c:	20000184 	.word	0x20000184
 8006d20:	200000a8 	.word	0x200000a8

08006d24 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d32:	2301      	movs	r3, #1
 8006d34:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d077      	beq.n	8006e2c <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	60fb      	str	r3, [r7, #12]
    }
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d902      	bls.n	8006d6a <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	e002      	b.n	8006d70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d058      	beq.n	8006e2c <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d153      	bne.n	8006e2c <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006d84:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10a      	bne.n	8006da4 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
    }
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	db04      	blt.n	8006dc2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f1c3 0205 	rsb	r2, r3, #5
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	6959      	ldr	r1, [r3, #20]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4a19      	ldr	r2, [pc, #100]	; (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006dd2:	4413      	add	r3, r2
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	d129      	bne.n	8006e2c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe f8eb 	bl	8004fb8 <uxListRemove>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	2201      	movs	r2, #1
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	43da      	mvns	r2, r3
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006dfc:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	2201      	movs	r2, #1
 8006e04:	409a      	lsls	r2, r3
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	4a0b      	ldr	r2, [pc, #44]	; (8006e3c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4a06      	ldr	r2, [pc, #24]	; (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006e1e:	441a      	add	r2, r3
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	f7fe f869 	bl	8004efe <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006e2c:	bf00      	nop
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200000a4 	.word	0x200000a4
 8006e38:	200000a8 	.word	0x200000a8
 8006e3c:	20000184 	.word	0x20000184

08006e40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006e44:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e52:	3201      	adds	r2, #1
 8006e54:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8006e56:	4b03      	ldr	r3, [pc, #12]	; (8006e64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e58:	681b      	ldr	r3, [r3, #0]
    }
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	200000a4 	.word	0x200000a4

08006e68 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006e72:	4b29      	ldr	r3, [pc, #164]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e78:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe f89a 	bl	8004fb8 <uxListRemove>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	2201      	movs	r2, #1
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43da      	mvns	r2, r3
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	4a20      	ldr	r2, [pc, #128]	; (8006f20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ea0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d10a      	bne.n	8006ec0 <prvAddCurrentTaskToDelayedList+0x58>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	481a      	ldr	r0, [pc, #104]	; (8006f24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006eba:	f7fe f820 	bl	8004efe <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006ebe:	e026      	b.n	8006f0e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ec8:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d209      	bcs.n	8006eec <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed8:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f7fe f82e 	bl	8004f46 <vListInsert>
}
 8006eea:	e010      	b.n	8006f0e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eec:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fe f824 	bl	8004f46 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d202      	bcs.n	8006f0e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6013      	str	r3, [r2, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000180 	.word	0x20000180
 8006f1c:	200000a4 	.word	0x200000a4
 8006f20:	20000184 	.word	0x20000184
 8006f24:	20000168 	.word	0x20000168
 8006f28:	20000138 	.word	0x20000138
 8006f2c:	20000134 	.word	0x20000134
 8006f30:	2000019c 	.word	0x2000019c

08006f34 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006f3e:	f000 fad5 	bl	80074ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <xTimerCreateTimerTask+0x54>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <xTimerCreateTimerTask+0x58>)
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	2302      	movs	r3, #2
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f58:	490d      	ldr	r1, [pc, #52]	; (8006f90 <xTimerCreateTimerTask+0x5c>)
 8006f5a:	480e      	ldr	r0, [pc, #56]	; (8006f94 <xTimerCreateTimerTask+0x60>)
 8006f5c:	f7ff f882 	bl	8006064 <xTaskCreate>
 8006f60:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	603b      	str	r3, [r7, #0]
    }
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006f7e:	687b      	ldr	r3, [r7, #4]
    }
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200001d8 	.word	0x200001d8
 8006f8c:	200001dc 	.word	0x200001dc
 8006f90:	08009e8c 	.word	0x08009e8c
 8006f94:	080070cd 	.word	0x080070cd

08006f98 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	623b      	str	r3, [r7, #32]
    }
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <xTimerGenericCommand+0x98>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d02a      	beq.n	8007024 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b05      	cmp	r3, #5
 8006fde:	dc18      	bgt.n	8007012 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fe0:	f7ff fd92 	bl	8006b08 <xTaskGetSchedulerState>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d109      	bne.n	8006ffe <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <xTimerGenericCommand+0x98>)
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	f107 0114 	add.w	r1, r7, #20
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff6:	f7fe fb1b 	bl	8005630 <xQueueGenericSend>
 8006ffa:	6278      	str	r0, [r7, #36]	; 0x24
 8006ffc:	e012      	b.n	8007024 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <xTimerGenericCommand+0x98>)
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	f107 0114 	add.w	r1, r7, #20
 8007006:	2300      	movs	r3, #0
 8007008:	2200      	movs	r2, #0
 800700a:	f7fe fb11 	bl	8005630 <xQueueGenericSend>
 800700e:	6278      	str	r0, [r7, #36]	; 0x24
 8007010:	e008      	b.n	8007024 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <xTimerGenericCommand+0x98>)
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f107 0114 	add.w	r1, r7, #20
 800701a:	2300      	movs	r3, #0
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	f7fe fc05 	bl	800582c <xQueueGenericSendFromISR>
 8007022:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007026:	4618      	mov	r0, r3
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200001d8 	.word	0x200001d8

08007034 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703e:	4b22      	ldr	r3, [pc, #136]	; (80070c8 <prvProcessExpiredTimer+0x94>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd ffb3 	bl	8004fb8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d022      	beq.n	80070a6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	18d1      	adds	r1, r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	6978      	ldr	r0, [r7, #20]
 800706e:	f000 f8d1 	bl	8007214 <prvInsertTimerInActiveList>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007078:	2300      	movs	r3, #0
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	2300      	movs	r3, #0
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	2100      	movs	r1, #0
 8007082:	6978      	ldr	r0, [r7, #20]
 8007084:	f7ff ff88 	bl	8006f98 <xTimerGenericCommand>
 8007088:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d113      	bne.n	80070b8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
    }
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	4798      	blx	r3
    }
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200001d0 	.word	0x200001d0

080070cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f857 	bl	800718c <prvGetNextExpireTime>
 80070de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f803 	bl	80070f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80070ea:	f000 f8d5 	bl	8007298 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070ee:	e7f1      	b.n	80070d4 <prvTimerTask+0x8>

080070f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80070fa:	f7ff f94b 	bl	8006394 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f866 	bl	80071d4 <prvSampleTimeNow>
 8007108:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d130      	bne.n	8007172 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <prvProcessTimerOrBlockTask+0x3c>
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	429a      	cmp	r2, r3
 800711c:	d806      	bhi.n	800712c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800711e:	f7ff f947 	bl	80063b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ff85 	bl	8007034 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800712a:	e024      	b.n	8007176 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007132:	4b13      	ldr	r3, [pc, #76]	; (8007180 <prvProcessTimerOrBlockTask+0x90>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <prvProcessTimerOrBlockTask+0x50>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <prvProcessTimerOrBlockTask+0x52>
 8007140:	2300      	movs	r3, #0
 8007142:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <prvProcessTimerOrBlockTask+0x94>)
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	f7fe ff53 	bl	8005ffc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007156:	f7ff f92b 	bl	80063b0 <xTaskResumeAll>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <prvProcessTimerOrBlockTask+0x98>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
    }
 8007170:	e001      	b.n	8007176 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007172:	f7ff f91d 	bl	80063b0 <xTaskResumeAll>
    }
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200001d4 	.word	0x200001d4
 8007184:	200001d8 	.word	0x200001d8
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <prvGetNextExpireTime+0x44>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <prvGetNextExpireTime+0x16>
 800719e:	2201      	movs	r2, #1
 80071a0:	e000      	b.n	80071a4 <prvGetNextExpireTime+0x18>
 80071a2:	2200      	movs	r2, #0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvGetNextExpireTime+0x44>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e001      	b.n	80071c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80071c0:	68fb      	ldr	r3, [r7, #12]
    }
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	200001d0 	.word	0x200001d0

080071d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80071dc:	f7ff f984 	bl	80064e8 <xTaskGetTickCount>
 80071e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <prvSampleTimeNow+0x3c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d205      	bcs.n	80071f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80071ec:	f000 f91a 	bl	8007424 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e002      	b.n	80071fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80071fe:	4a04      	ldr	r2, [pc, #16]	; (8007210 <prvSampleTimeNow+0x3c>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007204:	68fb      	ldr	r3, [r7, #12]
    }
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200001e0 	.word	0x200001e0

08007214 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d812      	bhi.n	8007260 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e01b      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <prvInsertTimerInActiveList+0x7c>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7fd fe74 	bl	8004f46 <vListInsert>
 800725e:	e012      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d206      	bcs.n	8007276 <prvInsertTimerInActiveList+0x62>
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e007      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <prvInsertTimerInActiveList+0x80>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3304      	adds	r3, #4
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f7fd fe60 	bl	8004f46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007286:	697b      	ldr	r3, [r7, #20]
    }
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	200001d4 	.word	0x200001d4
 8007294:	200001d0 	.word	0x200001d0

08007298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007298:	b580      	push	{r7, lr}
 800729a:	b08c      	sub	sp, #48	; 0x30
 800729c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800729e:	e0ae      	b.n	80073fe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f2c0 80aa 	blt.w	80073fc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	3304      	adds	r3, #4
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fd fe7d 	bl	8004fb8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ff87 	bl	80071d4 <prvSampleTimeNow>
 80072c6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	f200 8097 	bhi.w	80073fe <prvProcessReceivedCommands+0x166>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <prvProcessReceivedCommands+0x40>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	08007301 	.word	0x08007301
 80072dc:	08007301 	.word	0x08007301
 80072e0:	08007301 	.word	0x08007301
 80072e4:	08007375 	.word	0x08007375
 80072e8:	08007389 	.word	0x08007389
 80072ec:	080073d3 	.word	0x080073d3
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007301 	.word	0x08007301
 80072f8:	08007375 	.word	0x08007375
 80072fc:	08007389 	.word	0x08007389
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	18d1      	adds	r1, r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007320:	f7ff ff78 	bl	8007214 <prvInsertTimerInActiveList>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d069      	beq.n	80073fe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007330:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d05e      	beq.n	80073fe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	441a      	add	r2, r3
 8007348:	2300      	movs	r3, #0
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	2300      	movs	r3, #0
 800734e:	2100      	movs	r1, #0
 8007350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007352:	f7ff fe21 	bl	8006f98 <xTimerGenericCommand>
 8007356:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d14f      	bne.n	80073fe <prvProcessReceivedCommands+0x166>
        __asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	61bb      	str	r3, [r7, #24]
    }
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	b2da      	uxtb	r2, r3
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007386:	e03a      	b.n	80073fe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	b2da      	uxtb	r2, r3
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <prvProcessReceivedCommands+0x126>
        __asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	617b      	str	r3, [r7, #20]
    }
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	18d1      	adds	r1, r2, r3
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073cc:	f7ff ff22 	bl	8007214 <prvInsertTimerInActiveList>
                        break;
 80073d0:	e015      	b.n	80073fe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80073e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073e2:	f000 fc1b 	bl	8007c1c <vPortFree>
 80073e6:	e00a      	b.n	80073fe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80073fa:	e000      	b.n	80073fe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80073fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073fe:	4b08      	ldr	r3, [pc, #32]	; (8007420 <prvProcessReceivedCommands+0x188>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f107 0108 	add.w	r1, r7, #8
 8007406:	2200      	movs	r2, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fab9 	bl	8005980 <xQueueReceive>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	f47f af45 	bne.w	80072a0 <prvProcessReceivedCommands+0x8>
        }
    }
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	3728      	adds	r7, #40	; 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200001d8 	.word	0x200001d8

08007424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800742a:	e048      	b.n	80074be <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800742c:	4b2d      	ldr	r3, [pc, #180]	; (80074e4 <prvSwitchTimerLists+0xc0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007436:	4b2b      	ldr	r3, [pc, #172]	; (80074e4 <prvSwitchTimerLists+0xc0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fd fdb7 	bl	8004fb8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02e      	beq.n	80074be <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4413      	add	r3, r2
 8007468:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	429a      	cmp	r2, r3
 8007470:	d90e      	bls.n	8007490 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800747e:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <prvSwitchTimerLists+0xc0>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fd fd5c 	bl	8004f46 <vListInsert>
 800748e:	e016      	b.n	80074be <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007490:	2300      	movs	r3, #0
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	2100      	movs	r1, #0
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff fd7c 	bl	8006f98 <xTimerGenericCommand>
 80074a0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <prvSwitchTimerLists+0x9a>
        __asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	603b      	str	r3, [r7, #0]
    }
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <prvSwitchTimerLists+0xc0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1b1      	bne.n	800742c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <prvSwitchTimerLists+0xc0>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <prvSwitchTimerLists+0xc4>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a04      	ldr	r2, [pc, #16]	; (80074e4 <prvSwitchTimerLists+0xc0>)
 80074d4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80074d6:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <prvSwitchTimerLists+0xc4>)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6013      	str	r3, [r2, #0]
    }
 80074dc:	bf00      	nop
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200001d0 	.word	0x200001d0
 80074e8:	200001d4 	.word	0x200001d4

080074ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80074f0:	f000 f992 	bl	8007818 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80074f4:	4b12      	ldr	r3, [pc, #72]	; (8007540 <prvCheckForValidListAndQueue+0x54>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d11d      	bne.n	8007538 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80074fc:	4811      	ldr	r0, [pc, #68]	; (8007544 <prvCheckForValidListAndQueue+0x58>)
 80074fe:	f7fd fcd1 	bl	8004ea4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007502:	4811      	ldr	r0, [pc, #68]	; (8007548 <prvCheckForValidListAndQueue+0x5c>)
 8007504:	f7fd fcce 	bl	8004ea4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007508:	4b10      	ldr	r3, [pc, #64]	; (800754c <prvCheckForValidListAndQueue+0x60>)
 800750a:	4a0e      	ldr	r2, [pc, #56]	; (8007544 <prvCheckForValidListAndQueue+0x58>)
 800750c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <prvCheckForValidListAndQueue+0x64>)
 8007510:	4a0d      	ldr	r2, [pc, #52]	; (8007548 <prvCheckForValidListAndQueue+0x5c>)
 8007512:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007514:	2200      	movs	r2, #0
 8007516:	210c      	movs	r1, #12
 8007518:	200a      	movs	r0, #10
 800751a:	f7fd ffd5 	bl	80054c8 <xQueueGenericCreate>
 800751e:	4603      	mov	r3, r0
 8007520:	4a07      	ldr	r2, [pc, #28]	; (8007540 <prvCheckForValidListAndQueue+0x54>)
 8007522:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <prvCheckForValidListAndQueue+0x54>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <prvCheckForValidListAndQueue+0x54>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4908      	ldr	r1, [pc, #32]	; (8007554 <prvCheckForValidListAndQueue+0x68>)
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fd38 	bl	8005fa8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007538:	f000 f99e 	bl	8007878 <vPortExitCritical>
    }
 800753c:	bf00      	nop
 800753e:	bd80      	pop	{r7, pc}
 8007540:	200001d8 	.word	0x200001d8
 8007544:	200001a8 	.word	0x200001a8
 8007548:	200001bc 	.word	0x200001bc
 800754c:	200001d0 	.word	0x200001d0
 8007550:	200001d4 	.word	0x200001d4
 8007554:	08009e94 	.word	0x08009e94

08007558 <Vector_each>:
 *      Author: HSNL
 */
#include <treadmill/vector.h>

void Vector_each(Object* vector, Vector_iter iter)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  Tm_DArray *array = OBJ2ARY(vector);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	613b      	str	r3, [r7, #16]
  int count = Tm_DArray_count(array);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <Vector_each+0x1c>
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	e000      	b.n	8007576 <Vector_each+0x1e>
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]

  for(int i=0; i<count; i++) {
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	e010      	b.n	80075a0 <Vector_each+0x48>
    iter((Object* )Tm_DArray_at(array, i));
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d006      	beq.n	8007592 <Vector_each+0x3a>
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	e000      	b.n	8007594 <Vector_each+0x3c>
 8007592:	2300      	movs	r3, #0
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	4790      	blx	r2
  for(int i=0; i<count; i++) {
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	3301      	adds	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	dbea      	blt.n	800757e <Vector_each+0x26>
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b04      	subs	r3, #4
 80075c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3b04      	subs	r3, #4
 80075d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0201 	bic.w	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <pxPortInitialiseStack+0x64>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b14      	subs	r3, #20
 80075ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3b04      	subs	r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f06f 0202 	mvn.w	r2, #2
 8007602:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3b20      	subs	r3, #32
 8007608:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	0800761d 	.word	0x0800761d

0800761c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <prvTaskExitError+0x54>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d00a      	beq.n	8007646 <prvTaskExitError+0x2a>
        __asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
    }
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <prvTaskExitError+0x28>
        __asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	60bb      	str	r3, [r7, #8]
    }
 8007658:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800765a:	bf00      	nop
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0fc      	beq.n	800765c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000010 	.word	0x20000010
	...

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
 80076ca:	0000      	.short	0x0000
 80076cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop

080076d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076da:	4b46      	ldr	r3, [pc, #280]	; (80077f4 <xPortStartScheduler+0x120>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a46      	ldr	r2, [pc, #280]	; (80077f8 <xPortStartScheduler+0x124>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d10a      	bne.n	80076fa <xPortStartScheduler+0x26>
        __asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	613b      	str	r3, [r7, #16]
    }
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076fa:	4b3e      	ldr	r3, [pc, #248]	; (80077f4 <xPortStartScheduler+0x120>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a3f      	ldr	r2, [pc, #252]	; (80077fc <xPortStartScheduler+0x128>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d10a      	bne.n	800771a <xPortStartScheduler+0x46>
        __asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
    }
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800771a:	4b39      	ldr	r3, [pc, #228]	; (8007800 <xPortStartScheduler+0x12c>)
 800771c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800773c:	b2da      	uxtb	r2, r3
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <xPortStartScheduler+0x130>)
 8007740:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007742:	4b31      	ldr	r3, [pc, #196]	; (8007808 <xPortStartScheduler+0x134>)
 8007744:	2207      	movs	r2, #7
 8007746:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007748:	e009      	b.n	800775e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800774a:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <xPortStartScheduler+0x134>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3b01      	subs	r3, #1
 8007750:	4a2d      	ldr	r2, [pc, #180]	; (8007808 <xPortStartScheduler+0x134>)
 8007752:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d0ef      	beq.n	800774a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800776a:	4b27      	ldr	r3, [pc, #156]	; (8007808 <xPortStartScheduler+0x134>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1c3 0307 	rsb	r3, r3, #7
 8007772:	2b04      	cmp	r3, #4
 8007774:	d00a      	beq.n	800778c <xPortStartScheduler+0xb8>
        __asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60bb      	str	r3, [r7, #8]
    }
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800778c:	4b1e      	ldr	r3, [pc, #120]	; (8007808 <xPortStartScheduler+0x134>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <xPortStartScheduler+0x134>)
 8007794:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007796:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <xPortStartScheduler+0x134>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779e:	4a1a      	ldr	r2, [pc, #104]	; (8007808 <xPortStartScheduler+0x134>)
 80077a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80077aa:	4b18      	ldr	r3, [pc, #96]	; (800780c <xPortStartScheduler+0x138>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <xPortStartScheduler+0x138>)
 80077b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80077b6:	4b15      	ldr	r3, [pc, #84]	; (800780c <xPortStartScheduler+0x138>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a14      	ldr	r2, [pc, #80]	; (800780c <xPortStartScheduler+0x138>)
 80077bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80077c2:	f000 f8db 	bl	800797c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80077c6:	4b12      	ldr	r3, [pc, #72]	; (8007810 <xPortStartScheduler+0x13c>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80077cc:	f000 f8fa 	bl	80079c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077d0:	4b10      	ldr	r3, [pc, #64]	; (8007814 <xPortStartScheduler+0x140>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a0f      	ldr	r2, [pc, #60]	; (8007814 <xPortStartScheduler+0x140>)
 80077d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80077dc:	f7ff ff64 	bl	80076a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80077e0:	f7fe ff4a 	bl	8006678 <vTaskSwitchContext>
    prvTaskExitError();
 80077e4:	f7ff ff1a 	bl	800761c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	e000ed00 	.word	0xe000ed00
 80077f8:	410fc271 	.word	0x410fc271
 80077fc:	410fc270 	.word	0x410fc270
 8007800:	e000e400 	.word	0xe000e400
 8007804:	200001e4 	.word	0x200001e4
 8007808:	200001e8 	.word	0x200001e8
 800780c:	e000ed20 	.word	0xe000ed20
 8007810:	20000010 	.word	0x20000010
 8007814:	e000ef34 	.word	0xe000ef34

08007818 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
        __asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
    }
 8007830:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <vPortEnterCritical+0x58>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3301      	adds	r3, #1
 8007838:	4a0d      	ldr	r2, [pc, #52]	; (8007870 <vPortEnterCritical+0x58>)
 800783a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <vPortEnterCritical+0x58>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d10f      	bne.n	8007864 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <vPortEnterCritical+0x5c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <vPortEnterCritical+0x4c>
        __asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	603b      	str	r3, [r7, #0]
    }
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortEnterCritical+0x4a>
    }
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	20000010 	.word	0x20000010
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <vPortExitCritical+0x50>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <vPortExitCritical+0x24>
        __asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	607b      	str	r3, [r7, #4]
    }
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <vPortExitCritical+0x50>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <vPortExitCritical+0x50>)
 80078a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <vPortExitCritical+0x50>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <vPortExitCritical+0x42>
 80078ae:	2300      	movs	r3, #0
 80078b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	f383 8811 	msr	BASEPRI, r3
    }
 80078b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000010 	.word	0x20000010
 80078cc:	00000000 	.word	0x00000000

080078d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80078d0:	f3ef 8009 	mrs	r0, PSP
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <pxCurrentTCBConst>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	f01e 0f10 	tst.w	lr, #16
 80078e0:	bf08      	it	eq
 80078e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	6010      	str	r0, [r2, #0]
 80078ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078f4:	f380 8811 	msr	BASEPRI, r0
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f7fe feba 	bl	8006678 <vTaskSwitchContext>
 8007904:	f04f 0000 	mov.w	r0, #0
 8007908:	f380 8811 	msr	BASEPRI, r0
 800790c:	bc09      	pop	{r0, r3}
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	6808      	ldr	r0, [r1, #0]
 8007912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007916:	f01e 0f10 	tst.w	lr, #16
 800791a:	bf08      	it	eq
 800791c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007920:	f380 8809 	msr	PSP, r0
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst>:
 8007930:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
        __asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	607b      	str	r3, [r7, #4]
    }
 8007950:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007952:	f7fe fdd9 	bl	8006508 <xTaskIncrementTick>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <SysTick_Handler+0x40>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f383 8811 	msr	BASEPRI, r3
    }
 800796e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <vPortSetupTimerInterrupt+0x38>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortSetupTimerInterrupt+0x3c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <vPortSetupTimerInterrupt+0x40>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <vPortSetupTimerInterrupt+0x44>)
 800799a:	3b01      	subs	r3, #1
 800799c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <vPortSetupTimerInterrupt+0x34>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
}
 80079a4:	bf00      	nop
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	e000e010 	.word	0xe000e010
 80079b4:	e000e018 	.word	0xe000e018
 80079b8:	20000000 	.word	0x20000000
 80079bc:	10624dd3 	.word	0x10624dd3
 80079c0:	e000e014 	.word	0xe000e014

080079c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80079c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079d4 <vPortEnableVFP+0x10>
 80079c8:	6801      	ldr	r1, [r0, #0]
 80079ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ce:	6001      	str	r1, [r0, #0]
 80079d0:	4770      	bx	lr
 80079d2:	0000      	.short	0x0000
 80079d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80079d8:	bf00      	nop
 80079da:	bf00      	nop

080079dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80079e2:	f3ef 8305 	mrs	r3, IPSR
 80079e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b0f      	cmp	r3, #15
 80079ec:	d914      	bls.n	8007a18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ee:	4a17      	ldr	r2, [pc, #92]	; (8007a4c <vPortValidateInterruptPriority+0x70>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <vPortValidateInterruptPriority+0x74>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	7afa      	ldrb	r2, [r7, #11]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d20a      	bcs.n	8007a18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	607b      	str	r3, [r7, #4]
    }
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <vPortValidateInterruptPriority+0x78>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a20:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <vPortValidateInterruptPriority+0x7c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d90a      	bls.n	8007a3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	603b      	str	r3, [r7, #0]
    }
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <vPortValidateInterruptPriority+0x60>
    }
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	e000e3f0 	.word	0xe000e3f0
 8007a50:	200001e4 	.word	0x200001e4
 8007a54:	e000ed0c 	.word	0xe000ed0c
 8007a58:	200001e8 	.word	0x200001e8

08007a5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	; 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007a68:	f7fe fc94 	bl	8006394 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007a6c:	4b65      	ldr	r3, [pc, #404]	; (8007c04 <pvPortMalloc+0x1a8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007a74:	f000 f934 	bl	8007ce0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a78:	4b63      	ldr	r3, [pc, #396]	; (8007c08 <pvPortMalloc+0x1ac>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f040 80a7 	bne.w	8007bd4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d02d      	beq.n	8007ae8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007a8c:	2208      	movs	r2, #8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d227      	bcs.n	8007ae8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007a98:	2208      	movs	r2, #8
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d021      	beq.n	8007aee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f023 0307 	bic.w	r3, r3, #7
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d214      	bcs.n	8007ae2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <pvPortMalloc+0x92>
        __asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	617b      	str	r3, [r7, #20]
    }
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ae6:	e002      	b.n	8007aee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	e000      	b.n	8007af0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007aee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d06e      	beq.n	8007bd4 <pvPortMalloc+0x178>
 8007af6:	4b45      	ldr	r3, [pc, #276]	; (8007c0c <pvPortMalloc+0x1b0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d869      	bhi.n	8007bd4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007b00:	4b43      	ldr	r3, [pc, #268]	; (8007c10 <pvPortMalloc+0x1b4>)
 8007b02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007b04:	4b42      	ldr	r3, [pc, #264]	; (8007c10 <pvPortMalloc+0x1b4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0a:	e004      	b.n	8007b16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d903      	bls.n	8007b28 <pvPortMalloc+0xcc>
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f1      	bne.n	8007b0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007b28:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <pvPortMalloc+0x1a8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d050      	beq.n	8007bd4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2208      	movs	r2, #8
 8007b38:	4413      	add	r3, r2
 8007b3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	1ad2      	subs	r2, r2, r3
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d91f      	bls.n	8007b94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4413      	add	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <pvPortMalloc+0x120>
        __asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	613b      	str	r3, [r7, #16]
    }
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	1ad2      	subs	r2, r2, r3
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b8e:	69b8      	ldr	r0, [r7, #24]
 8007b90:	f000 f908 	bl	8007da4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <pvPortMalloc+0x1b0>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	4a1b      	ldr	r2, [pc, #108]	; (8007c0c <pvPortMalloc+0x1b0>)
 8007ba0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <pvPortMalloc+0x1b0>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <pvPortMalloc+0x1b8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d203      	bcs.n	8007bb6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bae:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <pvPortMalloc+0x1b0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a18      	ldr	r2, [pc, #96]	; (8007c14 <pvPortMalloc+0x1b8>)
 8007bb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <pvPortMalloc+0x1ac>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <pvPortMalloc+0x1bc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a11      	ldr	r2, [pc, #68]	; (8007c18 <pvPortMalloc+0x1bc>)
 8007bd2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007bd4:	f7fe fbec 	bl	80063b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <pvPortMalloc+0x19c>
        __asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60fb      	str	r3, [r7, #12]
    }
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <pvPortMalloc+0x19a>
    return pvReturn;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	; 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20012df4 	.word	0x20012df4
 8007c08:	20012e08 	.word	0x20012e08
 8007c0c:	20012df8 	.word	0x20012df8
 8007c10:	20012dec 	.word	0x20012dec
 8007c14:	20012dfc 	.word	0x20012dfc
 8007c18:	20012e00 	.word	0x20012e00

08007c1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d04d      	beq.n	8007cca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007c2e:	2308      	movs	r3, #8
 8007c30:	425b      	negs	r3, r3
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4413      	add	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <vPortFree+0xb8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4013      	ands	r3, r2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <vPortFree+0x44>
        __asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	60fb      	str	r3, [r7, #12]
    }
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <vPortFree+0x62>
        __asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60bb      	str	r3, [r7, #8]
    }
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <vPortFree+0xb8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01e      	beq.n	8007cca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11a      	bne.n	8007cca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <vPortFree+0xb8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	401a      	ands	r2, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007ca4:	f7fe fb76 	bl	8006394 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <vPortFree+0xbc>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <vPortFree+0xbc>)
 8007cb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cb6:	6938      	ldr	r0, [r7, #16]
 8007cb8:	f000 f874 	bl	8007da4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <vPortFree+0xc0>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	4a06      	ldr	r2, [pc, #24]	; (8007cdc <vPortFree+0xc0>)
 8007cc4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007cc6:	f7fe fb73 	bl	80063b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007cca:	bf00      	nop
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20012e08 	.word	0x20012e08
 8007cd8:	20012df8 	.word	0x20012df8
 8007cdc:	20012e04 	.word	0x20012e04

08007ce0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ce6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007cea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007cec:	4b27      	ldr	r3, [pc, #156]	; (8007d8c <prvHeapInit+0xac>)
 8007cee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00c      	beq.n	8007d14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0307 	bic.w	r3, r3, #7
 8007d06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	4a1f      	ldr	r2, [pc, #124]	; (8007d8c <prvHeapInit+0xac>)
 8007d10:	4413      	add	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d18:	4a1d      	ldr	r2, [pc, #116]	; (8007d90 <prvHeapInit+0xb0>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007d1e:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <prvHeapInit+0xb0>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	4413      	add	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a15      	ldr	r2, [pc, #84]	; (8007d94 <prvHeapInit+0xb4>)
 8007d40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007d42:	4b14      	ldr	r3, [pc, #80]	; (8007d94 <prvHeapInit+0xb4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <prvHeapInit+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <prvHeapInit+0xb4>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a0a      	ldr	r2, [pc, #40]	; (8007d98 <prvHeapInit+0xb8>)
 8007d6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <prvHeapInit+0xbc>)
 8007d76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <prvHeapInit+0xc0>)
 8007d7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d7e:	601a      	str	r2, [r3, #0]
}
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	200001ec 	.word	0x200001ec
 8007d90:	20012dec 	.word	0x20012dec
 8007d94:	20012df4 	.word	0x20012df4
 8007d98:	20012dfc 	.word	0x20012dfc
 8007d9c:	20012df8 	.word	0x20012df8
 8007da0:	20012e08 	.word	0x20012e08

08007da4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <prvInsertBlockIntoFreeList+0xac>)
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e002      	b.n	8007db8 <prvInsertBlockIntoFreeList+0x14>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d8f7      	bhi.n	8007db2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d108      	bne.n	8007de6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	441a      	add	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	441a      	add	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d118      	bne.n	8007e2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4b15      	ldr	r3, [pc, #84]	; (8007e54 <prvInsertBlockIntoFreeList+0xb0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d00d      	beq.n	8007e22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	441a      	add	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e008      	b.n	8007e34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <prvInsertBlockIntoFreeList+0xb0>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e003      	b.n	8007e34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d002      	beq.n	8007e42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007e42:	bf00      	nop
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20012dec 	.word	0x20012dec
 8007e54:	20012df4 	.word	0x20012df4

08007e58 <calloc>:
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <calloc+0xc>)
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	f000 b878 	b.w	8007f54 <_calloc_r>
 8007e64:	20000014 	.word	0x20000014

08007e68 <__errno>:
 8007e68:	4b01      	ldr	r3, [pc, #4]	; (8007e70 <__errno+0x8>)
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	20000014 	.word	0x20000014

08007e74 <exit>:
 8007e74:	b508      	push	{r3, lr}
 8007e76:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <exit+0x20>)
 8007e78:	4604      	mov	r4, r0
 8007e7a:	b113      	cbz	r3, 8007e82 <exit+0xe>
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f3af 8000 	nop.w
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <exit+0x24>)
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e88:	b103      	cbz	r3, 8007e8c <exit+0x18>
 8007e8a:	4798      	blx	r3
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f7f9 fcbd 	bl	800180c <_exit>
 8007e92:	bf00      	nop
 8007e94:	00000000 	.word	0x00000000
 8007e98:	08009eb4 	.word	0x08009eb4

08007e9c <fiprintf>:
 8007e9c:	b40e      	push	{r1, r2, r3}
 8007e9e:	b503      	push	{r0, r1, lr}
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	ab03      	add	r3, sp, #12
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <fiprintf+0x20>)
 8007ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eaa:	6800      	ldr	r0, [r0, #0]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	f000 f935 	bl	800811c <_vfiprintf_r>
 8007eb2:	b002      	add	sp, #8
 8007eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb8:	b003      	add	sp, #12
 8007eba:	4770      	bx	lr
 8007ebc:	20000014 	.word	0x20000014

08007ec0 <__libc_init_array>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4d0d      	ldr	r5, [pc, #52]	; (8007ef8 <__libc_init_array+0x38>)
 8007ec4:	4c0d      	ldr	r4, [pc, #52]	; (8007efc <__libc_init_array+0x3c>)
 8007ec6:	1b64      	subs	r4, r4, r5
 8007ec8:	10a4      	asrs	r4, r4, #2
 8007eca:	2600      	movs	r6, #0
 8007ecc:	42a6      	cmp	r6, r4
 8007ece:	d109      	bne.n	8007ee4 <__libc_init_array+0x24>
 8007ed0:	4d0b      	ldr	r5, [pc, #44]	; (8007f00 <__libc_init_array+0x40>)
 8007ed2:	4c0c      	ldr	r4, [pc, #48]	; (8007f04 <__libc_init_array+0x44>)
 8007ed4:	f001 f9ea 	bl	80092ac <_init>
 8007ed8:	1b64      	subs	r4, r4, r5
 8007eda:	10a4      	asrs	r4, r4, #2
 8007edc:	2600      	movs	r6, #0
 8007ede:	42a6      	cmp	r6, r4
 8007ee0:	d105      	bne.n	8007eee <__libc_init_array+0x2e>
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee8:	4798      	blx	r3
 8007eea:	3601      	adds	r6, #1
 8007eec:	e7ee      	b.n	8007ecc <__libc_init_array+0xc>
 8007eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef2:	4798      	blx	r3
 8007ef4:	3601      	adds	r6, #1
 8007ef6:	e7f2      	b.n	8007ede <__libc_init_array+0x1e>
 8007ef8:	0800a5ec 	.word	0x0800a5ec
 8007efc:	0800a5ec 	.word	0x0800a5ec
 8007f00:	0800a5ec 	.word	0x0800a5ec
 8007f04:	0800a5f0 	.word	0x0800a5f0

08007f08 <malloc>:
 8007f08:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <malloc+0xc>)
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	f000 b881 	b.w	8008014 <_malloc_r>
 8007f12:	bf00      	nop
 8007f14:	20000014 	.word	0x20000014

08007f18 <free>:
 8007f18:	4b02      	ldr	r3, [pc, #8]	; (8007f24 <free+0xc>)
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f000 b829 	b.w	8007f74 <_free_r>
 8007f22:	bf00      	nop
 8007f24:	20000014 	.word	0x20000014

08007f28 <memcpy>:
 8007f28:	440a      	add	r2, r1
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f30:	d100      	bne.n	8007f34 <memcpy+0xc>
 8007f32:	4770      	bx	lr
 8007f34:	b510      	push	{r4, lr}
 8007f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f3e:	4291      	cmp	r1, r2
 8007f40:	d1f9      	bne.n	8007f36 <memcpy+0xe>
 8007f42:	bd10      	pop	{r4, pc}

08007f44 <memset>:
 8007f44:	4402      	add	r2, r0
 8007f46:	4603      	mov	r3, r0
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d100      	bne.n	8007f4e <memset+0xa>
 8007f4c:	4770      	bx	lr
 8007f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f52:	e7f9      	b.n	8007f48 <memset+0x4>

08007f54 <_calloc_r>:
 8007f54:	b513      	push	{r0, r1, r4, lr}
 8007f56:	434a      	muls	r2, r1
 8007f58:	4611      	mov	r1, r2
 8007f5a:	9201      	str	r2, [sp, #4]
 8007f5c:	f000 f85a 	bl	8008014 <_malloc_r>
 8007f60:	4604      	mov	r4, r0
 8007f62:	b118      	cbz	r0, 8007f6c <_calloc_r+0x18>
 8007f64:	9a01      	ldr	r2, [sp, #4]
 8007f66:	2100      	movs	r1, #0
 8007f68:	f7ff ffec 	bl	8007f44 <memset>
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	b002      	add	sp, #8
 8007f70:	bd10      	pop	{r4, pc}
	...

08007f74 <_free_r>:
 8007f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d048      	beq.n	800800c <_free_r+0x98>
 8007f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7e:	9001      	str	r0, [sp, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f1a1 0404 	sub.w	r4, r1, #4
 8007f86:	bfb8      	it	lt
 8007f88:	18e4      	addlt	r4, r4, r3
 8007f8a:	f001 f8a9 	bl	80090e0 <__malloc_lock>
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <_free_r+0x9c>)
 8007f90:	9801      	ldr	r0, [sp, #4]
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	4615      	mov	r5, r2
 8007f96:	b933      	cbnz	r3, 8007fa6 <_free_r+0x32>
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	6014      	str	r4, [r2, #0]
 8007f9c:	b003      	add	sp, #12
 8007f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fa2:	f001 b8a3 	b.w	80090ec <__malloc_unlock>
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	d90b      	bls.n	8007fc2 <_free_r+0x4e>
 8007faa:	6821      	ldr	r1, [r4, #0]
 8007fac:	1862      	adds	r2, r4, r1
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	bf04      	itt	eq
 8007fb2:	681a      	ldreq	r2, [r3, #0]
 8007fb4:	685b      	ldreq	r3, [r3, #4]
 8007fb6:	6063      	str	r3, [r4, #4]
 8007fb8:	bf04      	itt	eq
 8007fba:	1852      	addeq	r2, r2, r1
 8007fbc:	6022      	streq	r2, [r4, #0]
 8007fbe:	602c      	str	r4, [r5, #0]
 8007fc0:	e7ec      	b.n	8007f9c <_free_r+0x28>
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	b10b      	cbz	r3, 8007fcc <_free_r+0x58>
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	d9fa      	bls.n	8007fc2 <_free_r+0x4e>
 8007fcc:	6811      	ldr	r1, [r2, #0]
 8007fce:	1855      	adds	r5, r2, r1
 8007fd0:	42a5      	cmp	r5, r4
 8007fd2:	d10b      	bne.n	8007fec <_free_r+0x78>
 8007fd4:	6824      	ldr	r4, [r4, #0]
 8007fd6:	4421      	add	r1, r4
 8007fd8:	1854      	adds	r4, r2, r1
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	6011      	str	r1, [r2, #0]
 8007fde:	d1dd      	bne.n	8007f9c <_free_r+0x28>
 8007fe0:	681c      	ldr	r4, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	6053      	str	r3, [r2, #4]
 8007fe6:	4421      	add	r1, r4
 8007fe8:	6011      	str	r1, [r2, #0]
 8007fea:	e7d7      	b.n	8007f9c <_free_r+0x28>
 8007fec:	d902      	bls.n	8007ff4 <_free_r+0x80>
 8007fee:	230c      	movs	r3, #12
 8007ff0:	6003      	str	r3, [r0, #0]
 8007ff2:	e7d3      	b.n	8007f9c <_free_r+0x28>
 8007ff4:	6825      	ldr	r5, [r4, #0]
 8007ff6:	1961      	adds	r1, r4, r5
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	bf04      	itt	eq
 8007ffc:	6819      	ldreq	r1, [r3, #0]
 8007ffe:	685b      	ldreq	r3, [r3, #4]
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	bf04      	itt	eq
 8008004:	1949      	addeq	r1, r1, r5
 8008006:	6021      	streq	r1, [r4, #0]
 8008008:	6054      	str	r4, [r2, #4]
 800800a:	e7c7      	b.n	8007f9c <_free_r+0x28>
 800800c:	b003      	add	sp, #12
 800800e:	bd30      	pop	{r4, r5, pc}
 8008010:	20012e0c 	.word	0x20012e0c

08008014 <_malloc_r>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	1ccd      	adds	r5, r1, #3
 8008018:	f025 0503 	bic.w	r5, r5, #3
 800801c:	3508      	adds	r5, #8
 800801e:	2d0c      	cmp	r5, #12
 8008020:	bf38      	it	cc
 8008022:	250c      	movcc	r5, #12
 8008024:	2d00      	cmp	r5, #0
 8008026:	4606      	mov	r6, r0
 8008028:	db01      	blt.n	800802e <_malloc_r+0x1a>
 800802a:	42a9      	cmp	r1, r5
 800802c:	d903      	bls.n	8008036 <_malloc_r+0x22>
 800802e:	230c      	movs	r3, #12
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	2000      	movs	r0, #0
 8008034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008036:	f001 f853 	bl	80090e0 <__malloc_lock>
 800803a:	4921      	ldr	r1, [pc, #132]	; (80080c0 <_malloc_r+0xac>)
 800803c:	680a      	ldr	r2, [r1, #0]
 800803e:	4614      	mov	r4, r2
 8008040:	b99c      	cbnz	r4, 800806a <_malloc_r+0x56>
 8008042:	4f20      	ldr	r7, [pc, #128]	; (80080c4 <_malloc_r+0xb0>)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	b923      	cbnz	r3, 8008052 <_malloc_r+0x3e>
 8008048:	4621      	mov	r1, r4
 800804a:	4630      	mov	r0, r6
 800804c:	f000 fb4a 	bl	80086e4 <_sbrk_r>
 8008050:	6038      	str	r0, [r7, #0]
 8008052:	4629      	mov	r1, r5
 8008054:	4630      	mov	r0, r6
 8008056:	f000 fb45 	bl	80086e4 <_sbrk_r>
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	d123      	bne.n	80080a6 <_malloc_r+0x92>
 800805e:	230c      	movs	r3, #12
 8008060:	6033      	str	r3, [r6, #0]
 8008062:	4630      	mov	r0, r6
 8008064:	f001 f842 	bl	80090ec <__malloc_unlock>
 8008068:	e7e3      	b.n	8008032 <_malloc_r+0x1e>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	1b5b      	subs	r3, r3, r5
 800806e:	d417      	bmi.n	80080a0 <_malloc_r+0x8c>
 8008070:	2b0b      	cmp	r3, #11
 8008072:	d903      	bls.n	800807c <_malloc_r+0x68>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	441c      	add	r4, r3
 8008078:	6025      	str	r5, [r4, #0]
 800807a:	e004      	b.n	8008086 <_malloc_r+0x72>
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	42a2      	cmp	r2, r4
 8008080:	bf0c      	ite	eq
 8008082:	600b      	streq	r3, [r1, #0]
 8008084:	6053      	strne	r3, [r2, #4]
 8008086:	4630      	mov	r0, r6
 8008088:	f001 f830 	bl	80090ec <__malloc_unlock>
 800808c:	f104 000b 	add.w	r0, r4, #11
 8008090:	1d23      	adds	r3, r4, #4
 8008092:	f020 0007 	bic.w	r0, r0, #7
 8008096:	1ac2      	subs	r2, r0, r3
 8008098:	d0cc      	beq.n	8008034 <_malloc_r+0x20>
 800809a:	1a1b      	subs	r3, r3, r0
 800809c:	50a3      	str	r3, [r4, r2]
 800809e:	e7c9      	b.n	8008034 <_malloc_r+0x20>
 80080a0:	4622      	mov	r2, r4
 80080a2:	6864      	ldr	r4, [r4, #4]
 80080a4:	e7cc      	b.n	8008040 <_malloc_r+0x2c>
 80080a6:	1cc4      	adds	r4, r0, #3
 80080a8:	f024 0403 	bic.w	r4, r4, #3
 80080ac:	42a0      	cmp	r0, r4
 80080ae:	d0e3      	beq.n	8008078 <_malloc_r+0x64>
 80080b0:	1a21      	subs	r1, r4, r0
 80080b2:	4630      	mov	r0, r6
 80080b4:	f000 fb16 	bl	80086e4 <_sbrk_r>
 80080b8:	3001      	adds	r0, #1
 80080ba:	d1dd      	bne.n	8008078 <_malloc_r+0x64>
 80080bc:	e7cf      	b.n	800805e <_malloc_r+0x4a>
 80080be:	bf00      	nop
 80080c0:	20012e0c 	.word	0x20012e0c
 80080c4:	20012e10 	.word	0x20012e10

080080c8 <__sfputc_r>:
 80080c8:	6893      	ldr	r3, [r2, #8]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	b410      	push	{r4}
 80080d0:	6093      	str	r3, [r2, #8]
 80080d2:	da08      	bge.n	80080e6 <__sfputc_r+0x1e>
 80080d4:	6994      	ldr	r4, [r2, #24]
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	db01      	blt.n	80080de <__sfputc_r+0x16>
 80080da:	290a      	cmp	r1, #10
 80080dc:	d103      	bne.n	80080e6 <__sfputc_r+0x1e>
 80080de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e2:	f000 bd1f 	b.w	8008b24 <__swbuf_r>
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	1c58      	adds	r0, r3, #1
 80080ea:	6010      	str	r0, [r2, #0]
 80080ec:	7019      	strb	r1, [r3, #0]
 80080ee:	4608      	mov	r0, r1
 80080f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <__sfputs_r>:
 80080f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f8:	4606      	mov	r6, r0
 80080fa:	460f      	mov	r7, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	18d5      	adds	r5, r2, r3
 8008100:	42ac      	cmp	r4, r5
 8008102:	d101      	bne.n	8008108 <__sfputs_r+0x12>
 8008104:	2000      	movs	r0, #0
 8008106:	e007      	b.n	8008118 <__sfputs_r+0x22>
 8008108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810c:	463a      	mov	r2, r7
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff ffda 	bl	80080c8 <__sfputc_r>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d1f3      	bne.n	8008100 <__sfputs_r+0xa>
 8008118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800811c <_vfiprintf_r>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	460d      	mov	r5, r1
 8008122:	b09d      	sub	sp, #116	; 0x74
 8008124:	4614      	mov	r4, r2
 8008126:	4698      	mov	r8, r3
 8008128:	4606      	mov	r6, r0
 800812a:	b118      	cbz	r0, 8008134 <_vfiprintf_r+0x18>
 800812c:	6983      	ldr	r3, [r0, #24]
 800812e:	b90b      	cbnz	r3, 8008134 <_vfiprintf_r+0x18>
 8008130:	f000 fed2 	bl	8008ed8 <__sinit>
 8008134:	4b89      	ldr	r3, [pc, #548]	; (800835c <_vfiprintf_r+0x240>)
 8008136:	429d      	cmp	r5, r3
 8008138:	d11b      	bne.n	8008172 <_vfiprintf_r+0x56>
 800813a:	6875      	ldr	r5, [r6, #4]
 800813c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813e:	07d9      	lsls	r1, r3, #31
 8008140:	d405      	bmi.n	800814e <_vfiprintf_r+0x32>
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	059a      	lsls	r2, r3, #22
 8008146:	d402      	bmi.n	800814e <_vfiprintf_r+0x32>
 8008148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800814a:	f000 ff63 	bl	8009014 <__retarget_lock_acquire_recursive>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	071b      	lsls	r3, r3, #28
 8008152:	d501      	bpl.n	8008158 <_vfiprintf_r+0x3c>
 8008154:	692b      	ldr	r3, [r5, #16]
 8008156:	b9eb      	cbnz	r3, 8008194 <_vfiprintf_r+0x78>
 8008158:	4629      	mov	r1, r5
 800815a:	4630      	mov	r0, r6
 800815c:	f000 fd34 	bl	8008bc8 <__swsetup_r>
 8008160:	b1c0      	cbz	r0, 8008194 <_vfiprintf_r+0x78>
 8008162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008164:	07dc      	lsls	r4, r3, #31
 8008166:	d50e      	bpl.n	8008186 <_vfiprintf_r+0x6a>
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	b01d      	add	sp, #116	; 0x74
 800816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008172:	4b7b      	ldr	r3, [pc, #492]	; (8008360 <_vfiprintf_r+0x244>)
 8008174:	429d      	cmp	r5, r3
 8008176:	d101      	bne.n	800817c <_vfiprintf_r+0x60>
 8008178:	68b5      	ldr	r5, [r6, #8]
 800817a:	e7df      	b.n	800813c <_vfiprintf_r+0x20>
 800817c:	4b79      	ldr	r3, [pc, #484]	; (8008364 <_vfiprintf_r+0x248>)
 800817e:	429d      	cmp	r5, r3
 8008180:	bf08      	it	eq
 8008182:	68f5      	ldreq	r5, [r6, #12]
 8008184:	e7da      	b.n	800813c <_vfiprintf_r+0x20>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	0598      	lsls	r0, r3, #22
 800818a:	d4ed      	bmi.n	8008168 <_vfiprintf_r+0x4c>
 800818c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800818e:	f000 ff42 	bl	8009016 <__retarget_lock_release_recursive>
 8008192:	e7e9      	b.n	8008168 <_vfiprintf_r+0x4c>
 8008194:	2300      	movs	r3, #0
 8008196:	9309      	str	r3, [sp, #36]	; 0x24
 8008198:	2320      	movs	r3, #32
 800819a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800819e:	f8cd 800c 	str.w	r8, [sp, #12]
 80081a2:	2330      	movs	r3, #48	; 0x30
 80081a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008368 <_vfiprintf_r+0x24c>
 80081a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ac:	f04f 0901 	mov.w	r9, #1
 80081b0:	4623      	mov	r3, r4
 80081b2:	469a      	mov	sl, r3
 80081b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b8:	b10a      	cbz	r2, 80081be <_vfiprintf_r+0xa2>
 80081ba:	2a25      	cmp	r2, #37	; 0x25
 80081bc:	d1f9      	bne.n	80081b2 <_vfiprintf_r+0x96>
 80081be:	ebba 0b04 	subs.w	fp, sl, r4
 80081c2:	d00b      	beq.n	80081dc <_vfiprintf_r+0xc0>
 80081c4:	465b      	mov	r3, fp
 80081c6:	4622      	mov	r2, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	4630      	mov	r0, r6
 80081cc:	f7ff ff93 	bl	80080f6 <__sfputs_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	f000 80aa 	beq.w	800832a <_vfiprintf_r+0x20e>
 80081d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d8:	445a      	add	r2, fp
 80081da:	9209      	str	r2, [sp, #36]	; 0x24
 80081dc:	f89a 3000 	ldrb.w	r3, [sl]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80a2 	beq.w	800832a <_vfiprintf_r+0x20e>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081f0:	f10a 0a01 	add.w	sl, sl, #1
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	9307      	str	r3, [sp, #28]
 80081f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081fc:	931a      	str	r3, [sp, #104]	; 0x68
 80081fe:	4654      	mov	r4, sl
 8008200:	2205      	movs	r2, #5
 8008202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008206:	4858      	ldr	r0, [pc, #352]	; (8008368 <_vfiprintf_r+0x24c>)
 8008208:	f7f7 fffa 	bl	8000200 <memchr>
 800820c:	9a04      	ldr	r2, [sp, #16]
 800820e:	b9d8      	cbnz	r0, 8008248 <_vfiprintf_r+0x12c>
 8008210:	06d1      	lsls	r1, r2, #27
 8008212:	bf44      	itt	mi
 8008214:	2320      	movmi	r3, #32
 8008216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821a:	0713      	lsls	r3, r2, #28
 800821c:	bf44      	itt	mi
 800821e:	232b      	movmi	r3, #43	; 0x2b
 8008220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008224:	f89a 3000 	ldrb.w	r3, [sl]
 8008228:	2b2a      	cmp	r3, #42	; 0x2a
 800822a:	d015      	beq.n	8008258 <_vfiprintf_r+0x13c>
 800822c:	9a07      	ldr	r2, [sp, #28]
 800822e:	4654      	mov	r4, sl
 8008230:	2000      	movs	r0, #0
 8008232:	f04f 0c0a 	mov.w	ip, #10
 8008236:	4621      	mov	r1, r4
 8008238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800823c:	3b30      	subs	r3, #48	; 0x30
 800823e:	2b09      	cmp	r3, #9
 8008240:	d94e      	bls.n	80082e0 <_vfiprintf_r+0x1c4>
 8008242:	b1b0      	cbz	r0, 8008272 <_vfiprintf_r+0x156>
 8008244:	9207      	str	r2, [sp, #28]
 8008246:	e014      	b.n	8008272 <_vfiprintf_r+0x156>
 8008248:	eba0 0308 	sub.w	r3, r0, r8
 800824c:	fa09 f303 	lsl.w	r3, r9, r3
 8008250:	4313      	orrs	r3, r2
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	46a2      	mov	sl, r4
 8008256:	e7d2      	b.n	80081fe <_vfiprintf_r+0xe2>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	1d19      	adds	r1, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	9103      	str	r1, [sp, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	bfbb      	ittet	lt
 8008264:	425b      	neglt	r3, r3
 8008266:	f042 0202 	orrlt.w	r2, r2, #2
 800826a:	9307      	strge	r3, [sp, #28]
 800826c:	9307      	strlt	r3, [sp, #28]
 800826e:	bfb8      	it	lt
 8008270:	9204      	strlt	r2, [sp, #16]
 8008272:	7823      	ldrb	r3, [r4, #0]
 8008274:	2b2e      	cmp	r3, #46	; 0x2e
 8008276:	d10c      	bne.n	8008292 <_vfiprintf_r+0x176>
 8008278:	7863      	ldrb	r3, [r4, #1]
 800827a:	2b2a      	cmp	r3, #42	; 0x2a
 800827c:	d135      	bne.n	80082ea <_vfiprintf_r+0x1ce>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	1d1a      	adds	r2, r3, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	9203      	str	r2, [sp, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfb8      	it	lt
 800828a:	f04f 33ff 	movlt.w	r3, #4294967295
 800828e:	3402      	adds	r4, #2
 8008290:	9305      	str	r3, [sp, #20]
 8008292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008378 <_vfiprintf_r+0x25c>
 8008296:	7821      	ldrb	r1, [r4, #0]
 8008298:	2203      	movs	r2, #3
 800829a:	4650      	mov	r0, sl
 800829c:	f7f7 ffb0 	bl	8000200 <memchr>
 80082a0:	b140      	cbz	r0, 80082b4 <_vfiprintf_r+0x198>
 80082a2:	2340      	movs	r3, #64	; 0x40
 80082a4:	eba0 000a 	sub.w	r0, r0, sl
 80082a8:	fa03 f000 	lsl.w	r0, r3, r0
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	4303      	orrs	r3, r0
 80082b0:	3401      	adds	r4, #1
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b8:	482c      	ldr	r0, [pc, #176]	; (800836c <_vfiprintf_r+0x250>)
 80082ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082be:	2206      	movs	r2, #6
 80082c0:	f7f7 ff9e 	bl	8000200 <memchr>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d03f      	beq.n	8008348 <_vfiprintf_r+0x22c>
 80082c8:	4b29      	ldr	r3, [pc, #164]	; (8008370 <_vfiprintf_r+0x254>)
 80082ca:	bb1b      	cbnz	r3, 8008314 <_vfiprintf_r+0x1f8>
 80082cc:	9b03      	ldr	r3, [sp, #12]
 80082ce:	3307      	adds	r3, #7
 80082d0:	f023 0307 	bic.w	r3, r3, #7
 80082d4:	3308      	adds	r3, #8
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082da:	443b      	add	r3, r7
 80082dc:	9309      	str	r3, [sp, #36]	; 0x24
 80082de:	e767      	b.n	80081b0 <_vfiprintf_r+0x94>
 80082e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e4:	460c      	mov	r4, r1
 80082e6:	2001      	movs	r0, #1
 80082e8:	e7a5      	b.n	8008236 <_vfiprintf_r+0x11a>
 80082ea:	2300      	movs	r3, #0
 80082ec:	3401      	adds	r4, #1
 80082ee:	9305      	str	r3, [sp, #20]
 80082f0:	4619      	mov	r1, r3
 80082f2:	f04f 0c0a 	mov.w	ip, #10
 80082f6:	4620      	mov	r0, r4
 80082f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082fc:	3a30      	subs	r2, #48	; 0x30
 80082fe:	2a09      	cmp	r2, #9
 8008300:	d903      	bls.n	800830a <_vfiprintf_r+0x1ee>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0c5      	beq.n	8008292 <_vfiprintf_r+0x176>
 8008306:	9105      	str	r1, [sp, #20]
 8008308:	e7c3      	b.n	8008292 <_vfiprintf_r+0x176>
 800830a:	fb0c 2101 	mla	r1, ip, r1, r2
 800830e:	4604      	mov	r4, r0
 8008310:	2301      	movs	r3, #1
 8008312:	e7f0      	b.n	80082f6 <_vfiprintf_r+0x1da>
 8008314:	ab03      	add	r3, sp, #12
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	462a      	mov	r2, r5
 800831a:	4b16      	ldr	r3, [pc, #88]	; (8008374 <_vfiprintf_r+0x258>)
 800831c:	a904      	add	r1, sp, #16
 800831e:	4630      	mov	r0, r6
 8008320:	f3af 8000 	nop.w
 8008324:	4607      	mov	r7, r0
 8008326:	1c78      	adds	r0, r7, #1
 8008328:	d1d6      	bne.n	80082d8 <_vfiprintf_r+0x1bc>
 800832a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800832c:	07d9      	lsls	r1, r3, #31
 800832e:	d405      	bmi.n	800833c <_vfiprintf_r+0x220>
 8008330:	89ab      	ldrh	r3, [r5, #12]
 8008332:	059a      	lsls	r2, r3, #22
 8008334:	d402      	bmi.n	800833c <_vfiprintf_r+0x220>
 8008336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008338:	f000 fe6d 	bl	8009016 <__retarget_lock_release_recursive>
 800833c:	89ab      	ldrh	r3, [r5, #12]
 800833e:	065b      	lsls	r3, r3, #25
 8008340:	f53f af12 	bmi.w	8008168 <_vfiprintf_r+0x4c>
 8008344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008346:	e711      	b.n	800816c <_vfiprintf_r+0x50>
 8008348:	ab03      	add	r3, sp, #12
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	462a      	mov	r2, r5
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <_vfiprintf_r+0x258>)
 8008350:	a904      	add	r1, sp, #16
 8008352:	4630      	mov	r0, r6
 8008354:	f000 f880 	bl	8008458 <_printf_i>
 8008358:	e7e4      	b.n	8008324 <_vfiprintf_r+0x208>
 800835a:	bf00      	nop
 800835c:	0800a5a4 	.word	0x0800a5a4
 8008360:	0800a5c4 	.word	0x0800a5c4
 8008364:	0800a584 	.word	0x0800a584
 8008368:	08009eb8 	.word	0x08009eb8
 800836c:	08009ec2 	.word	0x08009ec2
 8008370:	00000000 	.word	0x00000000
 8008374:	080080f7 	.word	0x080080f7
 8008378:	08009ebe 	.word	0x08009ebe

0800837c <_printf_common>:
 800837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	4616      	mov	r6, r2
 8008382:	4699      	mov	r9, r3
 8008384:	688a      	ldr	r2, [r1, #8]
 8008386:	690b      	ldr	r3, [r1, #16]
 8008388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800838c:	4293      	cmp	r3, r2
 800838e:	bfb8      	it	lt
 8008390:	4613      	movlt	r3, r2
 8008392:	6033      	str	r3, [r6, #0]
 8008394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008398:	4607      	mov	r7, r0
 800839a:	460c      	mov	r4, r1
 800839c:	b10a      	cbz	r2, 80083a2 <_printf_common+0x26>
 800839e:	3301      	adds	r3, #1
 80083a0:	6033      	str	r3, [r6, #0]
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	0699      	lsls	r1, r3, #26
 80083a6:	bf42      	ittt	mi
 80083a8:	6833      	ldrmi	r3, [r6, #0]
 80083aa:	3302      	addmi	r3, #2
 80083ac:	6033      	strmi	r3, [r6, #0]
 80083ae:	6825      	ldr	r5, [r4, #0]
 80083b0:	f015 0506 	ands.w	r5, r5, #6
 80083b4:	d106      	bne.n	80083c4 <_printf_common+0x48>
 80083b6:	f104 0a19 	add.w	sl, r4, #25
 80083ba:	68e3      	ldr	r3, [r4, #12]
 80083bc:	6832      	ldr	r2, [r6, #0]
 80083be:	1a9b      	subs	r3, r3, r2
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	dc26      	bgt.n	8008412 <_printf_common+0x96>
 80083c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c8:	1e13      	subs	r3, r2, #0
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	bf18      	it	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	0692      	lsls	r2, r2, #26
 80083d2:	d42b      	bmi.n	800842c <_printf_common+0xb0>
 80083d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d8:	4649      	mov	r1, r9
 80083da:	4638      	mov	r0, r7
 80083dc:	47c0      	blx	r8
 80083de:	3001      	adds	r0, #1
 80083e0:	d01e      	beq.n	8008420 <_printf_common+0xa4>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	68e5      	ldr	r5, [r4, #12]
 80083e6:	6832      	ldr	r2, [r6, #0]
 80083e8:	f003 0306 	and.w	r3, r3, #6
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	bf08      	it	eq
 80083f0:	1aad      	subeq	r5, r5, r2
 80083f2:	68a3      	ldr	r3, [r4, #8]
 80083f4:	6922      	ldr	r2, [r4, #16]
 80083f6:	bf0c      	ite	eq
 80083f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083fc:	2500      	movne	r5, #0
 80083fe:	4293      	cmp	r3, r2
 8008400:	bfc4      	itt	gt
 8008402:	1a9b      	subgt	r3, r3, r2
 8008404:	18ed      	addgt	r5, r5, r3
 8008406:	2600      	movs	r6, #0
 8008408:	341a      	adds	r4, #26
 800840a:	42b5      	cmp	r5, r6
 800840c:	d11a      	bne.n	8008444 <_printf_common+0xc8>
 800840e:	2000      	movs	r0, #0
 8008410:	e008      	b.n	8008424 <_printf_common+0xa8>
 8008412:	2301      	movs	r3, #1
 8008414:	4652      	mov	r2, sl
 8008416:	4649      	mov	r1, r9
 8008418:	4638      	mov	r0, r7
 800841a:	47c0      	blx	r8
 800841c:	3001      	adds	r0, #1
 800841e:	d103      	bne.n	8008428 <_printf_common+0xac>
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008428:	3501      	adds	r5, #1
 800842a:	e7c6      	b.n	80083ba <_printf_common+0x3e>
 800842c:	18e1      	adds	r1, r4, r3
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	2030      	movs	r0, #48	; 0x30
 8008432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008436:	4422      	add	r2, r4
 8008438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800843c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008440:	3302      	adds	r3, #2
 8008442:	e7c7      	b.n	80083d4 <_printf_common+0x58>
 8008444:	2301      	movs	r3, #1
 8008446:	4622      	mov	r2, r4
 8008448:	4649      	mov	r1, r9
 800844a:	4638      	mov	r0, r7
 800844c:	47c0      	blx	r8
 800844e:	3001      	adds	r0, #1
 8008450:	d0e6      	beq.n	8008420 <_printf_common+0xa4>
 8008452:	3601      	adds	r6, #1
 8008454:	e7d9      	b.n	800840a <_printf_common+0x8e>
	...

08008458 <_printf_i>:
 8008458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800845c:	460c      	mov	r4, r1
 800845e:	4691      	mov	r9, r2
 8008460:	7e27      	ldrb	r7, [r4, #24]
 8008462:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008464:	2f78      	cmp	r7, #120	; 0x78
 8008466:	4680      	mov	r8, r0
 8008468:	469a      	mov	sl, r3
 800846a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800846e:	d807      	bhi.n	8008480 <_printf_i+0x28>
 8008470:	2f62      	cmp	r7, #98	; 0x62
 8008472:	d80a      	bhi.n	800848a <_printf_i+0x32>
 8008474:	2f00      	cmp	r7, #0
 8008476:	f000 80d8 	beq.w	800862a <_printf_i+0x1d2>
 800847a:	2f58      	cmp	r7, #88	; 0x58
 800847c:	f000 80a3 	beq.w	80085c6 <_printf_i+0x16e>
 8008480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008488:	e03a      	b.n	8008500 <_printf_i+0xa8>
 800848a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800848e:	2b15      	cmp	r3, #21
 8008490:	d8f6      	bhi.n	8008480 <_printf_i+0x28>
 8008492:	a001      	add	r0, pc, #4	; (adr r0, 8008498 <_printf_i+0x40>)
 8008494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008498:	080084f1 	.word	0x080084f1
 800849c:	08008505 	.word	0x08008505
 80084a0:	08008481 	.word	0x08008481
 80084a4:	08008481 	.word	0x08008481
 80084a8:	08008481 	.word	0x08008481
 80084ac:	08008481 	.word	0x08008481
 80084b0:	08008505 	.word	0x08008505
 80084b4:	08008481 	.word	0x08008481
 80084b8:	08008481 	.word	0x08008481
 80084bc:	08008481 	.word	0x08008481
 80084c0:	08008481 	.word	0x08008481
 80084c4:	08008611 	.word	0x08008611
 80084c8:	08008535 	.word	0x08008535
 80084cc:	080085f3 	.word	0x080085f3
 80084d0:	08008481 	.word	0x08008481
 80084d4:	08008481 	.word	0x08008481
 80084d8:	08008633 	.word	0x08008633
 80084dc:	08008481 	.word	0x08008481
 80084e0:	08008535 	.word	0x08008535
 80084e4:	08008481 	.word	0x08008481
 80084e8:	08008481 	.word	0x08008481
 80084ec:	080085fb 	.word	0x080085fb
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	1d1a      	adds	r2, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	600a      	str	r2, [r1, #0]
 80084f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008500:	2301      	movs	r3, #1
 8008502:	e0a3      	b.n	800864c <_printf_i+0x1f4>
 8008504:	6825      	ldr	r5, [r4, #0]
 8008506:	6808      	ldr	r0, [r1, #0]
 8008508:	062e      	lsls	r6, r5, #24
 800850a:	f100 0304 	add.w	r3, r0, #4
 800850e:	d50a      	bpl.n	8008526 <_printf_i+0xce>
 8008510:	6805      	ldr	r5, [r0, #0]
 8008512:	600b      	str	r3, [r1, #0]
 8008514:	2d00      	cmp	r5, #0
 8008516:	da03      	bge.n	8008520 <_printf_i+0xc8>
 8008518:	232d      	movs	r3, #45	; 0x2d
 800851a:	426d      	negs	r5, r5
 800851c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008520:	485e      	ldr	r0, [pc, #376]	; (800869c <_printf_i+0x244>)
 8008522:	230a      	movs	r3, #10
 8008524:	e019      	b.n	800855a <_printf_i+0x102>
 8008526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800852a:	6805      	ldr	r5, [r0, #0]
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	bf18      	it	ne
 8008530:	b22d      	sxthne	r5, r5
 8008532:	e7ef      	b.n	8008514 <_printf_i+0xbc>
 8008534:	680b      	ldr	r3, [r1, #0]
 8008536:	6825      	ldr	r5, [r4, #0]
 8008538:	1d18      	adds	r0, r3, #4
 800853a:	6008      	str	r0, [r1, #0]
 800853c:	0628      	lsls	r0, r5, #24
 800853e:	d501      	bpl.n	8008544 <_printf_i+0xec>
 8008540:	681d      	ldr	r5, [r3, #0]
 8008542:	e002      	b.n	800854a <_printf_i+0xf2>
 8008544:	0669      	lsls	r1, r5, #25
 8008546:	d5fb      	bpl.n	8008540 <_printf_i+0xe8>
 8008548:	881d      	ldrh	r5, [r3, #0]
 800854a:	4854      	ldr	r0, [pc, #336]	; (800869c <_printf_i+0x244>)
 800854c:	2f6f      	cmp	r7, #111	; 0x6f
 800854e:	bf0c      	ite	eq
 8008550:	2308      	moveq	r3, #8
 8008552:	230a      	movne	r3, #10
 8008554:	2100      	movs	r1, #0
 8008556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800855a:	6866      	ldr	r6, [r4, #4]
 800855c:	60a6      	str	r6, [r4, #8]
 800855e:	2e00      	cmp	r6, #0
 8008560:	bfa2      	ittt	ge
 8008562:	6821      	ldrge	r1, [r4, #0]
 8008564:	f021 0104 	bicge.w	r1, r1, #4
 8008568:	6021      	strge	r1, [r4, #0]
 800856a:	b90d      	cbnz	r5, 8008570 <_printf_i+0x118>
 800856c:	2e00      	cmp	r6, #0
 800856e:	d04d      	beq.n	800860c <_printf_i+0x1b4>
 8008570:	4616      	mov	r6, r2
 8008572:	fbb5 f1f3 	udiv	r1, r5, r3
 8008576:	fb03 5711 	mls	r7, r3, r1, r5
 800857a:	5dc7      	ldrb	r7, [r0, r7]
 800857c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008580:	462f      	mov	r7, r5
 8008582:	42bb      	cmp	r3, r7
 8008584:	460d      	mov	r5, r1
 8008586:	d9f4      	bls.n	8008572 <_printf_i+0x11a>
 8008588:	2b08      	cmp	r3, #8
 800858a:	d10b      	bne.n	80085a4 <_printf_i+0x14c>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	07df      	lsls	r7, r3, #31
 8008590:	d508      	bpl.n	80085a4 <_printf_i+0x14c>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	6861      	ldr	r1, [r4, #4]
 8008596:	4299      	cmp	r1, r3
 8008598:	bfde      	ittt	le
 800859a:	2330      	movle	r3, #48	; 0x30
 800859c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085a4:	1b92      	subs	r2, r2, r6
 80085a6:	6122      	str	r2, [r4, #16]
 80085a8:	f8cd a000 	str.w	sl, [sp]
 80085ac:	464b      	mov	r3, r9
 80085ae:	aa03      	add	r2, sp, #12
 80085b0:	4621      	mov	r1, r4
 80085b2:	4640      	mov	r0, r8
 80085b4:	f7ff fee2 	bl	800837c <_printf_common>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d14c      	bne.n	8008656 <_printf_i+0x1fe>
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	b004      	add	sp, #16
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	4835      	ldr	r0, [pc, #212]	; (800869c <_printf_i+0x244>)
 80085c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	680e      	ldr	r6, [r1, #0]
 80085d0:	061f      	lsls	r7, r3, #24
 80085d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80085d6:	600e      	str	r6, [r1, #0]
 80085d8:	d514      	bpl.n	8008604 <_printf_i+0x1ac>
 80085da:	07d9      	lsls	r1, r3, #31
 80085dc:	bf44      	itt	mi
 80085de:	f043 0320 	orrmi.w	r3, r3, #32
 80085e2:	6023      	strmi	r3, [r4, #0]
 80085e4:	b91d      	cbnz	r5, 80085ee <_printf_i+0x196>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	f023 0320 	bic.w	r3, r3, #32
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	2310      	movs	r3, #16
 80085f0:	e7b0      	b.n	8008554 <_printf_i+0xfc>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	f043 0320 	orr.w	r3, r3, #32
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	2378      	movs	r3, #120	; 0x78
 80085fc:	4828      	ldr	r0, [pc, #160]	; (80086a0 <_printf_i+0x248>)
 80085fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008602:	e7e3      	b.n	80085cc <_printf_i+0x174>
 8008604:	065e      	lsls	r6, r3, #25
 8008606:	bf48      	it	mi
 8008608:	b2ad      	uxthmi	r5, r5
 800860a:	e7e6      	b.n	80085da <_printf_i+0x182>
 800860c:	4616      	mov	r6, r2
 800860e:	e7bb      	b.n	8008588 <_printf_i+0x130>
 8008610:	680b      	ldr	r3, [r1, #0]
 8008612:	6826      	ldr	r6, [r4, #0]
 8008614:	6960      	ldr	r0, [r4, #20]
 8008616:	1d1d      	adds	r5, r3, #4
 8008618:	600d      	str	r5, [r1, #0]
 800861a:	0635      	lsls	r5, r6, #24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	d501      	bpl.n	8008624 <_printf_i+0x1cc>
 8008620:	6018      	str	r0, [r3, #0]
 8008622:	e002      	b.n	800862a <_printf_i+0x1d2>
 8008624:	0671      	lsls	r1, r6, #25
 8008626:	d5fb      	bpl.n	8008620 <_printf_i+0x1c8>
 8008628:	8018      	strh	r0, [r3, #0]
 800862a:	2300      	movs	r3, #0
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	4616      	mov	r6, r2
 8008630:	e7ba      	b.n	80085a8 <_printf_i+0x150>
 8008632:	680b      	ldr	r3, [r1, #0]
 8008634:	1d1a      	adds	r2, r3, #4
 8008636:	600a      	str	r2, [r1, #0]
 8008638:	681e      	ldr	r6, [r3, #0]
 800863a:	6862      	ldr	r2, [r4, #4]
 800863c:	2100      	movs	r1, #0
 800863e:	4630      	mov	r0, r6
 8008640:	f7f7 fdde 	bl	8000200 <memchr>
 8008644:	b108      	cbz	r0, 800864a <_printf_i+0x1f2>
 8008646:	1b80      	subs	r0, r0, r6
 8008648:	6060      	str	r0, [r4, #4]
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	2300      	movs	r3, #0
 8008650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008654:	e7a8      	b.n	80085a8 <_printf_i+0x150>
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d0ab      	beq.n	80085bc <_printf_i+0x164>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	079b      	lsls	r3, r3, #30
 8008668:	d413      	bmi.n	8008692 <_printf_i+0x23a>
 800866a:	68e0      	ldr	r0, [r4, #12]
 800866c:	9b03      	ldr	r3, [sp, #12]
 800866e:	4298      	cmp	r0, r3
 8008670:	bfb8      	it	lt
 8008672:	4618      	movlt	r0, r3
 8008674:	e7a4      	b.n	80085c0 <_printf_i+0x168>
 8008676:	2301      	movs	r3, #1
 8008678:	4632      	mov	r2, r6
 800867a:	4649      	mov	r1, r9
 800867c:	4640      	mov	r0, r8
 800867e:	47d0      	blx	sl
 8008680:	3001      	adds	r0, #1
 8008682:	d09b      	beq.n	80085bc <_printf_i+0x164>
 8008684:	3501      	adds	r5, #1
 8008686:	68e3      	ldr	r3, [r4, #12]
 8008688:	9903      	ldr	r1, [sp, #12]
 800868a:	1a5b      	subs	r3, r3, r1
 800868c:	42ab      	cmp	r3, r5
 800868e:	dcf2      	bgt.n	8008676 <_printf_i+0x21e>
 8008690:	e7eb      	b.n	800866a <_printf_i+0x212>
 8008692:	2500      	movs	r5, #0
 8008694:	f104 0619 	add.w	r6, r4, #25
 8008698:	e7f5      	b.n	8008686 <_printf_i+0x22e>
 800869a:	bf00      	nop
 800869c:	08009ec9 	.word	0x08009ec9
 80086a0:	08009eda 	.word	0x08009eda

080086a4 <iprintf>:
 80086a4:	b40f      	push	{r0, r1, r2, r3}
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <iprintf+0x2c>)
 80086a8:	b513      	push	{r0, r1, r4, lr}
 80086aa:	681c      	ldr	r4, [r3, #0]
 80086ac:	b124      	cbz	r4, 80086b8 <iprintf+0x14>
 80086ae:	69a3      	ldr	r3, [r4, #24]
 80086b0:	b913      	cbnz	r3, 80086b8 <iprintf+0x14>
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 fc10 	bl	8008ed8 <__sinit>
 80086b8:	ab05      	add	r3, sp, #20
 80086ba:	9a04      	ldr	r2, [sp, #16]
 80086bc:	68a1      	ldr	r1, [r4, #8]
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7ff fd2b 	bl	800811c <_vfiprintf_r>
 80086c6:	b002      	add	sp, #8
 80086c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086cc:	b004      	add	sp, #16
 80086ce:	4770      	bx	lr
 80086d0:	20000014 	.word	0x20000014

080086d4 <realloc>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <realloc+0xc>)
 80086d6:	460a      	mov	r2, r1
 80086d8:	4601      	mov	r1, r0
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f000 bd0c 	b.w	80090f8 <_realloc_r>
 80086e0:	20000014 	.word	0x20000014

080086e4 <_sbrk_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d06      	ldr	r5, [pc, #24]	; (8008700 <_sbrk_r+0x1c>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f9 f904 	bl	80018fc <_sbrk>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_sbrk_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_sbrk_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	20012f00 	.word	0x20012f00

08008704 <strdup>:
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <strdup+0xc>)
 8008706:	4601      	mov	r1, r0
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	f000 b803 	b.w	8008714 <_strdup_r>
 800870e:	bf00      	nop
 8008710:	20000014 	.word	0x20000014

08008714 <_strdup_r>:
 8008714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	460d      	mov	r5, r1
 800871c:	f7f7 fd62 	bl	80001e4 <strlen>
 8008720:	1c42      	adds	r2, r0, #1
 8008722:	4611      	mov	r1, r2
 8008724:	4620      	mov	r0, r4
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	f7ff fc74 	bl	8008014 <_malloc_r>
 800872c:	4604      	mov	r4, r0
 800872e:	b118      	cbz	r0, 8008738 <_strdup_r+0x24>
 8008730:	9a01      	ldr	r2, [sp, #4]
 8008732:	4629      	mov	r1, r5
 8008734:	f7ff fbf8 	bl	8007f28 <memcpy>
 8008738:	4620      	mov	r0, r4
 800873a:	b003      	add	sp, #12
 800873c:	bd30      	pop	{r4, r5, pc}
	...

08008740 <_strerror_r>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	288e      	cmp	r0, #142	; 0x8e
 800874a:	f200 812f 	bhi.w	80089ac <_strerror_r+0x26c>
 800874e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008752:	0138      	.short	0x0138
 8008754:	0091008f 	.word	0x0091008f
 8008758:	00950093 	.word	0x00950093
 800875c:	00990097 	.word	0x00990097
 8008760:	009d009b 	.word	0x009d009b
 8008764:	00a300a1 	.word	0x00a300a1
 8008768:	00a900a7 	.word	0x00a900a7
 800876c:	00ad00ab 	.word	0x00ad00ab
 8008770:	00af012d 	.word	0x00af012d
 8008774:	00b300b1 	.word	0x00b300b1
 8008778:	00b700b5 	.word	0x00b700b5
 800877c:	00bf00bd 	.word	0x00bf00bd
 8008780:	00c700c5 	.word	0x00c700c5
 8008784:	00cb00c9 	.word	0x00cb00c9
 8008788:	00d100cd 	.word	0x00d100cd
 800878c:	00d700d5 	.word	0x00d700d5
 8008790:	00db00d9 	.word	0x00db00d9
 8008794:	00df00dd 	.word	0x00df00dd
 8008798:	00e300e1 	.word	0x00e300e1
 800879c:	012d012d 	.word	0x012d012d
 80087a0:	012d012d 	.word	0x012d012d
 80087a4:	012d012d 	.word	0x012d012d
 80087a8:	012d012d 	.word	0x012d012d
 80087ac:	00eb00e7 	.word	0x00eb00e7
 80087b0:	012d012d 	.word	0x012d012d
 80087b4:	012d012d 	.word	0x012d012d
 80087b8:	012d012d 	.word	0x012d012d
 80087bc:	012d012d 	.word	0x012d012d
 80087c0:	012d012d 	.word	0x012d012d
 80087c4:	012d012d 	.word	0x012d012d
 80087c8:	00ed012d 	.word	0x00ed012d
 80087cc:	00ef0107 	.word	0x00ef0107
 80087d0:	012d00f1 	.word	0x012d00f1
 80087d4:	012d012d 	.word	0x012d012d
 80087d8:	012d00f3 	.word	0x012d00f3
 80087dc:	012d012d 	.word	0x012d012d
 80087e0:	012d00f5 	.word	0x012d00f5
 80087e4:	00f9012d 	.word	0x00f9012d
 80087e8:	012d012d 	.word	0x012d012d
 80087ec:	012d00fb 	.word	0x012d00fb
 80087f0:	012d012d 	.word	0x012d012d
 80087f4:	012d012d 	.word	0x012d012d
 80087f8:	012d012d 	.word	0x012d012d
 80087fc:	012d012d 	.word	0x012d012d
 8008800:	00fd012d 	.word	0x00fd012d
 8008804:	00ff012d 	.word	0x00ff012d
 8008808:	01030101 	.word	0x01030101
 800880c:	012d012d 	.word	0x012d012d
 8008810:	012d0125 	.word	0x012d0125
 8008814:	012d012d 	.word	0x012d012d
 8008818:	012d012d 	.word	0x012d012d
 800881c:	012d012d 	.word	0x012d012d
 8008820:	0113012d 	.word	0x0113012d
 8008824:	01090105 	.word	0x01090105
 8008828:	010d010b 	.word	0x010d010b
 800882c:	012d010f 	.word	0x012d010f
 8008830:	01150111 	.word	0x01150111
 8008834:	00e90119 	.word	0x00e90119
 8008838:	012b00c1 	.word	0x012b00c1
 800883c:	00cf00b9 	.word	0x00cf00b9
 8008840:	009f00bb 	.word	0x009f00bb
 8008844:	012900a5 	.word	0x012900a5
 8008848:	012d00f7 	.word	0x012d00f7
 800884c:	00c30117 	.word	0x00c30117
 8008850:	011b011d 	.word	0x011b011d
 8008854:	012d012d 	.word	0x012d012d
 8008858:	012d012d 	.word	0x012d012d
 800885c:	00d3012d 	.word	0x00d3012d
 8008860:	012d012d 	.word	0x012d012d
 8008864:	00e5012d 	.word	0x00e5012d
 8008868:	011f0127 	.word	0x011f0127
 800886c:	01230121 	.word	0x01230121
 8008870:	4855      	ldr	r0, [pc, #340]	; (80089c8 <_strerror_r+0x288>)
 8008872:	bd10      	pop	{r4, pc}
 8008874:	4855      	ldr	r0, [pc, #340]	; (80089cc <_strerror_r+0x28c>)
 8008876:	e7fc      	b.n	8008872 <_strerror_r+0x132>
 8008878:	4855      	ldr	r0, [pc, #340]	; (80089d0 <_strerror_r+0x290>)
 800887a:	e7fa      	b.n	8008872 <_strerror_r+0x132>
 800887c:	4855      	ldr	r0, [pc, #340]	; (80089d4 <_strerror_r+0x294>)
 800887e:	e7f8      	b.n	8008872 <_strerror_r+0x132>
 8008880:	4855      	ldr	r0, [pc, #340]	; (80089d8 <_strerror_r+0x298>)
 8008882:	e7f6      	b.n	8008872 <_strerror_r+0x132>
 8008884:	4855      	ldr	r0, [pc, #340]	; (80089dc <_strerror_r+0x29c>)
 8008886:	e7f4      	b.n	8008872 <_strerror_r+0x132>
 8008888:	4855      	ldr	r0, [pc, #340]	; (80089e0 <_strerror_r+0x2a0>)
 800888a:	e7f2      	b.n	8008872 <_strerror_r+0x132>
 800888c:	4855      	ldr	r0, [pc, #340]	; (80089e4 <_strerror_r+0x2a4>)
 800888e:	e7f0      	b.n	8008872 <_strerror_r+0x132>
 8008890:	4855      	ldr	r0, [pc, #340]	; (80089e8 <_strerror_r+0x2a8>)
 8008892:	e7ee      	b.n	8008872 <_strerror_r+0x132>
 8008894:	4855      	ldr	r0, [pc, #340]	; (80089ec <_strerror_r+0x2ac>)
 8008896:	e7ec      	b.n	8008872 <_strerror_r+0x132>
 8008898:	4855      	ldr	r0, [pc, #340]	; (80089f0 <_strerror_r+0x2b0>)
 800889a:	e7ea      	b.n	8008872 <_strerror_r+0x132>
 800889c:	4855      	ldr	r0, [pc, #340]	; (80089f4 <_strerror_r+0x2b4>)
 800889e:	e7e8      	b.n	8008872 <_strerror_r+0x132>
 80088a0:	4855      	ldr	r0, [pc, #340]	; (80089f8 <_strerror_r+0x2b8>)
 80088a2:	e7e6      	b.n	8008872 <_strerror_r+0x132>
 80088a4:	4855      	ldr	r0, [pc, #340]	; (80089fc <_strerror_r+0x2bc>)
 80088a6:	e7e4      	b.n	8008872 <_strerror_r+0x132>
 80088a8:	4855      	ldr	r0, [pc, #340]	; (8008a00 <_strerror_r+0x2c0>)
 80088aa:	e7e2      	b.n	8008872 <_strerror_r+0x132>
 80088ac:	4855      	ldr	r0, [pc, #340]	; (8008a04 <_strerror_r+0x2c4>)
 80088ae:	e7e0      	b.n	8008872 <_strerror_r+0x132>
 80088b0:	4855      	ldr	r0, [pc, #340]	; (8008a08 <_strerror_r+0x2c8>)
 80088b2:	e7de      	b.n	8008872 <_strerror_r+0x132>
 80088b4:	4855      	ldr	r0, [pc, #340]	; (8008a0c <_strerror_r+0x2cc>)
 80088b6:	e7dc      	b.n	8008872 <_strerror_r+0x132>
 80088b8:	4855      	ldr	r0, [pc, #340]	; (8008a10 <_strerror_r+0x2d0>)
 80088ba:	e7da      	b.n	8008872 <_strerror_r+0x132>
 80088bc:	4855      	ldr	r0, [pc, #340]	; (8008a14 <_strerror_r+0x2d4>)
 80088be:	e7d8      	b.n	8008872 <_strerror_r+0x132>
 80088c0:	4855      	ldr	r0, [pc, #340]	; (8008a18 <_strerror_r+0x2d8>)
 80088c2:	e7d6      	b.n	8008872 <_strerror_r+0x132>
 80088c4:	4855      	ldr	r0, [pc, #340]	; (8008a1c <_strerror_r+0x2dc>)
 80088c6:	e7d4      	b.n	8008872 <_strerror_r+0x132>
 80088c8:	4855      	ldr	r0, [pc, #340]	; (8008a20 <_strerror_r+0x2e0>)
 80088ca:	e7d2      	b.n	8008872 <_strerror_r+0x132>
 80088cc:	4855      	ldr	r0, [pc, #340]	; (8008a24 <_strerror_r+0x2e4>)
 80088ce:	e7d0      	b.n	8008872 <_strerror_r+0x132>
 80088d0:	4855      	ldr	r0, [pc, #340]	; (8008a28 <_strerror_r+0x2e8>)
 80088d2:	e7ce      	b.n	8008872 <_strerror_r+0x132>
 80088d4:	4855      	ldr	r0, [pc, #340]	; (8008a2c <_strerror_r+0x2ec>)
 80088d6:	e7cc      	b.n	8008872 <_strerror_r+0x132>
 80088d8:	4855      	ldr	r0, [pc, #340]	; (8008a30 <_strerror_r+0x2f0>)
 80088da:	e7ca      	b.n	8008872 <_strerror_r+0x132>
 80088dc:	4855      	ldr	r0, [pc, #340]	; (8008a34 <_strerror_r+0x2f4>)
 80088de:	e7c8      	b.n	8008872 <_strerror_r+0x132>
 80088e0:	4855      	ldr	r0, [pc, #340]	; (8008a38 <_strerror_r+0x2f8>)
 80088e2:	e7c6      	b.n	8008872 <_strerror_r+0x132>
 80088e4:	4855      	ldr	r0, [pc, #340]	; (8008a3c <_strerror_r+0x2fc>)
 80088e6:	e7c4      	b.n	8008872 <_strerror_r+0x132>
 80088e8:	4855      	ldr	r0, [pc, #340]	; (8008a40 <_strerror_r+0x300>)
 80088ea:	e7c2      	b.n	8008872 <_strerror_r+0x132>
 80088ec:	4855      	ldr	r0, [pc, #340]	; (8008a44 <_strerror_r+0x304>)
 80088ee:	e7c0      	b.n	8008872 <_strerror_r+0x132>
 80088f0:	4855      	ldr	r0, [pc, #340]	; (8008a48 <_strerror_r+0x308>)
 80088f2:	e7be      	b.n	8008872 <_strerror_r+0x132>
 80088f4:	4855      	ldr	r0, [pc, #340]	; (8008a4c <_strerror_r+0x30c>)
 80088f6:	e7bc      	b.n	8008872 <_strerror_r+0x132>
 80088f8:	4855      	ldr	r0, [pc, #340]	; (8008a50 <_strerror_r+0x310>)
 80088fa:	e7ba      	b.n	8008872 <_strerror_r+0x132>
 80088fc:	4855      	ldr	r0, [pc, #340]	; (8008a54 <_strerror_r+0x314>)
 80088fe:	e7b8      	b.n	8008872 <_strerror_r+0x132>
 8008900:	4855      	ldr	r0, [pc, #340]	; (8008a58 <_strerror_r+0x318>)
 8008902:	e7b6      	b.n	8008872 <_strerror_r+0x132>
 8008904:	4855      	ldr	r0, [pc, #340]	; (8008a5c <_strerror_r+0x31c>)
 8008906:	e7b4      	b.n	8008872 <_strerror_r+0x132>
 8008908:	4855      	ldr	r0, [pc, #340]	; (8008a60 <_strerror_r+0x320>)
 800890a:	e7b2      	b.n	8008872 <_strerror_r+0x132>
 800890c:	4855      	ldr	r0, [pc, #340]	; (8008a64 <_strerror_r+0x324>)
 800890e:	e7b0      	b.n	8008872 <_strerror_r+0x132>
 8008910:	4855      	ldr	r0, [pc, #340]	; (8008a68 <_strerror_r+0x328>)
 8008912:	e7ae      	b.n	8008872 <_strerror_r+0x132>
 8008914:	4855      	ldr	r0, [pc, #340]	; (8008a6c <_strerror_r+0x32c>)
 8008916:	e7ac      	b.n	8008872 <_strerror_r+0x132>
 8008918:	4855      	ldr	r0, [pc, #340]	; (8008a70 <_strerror_r+0x330>)
 800891a:	e7aa      	b.n	8008872 <_strerror_r+0x132>
 800891c:	4855      	ldr	r0, [pc, #340]	; (8008a74 <_strerror_r+0x334>)
 800891e:	e7a8      	b.n	8008872 <_strerror_r+0x132>
 8008920:	4855      	ldr	r0, [pc, #340]	; (8008a78 <_strerror_r+0x338>)
 8008922:	e7a6      	b.n	8008872 <_strerror_r+0x132>
 8008924:	4855      	ldr	r0, [pc, #340]	; (8008a7c <_strerror_r+0x33c>)
 8008926:	e7a4      	b.n	8008872 <_strerror_r+0x132>
 8008928:	4855      	ldr	r0, [pc, #340]	; (8008a80 <_strerror_r+0x340>)
 800892a:	e7a2      	b.n	8008872 <_strerror_r+0x132>
 800892c:	4855      	ldr	r0, [pc, #340]	; (8008a84 <_strerror_r+0x344>)
 800892e:	e7a0      	b.n	8008872 <_strerror_r+0x132>
 8008930:	4855      	ldr	r0, [pc, #340]	; (8008a88 <_strerror_r+0x348>)
 8008932:	e79e      	b.n	8008872 <_strerror_r+0x132>
 8008934:	4855      	ldr	r0, [pc, #340]	; (8008a8c <_strerror_r+0x34c>)
 8008936:	e79c      	b.n	8008872 <_strerror_r+0x132>
 8008938:	4855      	ldr	r0, [pc, #340]	; (8008a90 <_strerror_r+0x350>)
 800893a:	e79a      	b.n	8008872 <_strerror_r+0x132>
 800893c:	4855      	ldr	r0, [pc, #340]	; (8008a94 <_strerror_r+0x354>)
 800893e:	e798      	b.n	8008872 <_strerror_r+0x132>
 8008940:	4855      	ldr	r0, [pc, #340]	; (8008a98 <_strerror_r+0x358>)
 8008942:	e796      	b.n	8008872 <_strerror_r+0x132>
 8008944:	4855      	ldr	r0, [pc, #340]	; (8008a9c <_strerror_r+0x35c>)
 8008946:	e794      	b.n	8008872 <_strerror_r+0x132>
 8008948:	4855      	ldr	r0, [pc, #340]	; (8008aa0 <_strerror_r+0x360>)
 800894a:	e792      	b.n	8008872 <_strerror_r+0x132>
 800894c:	4855      	ldr	r0, [pc, #340]	; (8008aa4 <_strerror_r+0x364>)
 800894e:	e790      	b.n	8008872 <_strerror_r+0x132>
 8008950:	4855      	ldr	r0, [pc, #340]	; (8008aa8 <_strerror_r+0x368>)
 8008952:	e78e      	b.n	8008872 <_strerror_r+0x132>
 8008954:	4855      	ldr	r0, [pc, #340]	; (8008aac <_strerror_r+0x36c>)
 8008956:	e78c      	b.n	8008872 <_strerror_r+0x132>
 8008958:	4855      	ldr	r0, [pc, #340]	; (8008ab0 <_strerror_r+0x370>)
 800895a:	e78a      	b.n	8008872 <_strerror_r+0x132>
 800895c:	4855      	ldr	r0, [pc, #340]	; (8008ab4 <_strerror_r+0x374>)
 800895e:	e788      	b.n	8008872 <_strerror_r+0x132>
 8008960:	4855      	ldr	r0, [pc, #340]	; (8008ab8 <_strerror_r+0x378>)
 8008962:	e786      	b.n	8008872 <_strerror_r+0x132>
 8008964:	4855      	ldr	r0, [pc, #340]	; (8008abc <_strerror_r+0x37c>)
 8008966:	e784      	b.n	8008872 <_strerror_r+0x132>
 8008968:	4855      	ldr	r0, [pc, #340]	; (8008ac0 <_strerror_r+0x380>)
 800896a:	e782      	b.n	8008872 <_strerror_r+0x132>
 800896c:	4855      	ldr	r0, [pc, #340]	; (8008ac4 <_strerror_r+0x384>)
 800896e:	e780      	b.n	8008872 <_strerror_r+0x132>
 8008970:	4855      	ldr	r0, [pc, #340]	; (8008ac8 <_strerror_r+0x388>)
 8008972:	e77e      	b.n	8008872 <_strerror_r+0x132>
 8008974:	4855      	ldr	r0, [pc, #340]	; (8008acc <_strerror_r+0x38c>)
 8008976:	e77c      	b.n	8008872 <_strerror_r+0x132>
 8008978:	4855      	ldr	r0, [pc, #340]	; (8008ad0 <_strerror_r+0x390>)
 800897a:	e77a      	b.n	8008872 <_strerror_r+0x132>
 800897c:	4855      	ldr	r0, [pc, #340]	; (8008ad4 <_strerror_r+0x394>)
 800897e:	e778      	b.n	8008872 <_strerror_r+0x132>
 8008980:	4855      	ldr	r0, [pc, #340]	; (8008ad8 <_strerror_r+0x398>)
 8008982:	e776      	b.n	8008872 <_strerror_r+0x132>
 8008984:	4855      	ldr	r0, [pc, #340]	; (8008adc <_strerror_r+0x39c>)
 8008986:	e774      	b.n	8008872 <_strerror_r+0x132>
 8008988:	4855      	ldr	r0, [pc, #340]	; (8008ae0 <_strerror_r+0x3a0>)
 800898a:	e772      	b.n	8008872 <_strerror_r+0x132>
 800898c:	4855      	ldr	r0, [pc, #340]	; (8008ae4 <_strerror_r+0x3a4>)
 800898e:	e770      	b.n	8008872 <_strerror_r+0x132>
 8008990:	4855      	ldr	r0, [pc, #340]	; (8008ae8 <_strerror_r+0x3a8>)
 8008992:	e76e      	b.n	8008872 <_strerror_r+0x132>
 8008994:	4855      	ldr	r0, [pc, #340]	; (8008aec <_strerror_r+0x3ac>)
 8008996:	e76c      	b.n	8008872 <_strerror_r+0x132>
 8008998:	4855      	ldr	r0, [pc, #340]	; (8008af0 <_strerror_r+0x3b0>)
 800899a:	e76a      	b.n	8008872 <_strerror_r+0x132>
 800899c:	4855      	ldr	r0, [pc, #340]	; (8008af4 <_strerror_r+0x3b4>)
 800899e:	e768      	b.n	8008872 <_strerror_r+0x132>
 80089a0:	4855      	ldr	r0, [pc, #340]	; (8008af8 <_strerror_r+0x3b8>)
 80089a2:	e766      	b.n	8008872 <_strerror_r+0x132>
 80089a4:	4855      	ldr	r0, [pc, #340]	; (8008afc <_strerror_r+0x3bc>)
 80089a6:	e764      	b.n	8008872 <_strerror_r+0x132>
 80089a8:	4855      	ldr	r0, [pc, #340]	; (8008b00 <_strerror_r+0x3c0>)
 80089aa:	e762      	b.n	8008872 <_strerror_r+0x132>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bf14      	ite	ne
 80089b0:	461a      	movne	r2, r3
 80089b2:	4622      	moveq	r2, r4
 80089b4:	f000 f8b4 	bl	8008b20 <_user_strerror>
 80089b8:	4b52      	ldr	r3, [pc, #328]	; (8008b04 <_strerror_r+0x3c4>)
 80089ba:	2800      	cmp	r0, #0
 80089bc:	bf08      	it	eq
 80089be:	4618      	moveq	r0, r3
 80089c0:	e757      	b.n	8008872 <_strerror_r+0x132>
 80089c2:	4851      	ldr	r0, [pc, #324]	; (8008b08 <_strerror_r+0x3c8>)
 80089c4:	e755      	b.n	8008872 <_strerror_r+0x132>
 80089c6:	bf00      	nop
 80089c8:	08009eeb 	.word	0x08009eeb
 80089cc:	08009ef5 	.word	0x08009ef5
 80089d0:	08009f0f 	.word	0x08009f0f
 80089d4:	08009f1f 	.word	0x08009f1f
 80089d8:	08009f37 	.word	0x08009f37
 80089dc:	08009f41 	.word	0x08009f41
 80089e0:	08009f5b 	.word	0x08009f5b
 80089e4:	08009f6d 	.word	0x08009f6d
 80089e8:	08009f7f 	.word	0x08009f7f
 80089ec:	08009f98 	.word	0x08009f98
 80089f0:	08009fa8 	.word	0x08009fa8
 80089f4:	08009fb4 	.word	0x08009fb4
 80089f8:	08009fd1 	.word	0x08009fd1
 80089fc:	08009fe3 	.word	0x08009fe3
 8008a00:	08009ff4 	.word	0x08009ff4
 8008a04:	0800a006 	.word	0x0800a006
 8008a08:	0800a012 	.word	0x0800a012
 8008a0c:	0800a02a 	.word	0x0800a02a
 8008a10:	0800a036 	.word	0x0800a036
 8008a14:	0800a048 	.word	0x0800a048
 8008a18:	0800a057 	.word	0x0800a057
 8008a1c:	0800a067 	.word	0x0800a067
 8008a20:	0800a074 	.word	0x0800a074
 8008a24:	0800a093 	.word	0x0800a093
 8008a28:	0800a0a2 	.word	0x0800a0a2
 8008a2c:	0800a0b3 	.word	0x0800a0b3
 8008a30:	0800a0d7 	.word	0x0800a0d7
 8008a34:	0800a0f5 	.word	0x0800a0f5
 8008a38:	0800a113 	.word	0x0800a113
 8008a3c:	0800a133 	.word	0x0800a133
 8008a40:	0800a14a 	.word	0x0800a14a
 8008a44:	0800a159 	.word	0x0800a159
 8008a48:	0800a168 	.word	0x0800a168
 8008a4c:	0800a17c 	.word	0x0800a17c
 8008a50:	0800a194 	.word	0x0800a194
 8008a54:	0800a1a2 	.word	0x0800a1a2
 8008a58:	0800a1af 	.word	0x0800a1af
 8008a5c:	0800a1c5 	.word	0x0800a1c5
 8008a60:	0800a1d4 	.word	0x0800a1d4
 8008a64:	0800a1e0 	.word	0x0800a1e0
 8008a68:	0800a20f 	.word	0x0800a20f
 8008a6c:	0800a220 	.word	0x0800a220
 8008a70:	0800a23b 	.word	0x0800a23b
 8008a74:	0800a24e 	.word	0x0800a24e
 8008a78:	0800a264 	.word	0x0800a264
 8008a7c:	0800a26d 	.word	0x0800a26d
 8008a80:	0800a284 	.word	0x0800a284
 8008a84:	0800a28c 	.word	0x0800a28c
 8008a88:	0800a299 	.word	0x0800a299
 8008a8c:	0800a2ae 	.word	0x0800a2ae
 8008a90:	0800a2c2 	.word	0x0800a2c2
 8008a94:	0800a2da 	.word	0x0800a2da
 8008a98:	0800a2e9 	.word	0x0800a2e9
 8008a9c:	0800a2fa 	.word	0x0800a2fa
 8008aa0:	0800a30d 	.word	0x0800a30d
 8008aa4:	0800a319 	.word	0x0800a319
 8008aa8:	0800a332 	.word	0x0800a332
 8008aac:	0800a346 	.word	0x0800a346
 8008ab0:	0800a361 	.word	0x0800a361
 8008ab4:	0800a379 	.word	0x0800a379
 8008ab8:	0800a393 	.word	0x0800a393
 8008abc:	0800a39b 	.word	0x0800a39b
 8008ac0:	0800a3cb 	.word	0x0800a3cb
 8008ac4:	0800a3ea 	.word	0x0800a3ea
 8008ac8:	0800a409 	.word	0x0800a409
 8008acc:	0800a420 	.word	0x0800a420
 8008ad0:	0800a433 	.word	0x0800a433
 8008ad4:	0800a44c 	.word	0x0800a44c
 8008ad8:	0800a463 	.word	0x0800a463
 8008adc:	0800a479 	.word	0x0800a479
 8008ae0:	0800a49a 	.word	0x0800a49a
 8008ae4:	0800a4b2 	.word	0x0800a4b2
 8008ae8:	0800a4ce 	.word	0x0800a4ce
 8008aec:	0800a4e1 	.word	0x0800a4e1
 8008af0:	0800a4f7 	.word	0x0800a4f7
 8008af4:	0800a50b 	.word	0x0800a50b
 8008af8:	0800a52d 	.word	0x0800a52d
 8008afc:	0800a553 	.word	0x0800a553
 8008b00:	0800a564 	.word	0x0800a564
 8008b04:	08009ebd 	.word	0x08009ebd
 8008b08:	0800a579 	.word	0x0800a579

08008b0c <strerror>:
 8008b0c:	4601      	mov	r1, r0
 8008b0e:	4803      	ldr	r0, [pc, #12]	; (8008b1c <strerror+0x10>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	6800      	ldr	r0, [r0, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	f7ff be13 	b.w	8008740 <_strerror_r>
 8008b1a:	bf00      	nop
 8008b1c:	20000014 	.word	0x20000014

08008b20 <_user_strerror>:
 8008b20:	2000      	movs	r0, #0
 8008b22:	4770      	bx	lr

08008b24 <__swbuf_r>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	460e      	mov	r6, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	b118      	cbz	r0, 8008b36 <__swbuf_r+0x12>
 8008b2e:	6983      	ldr	r3, [r0, #24]
 8008b30:	b90b      	cbnz	r3, 8008b36 <__swbuf_r+0x12>
 8008b32:	f000 f9d1 	bl	8008ed8 <__sinit>
 8008b36:	4b21      	ldr	r3, [pc, #132]	; (8008bbc <__swbuf_r+0x98>)
 8008b38:	429c      	cmp	r4, r3
 8008b3a:	d12b      	bne.n	8008b94 <__swbuf_r+0x70>
 8008b3c:	686c      	ldr	r4, [r5, #4]
 8008b3e:	69a3      	ldr	r3, [r4, #24]
 8008b40:	60a3      	str	r3, [r4, #8]
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	071a      	lsls	r2, r3, #28
 8008b46:	d52f      	bpl.n	8008ba8 <__swbuf_r+0x84>
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	b36b      	cbz	r3, 8008ba8 <__swbuf_r+0x84>
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	6820      	ldr	r0, [r4, #0]
 8008b50:	1ac0      	subs	r0, r0, r3
 8008b52:	6963      	ldr	r3, [r4, #20]
 8008b54:	b2f6      	uxtb	r6, r6
 8008b56:	4283      	cmp	r3, r0
 8008b58:	4637      	mov	r7, r6
 8008b5a:	dc04      	bgt.n	8008b66 <__swbuf_r+0x42>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 f926 	bl	8008db0 <_fflush_r>
 8008b64:	bb30      	cbnz	r0, 8008bb4 <__swbuf_r+0x90>
 8008b66:	68a3      	ldr	r3, [r4, #8]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	60a3      	str	r3, [r4, #8]
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	6022      	str	r2, [r4, #0]
 8008b72:	701e      	strb	r6, [r3, #0]
 8008b74:	6963      	ldr	r3, [r4, #20]
 8008b76:	3001      	adds	r0, #1
 8008b78:	4283      	cmp	r3, r0
 8008b7a:	d004      	beq.n	8008b86 <__swbuf_r+0x62>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	07db      	lsls	r3, r3, #31
 8008b80:	d506      	bpl.n	8008b90 <__swbuf_r+0x6c>
 8008b82:	2e0a      	cmp	r6, #10
 8008b84:	d104      	bne.n	8008b90 <__swbuf_r+0x6c>
 8008b86:	4621      	mov	r1, r4
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f000 f911 	bl	8008db0 <_fflush_r>
 8008b8e:	b988      	cbnz	r0, 8008bb4 <__swbuf_r+0x90>
 8008b90:	4638      	mov	r0, r7
 8008b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b94:	4b0a      	ldr	r3, [pc, #40]	; (8008bc0 <__swbuf_r+0x9c>)
 8008b96:	429c      	cmp	r4, r3
 8008b98:	d101      	bne.n	8008b9e <__swbuf_r+0x7a>
 8008b9a:	68ac      	ldr	r4, [r5, #8]
 8008b9c:	e7cf      	b.n	8008b3e <__swbuf_r+0x1a>
 8008b9e:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <__swbuf_r+0xa0>)
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	bf08      	it	eq
 8008ba4:	68ec      	ldreq	r4, [r5, #12]
 8008ba6:	e7ca      	b.n	8008b3e <__swbuf_r+0x1a>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4628      	mov	r0, r5
 8008bac:	f000 f80c 	bl	8008bc8 <__swsetup_r>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d0cb      	beq.n	8008b4c <__swbuf_r+0x28>
 8008bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8008bb8:	e7ea      	b.n	8008b90 <__swbuf_r+0x6c>
 8008bba:	bf00      	nop
 8008bbc:	0800a5a4 	.word	0x0800a5a4
 8008bc0:	0800a5c4 	.word	0x0800a5c4
 8008bc4:	0800a584 	.word	0x0800a584

08008bc8 <__swsetup_r>:
 8008bc8:	4b32      	ldr	r3, [pc, #200]	; (8008c94 <__swsetup_r+0xcc>)
 8008bca:	b570      	push	{r4, r5, r6, lr}
 8008bcc:	681d      	ldr	r5, [r3, #0]
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	b125      	cbz	r5, 8008bde <__swsetup_r+0x16>
 8008bd4:	69ab      	ldr	r3, [r5, #24]
 8008bd6:	b913      	cbnz	r3, 8008bde <__swsetup_r+0x16>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 f97d 	bl	8008ed8 <__sinit>
 8008bde:	4b2e      	ldr	r3, [pc, #184]	; (8008c98 <__swsetup_r+0xd0>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d10f      	bne.n	8008c04 <__swsetup_r+0x3c>
 8008be4:	686c      	ldr	r4, [r5, #4]
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bec:	0719      	lsls	r1, r3, #28
 8008bee:	d42c      	bmi.n	8008c4a <__swsetup_r+0x82>
 8008bf0:	06dd      	lsls	r5, r3, #27
 8008bf2:	d411      	bmi.n	8008c18 <__swsetup_r+0x50>
 8008bf4:	2309      	movs	r3, #9
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008c02:	e03e      	b.n	8008c82 <__swsetup_r+0xba>
 8008c04:	4b25      	ldr	r3, [pc, #148]	; (8008c9c <__swsetup_r+0xd4>)
 8008c06:	429c      	cmp	r4, r3
 8008c08:	d101      	bne.n	8008c0e <__swsetup_r+0x46>
 8008c0a:	68ac      	ldr	r4, [r5, #8]
 8008c0c:	e7eb      	b.n	8008be6 <__swsetup_r+0x1e>
 8008c0e:	4b24      	ldr	r3, [pc, #144]	; (8008ca0 <__swsetup_r+0xd8>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	bf08      	it	eq
 8008c14:	68ec      	ldreq	r4, [r5, #12]
 8008c16:	e7e6      	b.n	8008be6 <__swsetup_r+0x1e>
 8008c18:	0758      	lsls	r0, r3, #29
 8008c1a:	d512      	bpl.n	8008c42 <__swsetup_r+0x7a>
 8008c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c1e:	b141      	cbz	r1, 8008c32 <__swsetup_r+0x6a>
 8008c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c24:	4299      	cmp	r1, r3
 8008c26:	d002      	beq.n	8008c2e <__swsetup_r+0x66>
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff f9a3 	bl	8007f74 <_free_r>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6363      	str	r3, [r4, #52]	; 0x34
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f043 0308 	orr.w	r3, r3, #8
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	b94b      	cbnz	r3, 8008c62 <__swsetup_r+0x9a>
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c58:	d003      	beq.n	8008c62 <__swsetup_r+0x9a>
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f9ff 	bl	8009060 <__smakebuf_r>
 8008c62:	89a0      	ldrh	r0, [r4, #12]
 8008c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c68:	f010 0301 	ands.w	r3, r0, #1
 8008c6c:	d00a      	beq.n	8008c84 <__swsetup_r+0xbc>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60a3      	str	r3, [r4, #8]
 8008c72:	6963      	ldr	r3, [r4, #20]
 8008c74:	425b      	negs	r3, r3
 8008c76:	61a3      	str	r3, [r4, #24]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	b943      	cbnz	r3, 8008c8e <__swsetup_r+0xc6>
 8008c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c80:	d1ba      	bne.n	8008bf8 <__swsetup_r+0x30>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	0781      	lsls	r1, r0, #30
 8008c86:	bf58      	it	pl
 8008c88:	6963      	ldrpl	r3, [r4, #20]
 8008c8a:	60a3      	str	r3, [r4, #8]
 8008c8c:	e7f4      	b.n	8008c78 <__swsetup_r+0xb0>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e7f7      	b.n	8008c82 <__swsetup_r+0xba>
 8008c92:	bf00      	nop
 8008c94:	20000014 	.word	0x20000014
 8008c98:	0800a5a4 	.word	0x0800a5a4
 8008c9c:	0800a5c4 	.word	0x0800a5c4
 8008ca0:	0800a584 	.word	0x0800a584

08008ca4 <__sflush_r>:
 8008ca4:	898a      	ldrh	r2, [r1, #12]
 8008ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008caa:	4605      	mov	r5, r0
 8008cac:	0710      	lsls	r0, r2, #28
 8008cae:	460c      	mov	r4, r1
 8008cb0:	d458      	bmi.n	8008d64 <__sflush_r+0xc0>
 8008cb2:	684b      	ldr	r3, [r1, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dc05      	bgt.n	8008cc4 <__sflush_r+0x20>
 8008cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dc02      	bgt.n	8008cc4 <__sflush_r+0x20>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	d0f9      	beq.n	8008cbe <__sflush_r+0x1a>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cd0:	682f      	ldr	r7, [r5, #0]
 8008cd2:	602b      	str	r3, [r5, #0]
 8008cd4:	d032      	beq.n	8008d3c <__sflush_r+0x98>
 8008cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	075a      	lsls	r2, r3, #29
 8008cdc:	d505      	bpl.n	8008cea <__sflush_r+0x46>
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	1ac0      	subs	r0, r0, r3
 8008ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ce4:	b10b      	cbz	r3, 8008cea <__sflush_r+0x46>
 8008ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ce8:	1ac0      	subs	r0, r0, r3
 8008cea:	2300      	movs	r3, #0
 8008cec:	4602      	mov	r2, r0
 8008cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf0:	6a21      	ldr	r1, [r4, #32]
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b0      	blx	r6
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	d106      	bne.n	8008d0a <__sflush_r+0x66>
 8008cfc:	6829      	ldr	r1, [r5, #0]
 8008cfe:	291d      	cmp	r1, #29
 8008d00:	d82c      	bhi.n	8008d5c <__sflush_r+0xb8>
 8008d02:	4a2a      	ldr	r2, [pc, #168]	; (8008dac <__sflush_r+0x108>)
 8008d04:	40ca      	lsrs	r2, r1
 8008d06:	07d6      	lsls	r6, r2, #31
 8008d08:	d528      	bpl.n	8008d5c <__sflush_r+0xb8>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	6062      	str	r2, [r4, #4]
 8008d0e:	04d9      	lsls	r1, r3, #19
 8008d10:	6922      	ldr	r2, [r4, #16]
 8008d12:	6022      	str	r2, [r4, #0]
 8008d14:	d504      	bpl.n	8008d20 <__sflush_r+0x7c>
 8008d16:	1c42      	adds	r2, r0, #1
 8008d18:	d101      	bne.n	8008d1e <__sflush_r+0x7a>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	b903      	cbnz	r3, 8008d20 <__sflush_r+0x7c>
 8008d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8008d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d22:	602f      	str	r7, [r5, #0]
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d0ca      	beq.n	8008cbe <__sflush_r+0x1a>
 8008d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d2c:	4299      	cmp	r1, r3
 8008d2e:	d002      	beq.n	8008d36 <__sflush_r+0x92>
 8008d30:	4628      	mov	r0, r5
 8008d32:	f7ff f91f 	bl	8007f74 <_free_r>
 8008d36:	2000      	movs	r0, #0
 8008d38:	6360      	str	r0, [r4, #52]	; 0x34
 8008d3a:	e7c1      	b.n	8008cc0 <__sflush_r+0x1c>
 8008d3c:	6a21      	ldr	r1, [r4, #32]
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b0      	blx	r6
 8008d44:	1c41      	adds	r1, r0, #1
 8008d46:	d1c7      	bne.n	8008cd8 <__sflush_r+0x34>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0c4      	beq.n	8008cd8 <__sflush_r+0x34>
 8008d4e:	2b1d      	cmp	r3, #29
 8008d50:	d001      	beq.n	8008d56 <__sflush_r+0xb2>
 8008d52:	2b16      	cmp	r3, #22
 8008d54:	d101      	bne.n	8008d5a <__sflush_r+0xb6>
 8008d56:	602f      	str	r7, [r5, #0]
 8008d58:	e7b1      	b.n	8008cbe <__sflush_r+0x1a>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d60:	81a3      	strh	r3, [r4, #12]
 8008d62:	e7ad      	b.n	8008cc0 <__sflush_r+0x1c>
 8008d64:	690f      	ldr	r7, [r1, #16]
 8008d66:	2f00      	cmp	r7, #0
 8008d68:	d0a9      	beq.n	8008cbe <__sflush_r+0x1a>
 8008d6a:	0793      	lsls	r3, r2, #30
 8008d6c:	680e      	ldr	r6, [r1, #0]
 8008d6e:	bf08      	it	eq
 8008d70:	694b      	ldreq	r3, [r1, #20]
 8008d72:	600f      	str	r7, [r1, #0]
 8008d74:	bf18      	it	ne
 8008d76:	2300      	movne	r3, #0
 8008d78:	eba6 0807 	sub.w	r8, r6, r7
 8008d7c:	608b      	str	r3, [r1, #8]
 8008d7e:	f1b8 0f00 	cmp.w	r8, #0
 8008d82:	dd9c      	ble.n	8008cbe <__sflush_r+0x1a>
 8008d84:	6a21      	ldr	r1, [r4, #32]
 8008d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d88:	4643      	mov	r3, r8
 8008d8a:	463a      	mov	r2, r7
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b0      	blx	r6
 8008d90:	2800      	cmp	r0, #0
 8008d92:	dc06      	bgt.n	8008da2 <__sflush_r+0xfe>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	e78e      	b.n	8008cc0 <__sflush_r+0x1c>
 8008da2:	4407      	add	r7, r0
 8008da4:	eba8 0800 	sub.w	r8, r8, r0
 8008da8:	e7e9      	b.n	8008d7e <__sflush_r+0xda>
 8008daa:	bf00      	nop
 8008dac:	20400001 	.word	0x20400001

08008db0 <_fflush_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	690b      	ldr	r3, [r1, #16]
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b913      	cbnz	r3, 8008dc0 <_fflush_r+0x10>
 8008dba:	2500      	movs	r5, #0
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	b118      	cbz	r0, 8008dca <_fflush_r+0x1a>
 8008dc2:	6983      	ldr	r3, [r0, #24]
 8008dc4:	b90b      	cbnz	r3, 8008dca <_fflush_r+0x1a>
 8008dc6:	f000 f887 	bl	8008ed8 <__sinit>
 8008dca:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <_fflush_r+0x6c>)
 8008dcc:	429c      	cmp	r4, r3
 8008dce:	d11b      	bne.n	8008e08 <_fflush_r+0x58>
 8008dd0:	686c      	ldr	r4, [r5, #4]
 8008dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0ef      	beq.n	8008dba <_fflush_r+0xa>
 8008dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ddc:	07d0      	lsls	r0, r2, #31
 8008dde:	d404      	bmi.n	8008dea <_fflush_r+0x3a>
 8008de0:	0599      	lsls	r1, r3, #22
 8008de2:	d402      	bmi.n	8008dea <_fflush_r+0x3a>
 8008de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008de6:	f000 f915 	bl	8009014 <__retarget_lock_acquire_recursive>
 8008dea:	4628      	mov	r0, r5
 8008dec:	4621      	mov	r1, r4
 8008dee:	f7ff ff59 	bl	8008ca4 <__sflush_r>
 8008df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df4:	07da      	lsls	r2, r3, #31
 8008df6:	4605      	mov	r5, r0
 8008df8:	d4e0      	bmi.n	8008dbc <_fflush_r+0xc>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	059b      	lsls	r3, r3, #22
 8008dfe:	d4dd      	bmi.n	8008dbc <_fflush_r+0xc>
 8008e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e02:	f000 f908 	bl	8009016 <__retarget_lock_release_recursive>
 8008e06:	e7d9      	b.n	8008dbc <_fflush_r+0xc>
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <_fflush_r+0x70>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d101      	bne.n	8008e12 <_fflush_r+0x62>
 8008e0e:	68ac      	ldr	r4, [r5, #8]
 8008e10:	e7df      	b.n	8008dd2 <_fflush_r+0x22>
 8008e12:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <_fflush_r+0x74>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bf08      	it	eq
 8008e18:	68ec      	ldreq	r4, [r5, #12]
 8008e1a:	e7da      	b.n	8008dd2 <_fflush_r+0x22>
 8008e1c:	0800a5a4 	.word	0x0800a5a4
 8008e20:	0800a5c4 	.word	0x0800a5c4
 8008e24:	0800a584 	.word	0x0800a584

08008e28 <std>:
 8008e28:	2300      	movs	r3, #0
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e36:	6083      	str	r3, [r0, #8]
 8008e38:	8181      	strh	r1, [r0, #12]
 8008e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e3c:	81c2      	strh	r2, [r0, #14]
 8008e3e:	6183      	str	r3, [r0, #24]
 8008e40:	4619      	mov	r1, r3
 8008e42:	2208      	movs	r2, #8
 8008e44:	305c      	adds	r0, #92	; 0x5c
 8008e46:	f7ff f87d 	bl	8007f44 <memset>
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <std+0x38>)
 8008e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8008e4e:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <std+0x3c>)
 8008e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <std+0x40>)
 8008e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <std+0x44>)
 8008e58:	6224      	str	r4, [r4, #32]
 8008e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	bf00      	nop
 8008e60:	08009145 	.word	0x08009145
 8008e64:	08009167 	.word	0x08009167
 8008e68:	0800919f 	.word	0x0800919f
 8008e6c:	080091c3 	.word	0x080091c3

08008e70 <_cleanup_r>:
 8008e70:	4901      	ldr	r1, [pc, #4]	; (8008e78 <_cleanup_r+0x8>)
 8008e72:	f000 b8af 	b.w	8008fd4 <_fwalk_reent>
 8008e76:	bf00      	nop
 8008e78:	08008db1 	.word	0x08008db1

08008e7c <__sfmoreglue>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	1e4a      	subs	r2, r1, #1
 8008e80:	2568      	movs	r5, #104	; 0x68
 8008e82:	4355      	muls	r5, r2
 8008e84:	460e      	mov	r6, r1
 8008e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e8a:	f7ff f8c3 	bl	8008014 <_malloc_r>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	b140      	cbz	r0, 8008ea4 <__sfmoreglue+0x28>
 8008e92:	2100      	movs	r1, #0
 8008e94:	e9c0 1600 	strd	r1, r6, [r0]
 8008e98:	300c      	adds	r0, #12
 8008e9a:	60a0      	str	r0, [r4, #8]
 8008e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ea0:	f7ff f850 	bl	8007f44 <memset>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}

08008ea8 <__sfp_lock_acquire>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__sfp_lock_acquire+0x8>)
 8008eaa:	f000 b8b3 	b.w	8009014 <__retarget_lock_acquire_recursive>
 8008eae:	bf00      	nop
 8008eb0:	20012efc 	.word	0x20012efc

08008eb4 <__sfp_lock_release>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__sfp_lock_release+0x8>)
 8008eb6:	f000 b8ae 	b.w	8009016 <__retarget_lock_release_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20012efc 	.word	0x20012efc

08008ec0 <__sinit_lock_acquire>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__sinit_lock_acquire+0x8>)
 8008ec2:	f000 b8a7 	b.w	8009014 <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	20012ef7 	.word	0x20012ef7

08008ecc <__sinit_lock_release>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	; (8008ed4 <__sinit_lock_release+0x8>)
 8008ece:	f000 b8a2 	b.w	8009016 <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	20012ef7 	.word	0x20012ef7

08008ed8 <__sinit>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	4604      	mov	r4, r0
 8008edc:	f7ff fff0 	bl	8008ec0 <__sinit_lock_acquire>
 8008ee0:	69a3      	ldr	r3, [r4, #24]
 8008ee2:	b11b      	cbz	r3, 8008eec <__sinit+0x14>
 8008ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee8:	f7ff bff0 	b.w	8008ecc <__sinit_lock_release>
 8008eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <__sinit+0x68>)
 8008ef4:	4a13      	ldr	r2, [pc, #76]	; (8008f44 <__sinit+0x6c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	bf04      	itt	eq
 8008efe:	2301      	moveq	r3, #1
 8008f00:	61a3      	streq	r3, [r4, #24]
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 f820 	bl	8008f48 <__sfp>
 8008f08:	6060      	str	r0, [r4, #4]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 f81c 	bl	8008f48 <__sfp>
 8008f10:	60a0      	str	r0, [r4, #8]
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 f818 	bl	8008f48 <__sfp>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	60e0      	str	r0, [r4, #12]
 8008f1c:	2104      	movs	r1, #4
 8008f1e:	6860      	ldr	r0, [r4, #4]
 8008f20:	f7ff ff82 	bl	8008e28 <std>
 8008f24:	68a0      	ldr	r0, [r4, #8]
 8008f26:	2201      	movs	r2, #1
 8008f28:	2109      	movs	r1, #9
 8008f2a:	f7ff ff7d 	bl	8008e28 <std>
 8008f2e:	68e0      	ldr	r0, [r4, #12]
 8008f30:	2202      	movs	r2, #2
 8008f32:	2112      	movs	r1, #18
 8008f34:	f7ff ff78 	bl	8008e28 <std>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	61a3      	str	r3, [r4, #24]
 8008f3c:	e7d2      	b.n	8008ee4 <__sinit+0xc>
 8008f3e:	bf00      	nop
 8008f40:	08009eb4 	.word	0x08009eb4
 8008f44:	08008e71 	.word	0x08008e71

08008f48 <__sfp>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	4607      	mov	r7, r0
 8008f4c:	f7ff ffac 	bl	8008ea8 <__sfp_lock_acquire>
 8008f50:	4b1e      	ldr	r3, [pc, #120]	; (8008fcc <__sfp+0x84>)
 8008f52:	681e      	ldr	r6, [r3, #0]
 8008f54:	69b3      	ldr	r3, [r6, #24]
 8008f56:	b913      	cbnz	r3, 8008f5e <__sfp+0x16>
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7ff ffbd 	bl	8008ed8 <__sinit>
 8008f5e:	3648      	adds	r6, #72	; 0x48
 8008f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	d503      	bpl.n	8008f70 <__sfp+0x28>
 8008f68:	6833      	ldr	r3, [r6, #0]
 8008f6a:	b30b      	cbz	r3, 8008fb0 <__sfp+0x68>
 8008f6c:	6836      	ldr	r6, [r6, #0]
 8008f6e:	e7f7      	b.n	8008f60 <__sfp+0x18>
 8008f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f74:	b9d5      	cbnz	r5, 8008fac <__sfp+0x64>
 8008f76:	4b16      	ldr	r3, [pc, #88]	; (8008fd0 <__sfp+0x88>)
 8008f78:	60e3      	str	r3, [r4, #12]
 8008f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f80:	f000 f847 	bl	8009012 <__retarget_lock_init_recursive>
 8008f84:	f7ff ff96 	bl	8008eb4 <__sfp_lock_release>
 8008f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f90:	6025      	str	r5, [r4, #0]
 8008f92:	61a5      	str	r5, [r4, #24]
 8008f94:	2208      	movs	r2, #8
 8008f96:	4629      	mov	r1, r5
 8008f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f9c:	f7fe ffd2 	bl	8007f44 <memset>
 8008fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fa8:	4620      	mov	r0, r4
 8008faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fac:	3468      	adds	r4, #104	; 0x68
 8008fae:	e7d9      	b.n	8008f64 <__sfp+0x1c>
 8008fb0:	2104      	movs	r1, #4
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f7ff ff62 	bl	8008e7c <__sfmoreglue>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	6030      	str	r0, [r6, #0]
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d1d5      	bne.n	8008f6c <__sfp+0x24>
 8008fc0:	f7ff ff78 	bl	8008eb4 <__sfp_lock_release>
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	e7ee      	b.n	8008fa8 <__sfp+0x60>
 8008fca:	bf00      	nop
 8008fcc:	08009eb4 	.word	0x08009eb4
 8008fd0:	ffff0001 	.word	0xffff0001

08008fd4 <_fwalk_reent>:
 8008fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd8:	4606      	mov	r6, r0
 8008fda:	4688      	mov	r8, r1
 8008fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fe0:	2700      	movs	r7, #0
 8008fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8008fea:	d505      	bpl.n	8008ff8 <_fwalk_reent+0x24>
 8008fec:	6824      	ldr	r4, [r4, #0]
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d1f7      	bne.n	8008fe2 <_fwalk_reent+0xe>
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff8:	89ab      	ldrh	r3, [r5, #12]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d907      	bls.n	800900e <_fwalk_reent+0x3a>
 8008ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009002:	3301      	adds	r3, #1
 8009004:	d003      	beq.n	800900e <_fwalk_reent+0x3a>
 8009006:	4629      	mov	r1, r5
 8009008:	4630      	mov	r0, r6
 800900a:	47c0      	blx	r8
 800900c:	4307      	orrs	r7, r0
 800900e:	3568      	adds	r5, #104	; 0x68
 8009010:	e7e9      	b.n	8008fe6 <_fwalk_reent+0x12>

08009012 <__retarget_lock_init_recursive>:
 8009012:	4770      	bx	lr

08009014 <__retarget_lock_acquire_recursive>:
 8009014:	4770      	bx	lr

08009016 <__retarget_lock_release_recursive>:
 8009016:	4770      	bx	lr

08009018 <__swhatbuf_r>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	460e      	mov	r6, r1
 800901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009020:	2900      	cmp	r1, #0
 8009022:	b096      	sub	sp, #88	; 0x58
 8009024:	4614      	mov	r4, r2
 8009026:	461d      	mov	r5, r3
 8009028:	da07      	bge.n	800903a <__swhatbuf_r+0x22>
 800902a:	2300      	movs	r3, #0
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	89b3      	ldrh	r3, [r6, #12]
 8009030:	061a      	lsls	r2, r3, #24
 8009032:	d410      	bmi.n	8009056 <__swhatbuf_r+0x3e>
 8009034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009038:	e00e      	b.n	8009058 <__swhatbuf_r+0x40>
 800903a:	466a      	mov	r2, sp
 800903c:	f000 f8e8 	bl	8009210 <_fstat_r>
 8009040:	2800      	cmp	r0, #0
 8009042:	dbf2      	blt.n	800902a <__swhatbuf_r+0x12>
 8009044:	9a01      	ldr	r2, [sp, #4]
 8009046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800904a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800904e:	425a      	negs	r2, r3
 8009050:	415a      	adcs	r2, r3
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	e7ee      	b.n	8009034 <__swhatbuf_r+0x1c>
 8009056:	2340      	movs	r3, #64	; 0x40
 8009058:	2000      	movs	r0, #0
 800905a:	6023      	str	r3, [r4, #0]
 800905c:	b016      	add	sp, #88	; 0x58
 800905e:	bd70      	pop	{r4, r5, r6, pc}

08009060 <__smakebuf_r>:
 8009060:	898b      	ldrh	r3, [r1, #12]
 8009062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009064:	079d      	lsls	r5, r3, #30
 8009066:	4606      	mov	r6, r0
 8009068:	460c      	mov	r4, r1
 800906a:	d507      	bpl.n	800907c <__smakebuf_r+0x1c>
 800906c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	2301      	movs	r3, #1
 8009076:	6163      	str	r3, [r4, #20]
 8009078:	b002      	add	sp, #8
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	ab01      	add	r3, sp, #4
 800907e:	466a      	mov	r2, sp
 8009080:	f7ff ffca 	bl	8009018 <__swhatbuf_r>
 8009084:	9900      	ldr	r1, [sp, #0]
 8009086:	4605      	mov	r5, r0
 8009088:	4630      	mov	r0, r6
 800908a:	f7fe ffc3 	bl	8008014 <_malloc_r>
 800908e:	b948      	cbnz	r0, 80090a4 <__smakebuf_r+0x44>
 8009090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d4ef      	bmi.n	8009078 <__smakebuf_r+0x18>
 8009098:	f023 0303 	bic.w	r3, r3, #3
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	81a3      	strh	r3, [r4, #12]
 80090a2:	e7e3      	b.n	800906c <__smakebuf_r+0xc>
 80090a4:	4b0d      	ldr	r3, [pc, #52]	; (80090dc <__smakebuf_r+0x7c>)
 80090a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	9b00      	ldr	r3, [sp, #0]
 80090b4:	6163      	str	r3, [r4, #20]
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	6120      	str	r0, [r4, #16]
 80090ba:	b15b      	cbz	r3, 80090d4 <__smakebuf_r+0x74>
 80090bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 f8b7 	bl	8009234 <_isatty_r>
 80090c6:	b128      	cbz	r0, 80090d4 <__smakebuf_r+0x74>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f023 0303 	bic.w	r3, r3, #3
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	89a0      	ldrh	r0, [r4, #12]
 80090d6:	4305      	orrs	r5, r0
 80090d8:	81a5      	strh	r5, [r4, #12]
 80090da:	e7cd      	b.n	8009078 <__smakebuf_r+0x18>
 80090dc:	08008e71 	.word	0x08008e71

080090e0 <__malloc_lock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__malloc_lock+0x8>)
 80090e2:	f7ff bf97 	b.w	8009014 <__retarget_lock_acquire_recursive>
 80090e6:	bf00      	nop
 80090e8:	20012ef8 	.word	0x20012ef8

080090ec <__malloc_unlock>:
 80090ec:	4801      	ldr	r0, [pc, #4]	; (80090f4 <__malloc_unlock+0x8>)
 80090ee:	f7ff bf92 	b.w	8009016 <__retarget_lock_release_recursive>
 80090f2:	bf00      	nop
 80090f4:	20012ef8 	.word	0x20012ef8

080090f8 <_realloc_r>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	4607      	mov	r7, r0
 80090fc:	4614      	mov	r4, r2
 80090fe:	460e      	mov	r6, r1
 8009100:	b921      	cbnz	r1, 800910c <_realloc_r+0x14>
 8009102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009106:	4611      	mov	r1, r2
 8009108:	f7fe bf84 	b.w	8008014 <_malloc_r>
 800910c:	b922      	cbnz	r2, 8009118 <_realloc_r+0x20>
 800910e:	f7fe ff31 	bl	8007f74 <_free_r>
 8009112:	4625      	mov	r5, r4
 8009114:	4628      	mov	r0, r5
 8009116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009118:	f000 f8ae 	bl	8009278 <_malloc_usable_size_r>
 800911c:	42a0      	cmp	r0, r4
 800911e:	d20f      	bcs.n	8009140 <_realloc_r+0x48>
 8009120:	4621      	mov	r1, r4
 8009122:	4638      	mov	r0, r7
 8009124:	f7fe ff76 	bl	8008014 <_malloc_r>
 8009128:	4605      	mov	r5, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	d0f2      	beq.n	8009114 <_realloc_r+0x1c>
 800912e:	4631      	mov	r1, r6
 8009130:	4622      	mov	r2, r4
 8009132:	f7fe fef9 	bl	8007f28 <memcpy>
 8009136:	4631      	mov	r1, r6
 8009138:	4638      	mov	r0, r7
 800913a:	f7fe ff1b 	bl	8007f74 <_free_r>
 800913e:	e7e9      	b.n	8009114 <_realloc_r+0x1c>
 8009140:	4635      	mov	r5, r6
 8009142:	e7e7      	b.n	8009114 <_realloc_r+0x1c>

08009144 <__sread>:
 8009144:	b510      	push	{r4, lr}
 8009146:	460c      	mov	r4, r1
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	f000 f89c 	bl	8009288 <_read_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	bfab      	itete	ge
 8009154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009156:	89a3      	ldrhlt	r3, [r4, #12]
 8009158:	181b      	addge	r3, r3, r0
 800915a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800915e:	bfac      	ite	ge
 8009160:	6563      	strge	r3, [r4, #84]	; 0x54
 8009162:	81a3      	strhlt	r3, [r4, #12]
 8009164:	bd10      	pop	{r4, pc}

08009166 <__swrite>:
 8009166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	461f      	mov	r7, r3
 800916c:	898b      	ldrh	r3, [r1, #12]
 800916e:	05db      	lsls	r3, r3, #23
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4616      	mov	r6, r2
 8009176:	d505      	bpl.n	8009184 <__swrite+0x1e>
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	2302      	movs	r3, #2
 800917e:	2200      	movs	r2, #0
 8009180:	f000 f868 	bl	8009254 <_lseek_r>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	4628      	mov	r0, r5
 8009196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	f000 b817 	b.w	80091cc <_write_r>

0800919e <__sseek>:
 800919e:	b510      	push	{r4, lr}
 80091a0:	460c      	mov	r4, r1
 80091a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a6:	f000 f855 	bl	8009254 <_lseek_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	bf15      	itete	ne
 80091b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ba:	81a3      	strheq	r3, [r4, #12]
 80091bc:	bf18      	it	ne
 80091be:	81a3      	strhne	r3, [r4, #12]
 80091c0:	bd10      	pop	{r4, pc}

080091c2 <__sclose>:
 80091c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c6:	f000 b813 	b.w	80091f0 <_close_r>
	...

080091cc <_write_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	; (80091ec <_write_r+0x20>)
 80091d0:	4604      	mov	r4, r0
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	602a      	str	r2, [r5, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7f8 fb3d 	bl	800185a <_write>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_write_r+0x1e>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_write_r+0x1e>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20012f00 	.word	0x20012f00

080091f0 <_close_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	; (800920c <_close_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7f8 fb49 	bl	8001892 <_close>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_close_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_close_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20012f00 	.word	0x20012f00

08009210 <_fstat_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	; (8009230 <_fstat_r+0x20>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	4611      	mov	r1, r2
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	f7f8 fb44 	bl	80018aa <_fstat>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	d102      	bne.n	800922c <_fstat_r+0x1c>
 8009226:	682b      	ldr	r3, [r5, #0]
 8009228:	b103      	cbz	r3, 800922c <_fstat_r+0x1c>
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	bd38      	pop	{r3, r4, r5, pc}
 800922e:	bf00      	nop
 8009230:	20012f00 	.word	0x20012f00

08009234 <_isatty_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_isatty_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f8 fb43 	bl	80018ca <_isatty>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_isatty_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_isatty_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20012f00 	.word	0x20012f00

08009254 <_lseek_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	; (8009274 <_lseek_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7f8 fb3c 	bl	80018e0 <_lseek>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_lseek_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_lseek_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20012f00 	.word	0x20012f00

08009278 <_malloc_usable_size_r>:
 8009278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800927c:	1f18      	subs	r0, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfbc      	itt	lt
 8009282:	580b      	ldrlt	r3, [r1, r0]
 8009284:	18c0      	addlt	r0, r0, r3
 8009286:	4770      	bx	lr

08009288 <_read_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	; (80092a8 <_read_r+0x20>)
 800928c:	4604      	mov	r4, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	2200      	movs	r2, #0
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7f8 fac2 	bl	8001820 <_read>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_read_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_read_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20012f00 	.word	0x20012f00

080092ac <_init>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr

080092b8 <_fini>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr
